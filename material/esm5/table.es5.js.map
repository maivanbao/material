{"version":3,"file":"table.es5.js","sources":["../../../src/lib/table/index.ts","../../../src/lib/table/public-api.ts","../../../src/lib/table/table-data-source.ts","../../../src/lib/table/table-module.ts","../../../src/lib/table/row.ts","../../../src/lib/table/cell.ts","../../../src/lib/table/table.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nexport * from './table-module';\r\nexport * from './cell';\r\nexport * from './table';\r\nexport * from './row';\r\nexport * from './table-data-source';\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {DataSource} from '@angular/cdk/table';\r\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\r\nimport {MatPaginator} from '@angular/material/paginator';\r\nimport {MatSort} from '@angular/material/sort';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {combineLatest} from 'rxjs/operators/combineLatest';\r\nimport {map} from 'rxjs/operators/map';\r\nimport {startWith} from 'rxjs/operators/startWith';\r\nimport {empty} from 'rxjs/observable/empty';\r\nimport {_isNumberValue} from '@angular/cdk/coercion';\r\n\r\n/**\r\n * Data source that accepts a client-side data array and includes native support of filtering,\r\n * sorting (using MatSort), and pagination (using MatPaginator).\r\n *\r\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\r\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\r\n * which defines how row data is converted to a string for filter matching.\r\n */\r\nexport class MatTableDataSource<T> extends DataSource<T> {\r\n  /** Stream that emits when a new data array is set on the data source. */\r\n  private readonly _data: BehaviorSubject<T[]>;\r\n\r\n  /** Stream emitting render data to the table (depends on ordered data changes). */\r\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\r\n\r\n  /** Stream that emits when a new filter string is set on the data source. */\r\n  private readonly _filter = new BehaviorSubject<string>('');\r\n\r\n  /**\r\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\r\n   * as filtering, sorting, pagination, or base data changes.\r\n   */\r\n  _renderChangesSubscription: Subscription;\r\n\r\n  /**\r\n   * The filtered set of data that has been matched by the filter string, or all the data if there\r\n   * is no filter. Useful for knowing the set of data the table represents.\r\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\r\n   * shown to the user rather than all the data.\r\n   */\r\n  filteredData: T[];\r\n\r\n  /** Array of data that should be rendered by the table, where each object represents one row. */\r\n  get data() { return this._data.value; }\r\n  set data(data: T[]) { this._data.next(data); }\r\n\r\n  /**\r\n   * Filter term that should be used to filter out objects from the data array. To override how\r\n   * data objects match to this filter string, provide a custom function for filterPredicate.\r\n   */\r\n  get filter(): string { return this._filter.value; }\r\n  set filter(filter: string) { this._filter.next(filter); }\r\n\r\n  /**\r\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\r\n   * emitted by the MatSort will trigger an update to the table's rendered data.\r\n   */\r\n  get sort(): MatSort | null { return this._sort; }\r\n  set sort(sort: MatSort|null) {\r\n    this._sort = sort;\r\n    this._updateChangeSubscription();\r\n  }\r\n  private _sort: MatSort|null;\r\n\r\n  /**\r\n   * Instance of the MatPaginator component used by the table to control what page of the data is\r\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\r\n   * table's rendered data.\r\n   *\r\n   * Note that the data source uses the paginator's properties to calculate which page of data\r\n   * should be displayed. If the paginator receives its properties as template inputs,\r\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\r\n   * initialized before assigning it to this data source.\r\n   */\r\n  get paginator(): MatPaginator | null { return this._paginator; }\r\n  set paginator(paginator: MatPaginator|null) {\r\n    this._paginator = paginator;\r\n    this._updateChangeSubscription();\r\n  }\r\n  private _paginator: MatPaginator|null;\r\n\r\n  /**\r\n   * Data accessor function that is used for accessing data properties for sorting through\r\n   * the default sortData function.\r\n   * This default function assumes that the sort header IDs (which defaults to the column name)\r\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\r\n   * May be set to a custom function for different behavior.\r\n   * @param data Data object that is being accessed.\r\n   * @param sortHeaderId The name of the column that represents the data.\r\n   */\r\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\r\n      (data: T, sortHeaderId: string): string|number => {\r\n    const value: any = data[sortHeaderId];\r\n    return _isNumberValue(value) ? Number(value) : value;\r\n  }\r\n\r\n  /**\r\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\r\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\r\n   * By default, the function retrieves the active sort and its direction and compares data\r\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\r\n   * of data ordering.\r\n   * @param data The array of data that should be sorted.\r\n   * @param sort The connected MatSort that holds the current sort state.\r\n   */\r\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\r\n    const active = sort.active;\r\n    const direction = sort.direction;\r\n    if (!active || direction == '') { return data; }\r\n\r\n    return data.sort((a, b) => {\r\n      let valueA = this.sortingDataAccessor(a, active);\r\n      let valueB = this.sortingDataAccessor(b, active);\r\n\r\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\r\n      // one value exists while the other doesn't. In this case, existing value should come first.\r\n      // This avoids inconsistent results when comparing values to undefined/null.\r\n      // If neither value exists, return 0 (equal).\r\n      let comparatorResult = 0;\r\n      if (valueA && valueB) {\r\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\r\n        if (valueA > valueB) {\r\n          comparatorResult = 1;\r\n        } else if (valueA < valueB) {\r\n          comparatorResult = -1;\r\n        }\r\n      } else if (valueA) {\r\n        comparatorResult = 1;\r\n      } else if (valueB) {\r\n        comparatorResult = -1;\r\n      }\r\n\r\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Checks if a data object matches the data source's filter string. By default, each data object\r\n   * is converted to a string of its properties and returns true if the filter has\r\n   * at least one occurrence in that string. By default, the filter string has its whitespace\r\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\r\n   * filter matching.\r\n   * @param data Data object used to check against the filter.\r\n   * @param filter Filter string that has been set on the data source.\r\n   * @returns Whether the filter matches against the data\r\n   */\r\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\r\n    // Transform the data into a lowercase string of all property values.\r\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\r\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\r\n\r\n    // Transform the filter by converting it to lowercase and removing whitespace.\r\n    const transformedFilter = filter.trim().toLowerCase();\r\n\r\n    return dataStr.indexOf(transformedFilter) != -1;\r\n  }\r\n\r\n  constructor(initialData: T[] = []) {\r\n    super();\r\n    this._data = new BehaviorSubject<T[]>(initialData);\r\n    this._updateChangeSubscription();\r\n  }\r\n\r\n  /**\r\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\r\n   * changes occur, process the current state of the filter, sort, and pagination along with\r\n   * the provided base data and send it to the table for rendering.\r\n   */\r\n  _updateChangeSubscription() {\r\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\r\n    // Otherwise, use an empty observable stream to take their place.\r\n    const sortChange = this._sort ? this._sort.sortChange : empty();\r\n    const pageChange = this._paginator ? this._paginator.page : empty();\r\n\r\n    if (this._renderChangesSubscription) {\r\n      this._renderChangesSubscription.unsubscribe();\r\n    }\r\n\r\n    // Watch for base data or filter changes to provide a filtered set of data.\r\n    this._renderChangesSubscription = this._data.pipe(\r\n      combineLatest(this._filter),\r\n      map(([data]) => this._filterData(data)),\r\n      // Watch for filtered data or sort changes to provide an ordered set of data.\r\n      combineLatest(sortChange.pipe(startWith(null!))),\r\n      map(([data]) => this._orderData(data)),\r\n      // Watch for ordered data or page changes to provide a paged set of data.\r\n      combineLatest(pageChange.pipe(startWith(null!))),\r\n      map(([data]) => this._pageData(data))\r\n    )\r\n    // Watched for paged data changes and send the result to the table to render.\r\n    .subscribe(data => this._renderData.next(data));\r\n  }\r\n\r\n  /**\r\n   * Returns a filtered data array where each filter object contains the filter string within\r\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\r\n   * as provided.\r\n   */\r\n  _filterData(data: T[]) {\r\n    // If there is a filter string, filter out data that does not contain it.\r\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\r\n    // May be overridden for customization.\r\n    this.filteredData =\r\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\r\n\r\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\r\n\r\n    return this.filteredData;\r\n  }\r\n\r\n  /**\r\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\r\n   * data array as provided. Uses the default data accessor for data lookup, unless a\r\n   * sortDataAccessor function is defined.\r\n   */\r\n  _orderData(data: T[]): T[] {\r\n    // If there is no active sort or direction, return the data without trying to sort.\r\n    if (!this.sort) { return data; }\r\n\r\n    return this.sortData(data.slice(), this.sort);\r\n  }\r\n\r\n  /**\r\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\r\n   * index and length. If there is no paginator provided, returns the data array as provided.\r\n   */\r\n  _pageData(data: T[]): T[] {\r\n    if (!this.paginator) { return data; }\r\n\r\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\r\n    return data.slice().splice(startIndex, this.paginator.pageSize);\r\n  }\r\n\r\n  /**\r\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\r\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\r\n   * guard against making property changes within a round of change detection.\r\n   */\r\n  _updatePaginator(filteredDataLength: number) {\r\n    Promise.resolve().then(() => {\r\n      if (!this.paginator) { return; }\r\n\r\n      this.paginator.length = filteredDataLength;\r\n\r\n      // If the page index is set beyond the page, reduce it to the last page.\r\n      if (this.paginator.pageIndex > 0) {\r\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\r\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Used by the MatTable. Called when it connects to the data source.\r\n   * @docs-private\r\n   */\r\n  connect() { return this._renderData; }\r\n\r\n  /**\r\n   * Used by the MatTable. Called when it is destroyed. No-op.\r\n   * @docs-private\r\n   */\r\n  disconnect() { }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {MatTable} from './table';\r\nimport {CdkTableModule} from '@angular/cdk/table';\r\nimport {MatCell, MatCellDef, MatColumnDef, MatHeaderCell, MatHeaderCellDef} from './cell';\r\nimport {MatHeaderRow, MatHeaderRowDef, MatRow, MatRowDef} from './row';\r\nimport {CommonModule} from '@angular/common';\r\nimport {MatCommonModule} from '@angular/material/core';\r\n\r\n@NgModule({\r\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\r\n  exports: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\r\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\r\n    MatHeaderRowDef, MatRowDef],\r\n  declarations: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\r\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\r\n    MatHeaderRowDef, MatRowDef],\r\n})\r\nexport class MatTableModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\r\nimport {\r\n  CDK_ROW_TEMPLATE,\r\n  CdkHeaderRow,\r\n  CdkHeaderRowDef,\r\n  CdkRow,\r\n  CdkRowDef,\r\n} from '@angular/cdk/table';\r\n\r\n/**\r\n * Header row definition for the mat-table.\r\n * Captures the header row's template and other header properties such as the columns to display.\r\n */\r\n@Directive({\r\n  selector: '[matHeaderRowDef]',\r\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\r\n  inputs: ['columns: matHeaderRowDef'],\r\n})\r\nexport class MatHeaderRowDef extends CdkHeaderRowDef { }\r\n\r\n/**\r\n * Data row definition for the mat-table.\r\n * Captures the header row's template and other row properties such as the columns to display and\r\n * a when predicate that describes when this row should be used.\r\n */\r\n@Directive({\r\n  selector: '[matRowDef]',\r\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\r\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\r\n})\r\nexport class MatRowDef<T> extends CdkRowDef<T> {\r\n}\r\n\r\n/** Header template container that contains the cell outlet. Adds the right class and role. */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-header-row',\r\n  template: CDK_ROW_TEMPLATE,\r\n  host: {\r\n    'class': 'mat-header-row',\r\n    'role': 'row',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  exportAs: 'matHeaderRow',\r\n  preserveWhitespaces: false,\r\n})\r\nexport class MatHeaderRow extends CdkHeaderRow { }\r\n\r\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-row',\r\n  template: CDK_ROW_TEMPLATE,\r\n  host: {\r\n    'class': 'mat-row',\r\n    'role': 'row',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  exportAs: 'matRow',\r\n  preserveWhitespaces: false,\r\n})\r\nexport class MatRow extends CdkRow { }\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, ElementRef, Input} from '@angular/core';\r\nimport {\r\n  CdkCell,\r\n  CdkCellDef,\r\n  CdkColumnDef,\r\n  CdkHeaderCell,\r\n  CdkHeaderCellDef,\r\n} from '@angular/cdk/table';\r\n\r\n/**\r\n * Cell definition for the mat-table.\r\n * Captures the template of a column's data row cell as well as cell-specific properties.\r\n */\r\n@Directive({\r\n  selector: '[matCellDef]',\r\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\r\n})\r\nexport class MatCellDef extends CdkCellDef { }\r\n\r\n/**\r\n * Header cell definition for the mat-table.\r\n * Captures the template of a column's header cell and as well as cell-specific properties.\r\n */\r\n@Directive({\r\n  selector: '[matHeaderCellDef]',\r\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\r\n})\r\nexport class MatHeaderCellDef extends CdkHeaderCellDef { }\r\n\r\n/**\r\n * Column definition for the mat-table.\r\n * Defines a set of cells available for a table column.\r\n */\r\n@Directive({\r\n  selector: '[matColumnDef]',\r\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\r\n})\r\nexport class MatColumnDef extends CdkColumnDef {\r\n  /** Unique name for this column. */\r\n  @Input('matColumnDef') name: string;\r\n}\r\n\r\n/** Header cell template container that adds the right classes and role. */\r\n@Directive({\r\n  selector: 'mat-header-cell',\r\n  host: {\r\n    'class': 'mat-header-cell',\r\n    'role': 'columnheader',\r\n  },\r\n})\r\nexport class MatHeaderCell extends CdkHeaderCell {\r\n  constructor(columnDef: CdkColumnDef,\r\n              elementRef: ElementRef) {\r\n    super(columnDef, elementRef);\r\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\r\n  }\r\n}\r\n\r\n/** Cell template container that adds the right classes and role. */\r\n@Directive({\r\n  selector: 'mat-cell',\r\n  host: {\r\n    'class': 'mat-cell',\r\n    'role': 'gridcell',\r\n  },\r\n})\r\nexport class MatCell extends CdkCell {\r\n  constructor(columnDef: CdkColumnDef,\r\n              elementRef: ElementRef) {\r\n    super(columnDef, elementRef);\r\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\r\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\r\n\r\n/**\r\n * Wrapper for the CdkTable with Material design styles.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-table',\r\n  exportAs: 'matTable',\r\n  template: CDK_TABLE_TEMPLATE,\r\n  styleUrls: ['table.css'],\r\n  host: {\r\n    'class': 'mat-table',\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatTable<T> extends CdkTable<T> { }\r\n"],"names":["tslib_1.__extends"],"mappings":"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"}
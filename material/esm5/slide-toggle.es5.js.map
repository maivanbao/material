{"version":3,"file":"slide-toggle.es5.js","sources":["../../../src/lib/slide-toggle/index.ts","../../../src/lib/slide-toggle/public-api.ts","../../../src/lib/slide-toggle/slide-toggle-module.ts","../../../src/lib/slide-toggle/slide-toggle.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nexport * from './slide-toggle-module';\r\nexport * from './slide-toggle';\r\n\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ObserversModule} from '@angular/cdk/observers';\r\nimport {PlatformModule} from '@angular/cdk/platform';\r\nimport {NgModule} from '@angular/core';\r\nimport {\r\n  GestureConfig,\r\n  MatCommonModule,\r\n  MatRippleModule,\r\n} from '@angular/material/core';\r\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\r\nimport {A11yModule} from '@angular/cdk/a11y';\r\nimport {MatSlideToggle} from './slide-toggle';\r\n\r\n\r\n@NgModule({\r\n  imports: [MatRippleModule, MatCommonModule, PlatformModule, ObserversModule, A11yModule],\r\n  exports: [MatSlideToggle, MatCommonModule],\r\n  declarations: [MatSlideToggle],\r\n  providers: [\r\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\r\n  ],\r\n})\r\nexport class MatSlideToggleModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {\r\n  AfterContentInit,\r\n  Attribute,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  OnDestroy,\r\n  Output,\r\n  ViewChild,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {\r\n  CanColor,\r\n  CanDisable,\r\n  CanDisableRipple,\r\n  HammerInput,\r\n  HasTabIndex,\r\n  MatRipple,\r\n  mixinColor,\r\n  mixinDisabled,\r\n  mixinDisableRipple,\r\n  mixinTabIndex,\r\n  RippleRef,\r\n} from '@angular/material/core';\r\n\r\n// Increasing integer for generating unique ids for slide-toggle components.\r\nlet nextUniqueId = 0;\r\n\r\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MatSlideToggle),\r\n  multi: true\r\n};\r\n\r\n/** Change event object emitted by a MatSlideToggle. */\r\nexport class MatSlideToggleChange {\r\n  constructor(\r\n    /** The source MatSlideToggle of the event. */\r\n    public source: MatSlideToggle,\r\n    /** The new `checked` value of the MatSlideToggle. */\r\n    public checked: boolean) { }\r\n}\r\n\r\n// Boilerplate for applying mixins to MatSlideToggle.\r\n/** @docs-private */\r\nexport class MatSlideToggleBase {\r\n  constructor(public _elementRef: ElementRef) {}\r\n}\r\nexport const _MatSlideToggleMixinBase =\r\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\r\n\r\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-slide-toggle',\r\n  exportAs: 'matSlideToggle',\r\n  host: {\r\n    'class': 'mat-slide-toggle',\r\n    '[id]': 'id',\r\n    '[class.mat-checked]': 'checked',\r\n    '[class.mat-disabled]': 'disabled',\r\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\r\n  },\r\n  templateUrl: 'slide-toggle.html',\r\n  styleUrls: ['slide-toggle.css'],\r\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\r\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\r\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\r\n\r\n  private onChange = (_: any) => {};\r\n  private onTouched = () => {};\r\n\r\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\r\n  private _slideRenderer: SlideToggleRenderer;\r\n  private _required: boolean = false;\r\n  private _checked: boolean = false;\r\n\r\n  /** Reference to the focus state ripple. */\r\n  private _focusRipple: RippleRef | null;\r\n\r\n  /** Name value will be applied to the input element if present */\r\n  @Input() name: string | null = null;\r\n\r\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\r\n  @Input() id: string = this._uniqueId;\r\n\r\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\r\n  @Input() labelPosition: 'before' | 'after' = 'after';\r\n\r\n  /** Whether the slide-toggle element is checked or not */\r\n\r\n  /** Used to set the aria-label attribute on the underlying input element. */\r\n  @Input('aria-label') ariaLabel: string | null = null;\r\n\r\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\r\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\r\n\r\n  /** Whether the slide-toggle is required. */\r\n  @Input()\r\n  get required(): boolean { return this._required; }\r\n  set required(value) { this._required = coerceBooleanProperty(value); }\r\n\r\n  /** Whether the slide-toggle element is checked or not */\r\n  @Input()\r\n  get checked(): boolean { return this._checked; }\r\n  set checked(value) {\r\n    this._checked = coerceBooleanProperty(value);\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n  /** An event will be dispatched each time the slide-toggle changes its value. */\r\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\r\n      new EventEmitter<MatSlideToggleChange>();\r\n\r\n  /** Returns the unique id for the visual hidden input. */\r\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\r\n\r\n  /** Reference to the underlying input element. */\r\n  @ViewChild('input') _inputElement: ElementRef;\r\n\r\n  /** Reference to the ripple directive on the thumb container. */\r\n  @ViewChild(MatRipple) _ripple: MatRipple;\r\n\r\n  constructor(elementRef: ElementRef,\r\n              private _platform: Platform,\r\n              private _focusMonitor: FocusMonitor,\r\n              private _changeDetectorRef: ChangeDetectorRef,\r\n              @Attribute('tabindex') tabIndex: string) {\r\n\r\n    super(elementRef);\r\n    this.tabIndex = parseInt(tabIndex) || 0;\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._slideRenderer = new SlideToggleRenderer(this._elementRef, this._platform);\r\n\r\n    this._focusMonitor\r\n      .monitor(this._inputElement.nativeElement)\r\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\r\n  }\r\n\r\n  /** Method being called whenever the underlying input emits a change event. */\r\n  _onChangeEvent(event: Event) {\r\n    // We always have to stop propagation on the change event.\r\n    // Otherwise the change event, from the input element, will bubble up and\r\n    // emit its event object to the component's `change` output.\r\n    event.stopPropagation();\r\n\r\n    // Releasing the pointer over the `<label>` element while dragging triggers another\r\n    // click event on the `<label>` element. This means that the checked state of the underlying\r\n    // input changed unintentionally and needs to be changed back.\r\n    if (this._slideRenderer.dragging) {\r\n      this._inputElement.nativeElement.checked = this.checked;\r\n      return;\r\n    }\r\n\r\n    // Sync the value from the underlying input element with the component instance.\r\n    this.checked = this._inputElement.nativeElement.checked;\r\n\r\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\r\n    // there is no change event, when the checked state changes programmatically.\r\n    this._emitChangeEvent();\r\n  }\r\n\r\n  /** Method being called whenever the slide-toggle has been clicked. */\r\n  _onInputClick(event: Event) {\r\n    // We have to stop propagation for click events on the visual hidden input element.\r\n    // By default, when a user clicks on a label element, a generated click event will be\r\n    // dispatched on the associated input element. Since we are using a label element as our\r\n    // root container, the click event on the `slide-toggle` will be executed twice.\r\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\r\n    // This will lead to multiple click events.\r\n    // Preventing bubbling for the second event will solve that issue.\r\n    event.stopPropagation();\r\n  }\r\n\r\n  /** Implemented as part of ControlValueAccessor. */\r\n  writeValue(value: any): void {\r\n    this.checked = !!value;\r\n  }\r\n\r\n  /** Implemented as part of ControlValueAccessor. */\r\n  registerOnChange(fn: any): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  /** Implemented as part of ControlValueAccessor. */\r\n  registerOnTouched(fn: any): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  /** Implemented as a part of ControlValueAccessor. */\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /** Focuses the slide-toggle. */\r\n  focus(): void {\r\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\r\n  }\r\n\r\n  /** Toggles the checked state of the slide-toggle. */\r\n  toggle(): void {\r\n    this.checked = !this.checked;\r\n  }\r\n\r\n  /** Function is called whenever the focus changes for the input element. */\r\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\r\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\r\n      // For keyboard focus show a persistent ripple as focus indicator.\r\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\r\n    } else if (!focusOrigin) {\r\n      this.onTouched();\r\n\r\n      // Fade out and clear the focus ripple if one is currently present.\r\n      if (this._focusRipple) {\r\n        this._focusRipple.fadeOut();\r\n        this._focusRipple = null;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\r\n   */\r\n  private _emitChangeEvent() {\r\n    this.onChange(this.checked);\r\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\r\n  }\r\n\r\n  _onDragStart() {\r\n    if (!this.disabled) {\r\n      this._slideRenderer.startThumbDrag(this.checked);\r\n    }\r\n  }\r\n\r\n  _onDrag(event: HammerInput) {\r\n    if (this._slideRenderer.dragging) {\r\n      this._slideRenderer.updateThumbPosition(event.deltaX);\r\n    }\r\n  }\r\n\r\n  _onDragEnd() {\r\n    if (this._slideRenderer.dragging) {\r\n      const newCheckedValue = this._slideRenderer.dragPercentage > 50;\r\n\r\n      if (newCheckedValue !== this.checked) {\r\n        this.checked = newCheckedValue;\r\n        this._emitChangeEvent();\r\n      }\r\n\r\n      // The drag should be stopped outside of the current event handler, because otherwise the\r\n      // click event will be fired before and will revert the drag change.\r\n      setTimeout(() => this._slideRenderer.stopThumbDrag());\r\n    }\r\n  }\r\n\r\n  /** Method being called whenever the label text changes. */\r\n  _onLabelTextChange() {\r\n    // This method is getting called whenever the label of the slide-toggle changes.\r\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\r\n    // that has been recognized by the cdkObserveContent directive.\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n}\r\n\r\n/**\r\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\r\n */\r\nclass SlideToggleRenderer {\r\n\r\n  /** Reference to the thumb HTMLElement. */\r\n  private _thumbEl: HTMLElement;\r\n\r\n  /** Reference to the thumb bar HTMLElement. */\r\n  private _thumbBarEl: HTMLElement;\r\n\r\n  /** Width of the thumb bar of the slide-toggle. */\r\n  private _thumbBarWidth: number;\r\n\r\n  /** Previous checked state before drag started. */\r\n  private _previousChecked: boolean;\r\n\r\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\r\n  dragPercentage: number;\r\n\r\n  /** Whether the thumb is currently being dragged. */\r\n  dragging: boolean = false;\r\n\r\n  constructor(elementRef: ElementRef, platform: Platform) {\r\n    // We only need to interact with these elements when we're on the browser, so only grab\r\n    // the reference in that case.\r\n    if (platform.isBrowser) {\r\n      this._thumbEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\r\n      this._thumbBarEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\r\n    }\r\n  }\r\n\r\n  /** Initializes the drag of the slide-toggle. */\r\n  startThumbDrag(checked: boolean): void {\r\n    if (this.dragging) { return; }\r\n\r\n    this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\r\n    this._thumbEl.classList.add('mat-dragging');\r\n\r\n    this._previousChecked = checked;\r\n    this.dragging = true;\r\n  }\r\n\r\n  /** Resets the current drag and returns the new checked value. */\r\n  stopThumbDrag(): boolean {\r\n    if (!this.dragging) { return false; }\r\n\r\n    this.dragging = false;\r\n    this._thumbEl.classList.remove('mat-dragging');\r\n\r\n    // Reset the transform because the component will take care of the thumb position after drag.\r\n    this._thumbEl.style.transform = '';\r\n\r\n    return this.dragPercentage > 50;\r\n  }\r\n\r\n  /** Updates the thumb containers position from the specified distance. */\r\n  updateThumbPosition(distance: number): void {\r\n    this.dragPercentage = this._getDragPercentage(distance);\r\n    // Calculate the moved distance based on the thumb bar width.\r\n    const dragX = (this.dragPercentage / 100) * this._thumbBarWidth;\r\n    this._thumbEl.style.transform = `translate3d(${dragX}px, 0, 0)`;\r\n  }\r\n\r\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\r\n  private _getDragPercentage(distance: number) {\r\n    let percentage = (distance / this._thumbBarWidth) * 100;\r\n\r\n    // When the toggle was initially checked, then we have to start the drag at the end.\r\n    if (this._previousChecked) {\r\n      percentage += 100;\r\n    }\r\n\r\n    return Math.max(0, Math.min(percentage, 100));\r\n  }\r\n\r\n}\r\n"],"names":["tslib_1.__extends"],"mappings":"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"}
{"version":3,"file":"material-datepicker.umd.min.js","sources":["../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {ESCAPE} from '@angular/cdk/keycodes';\r\nimport {\r\n  Overlay,\r\n  OverlayConfig,\r\n  OverlayRef,\r\n  PositionStrategy,\r\n  RepositionScrollStrategy,\r\n  ScrollStrategy,\r\n} from '@angular/cdk/overlay';\r\nimport {ComponentPortal} from '@angular/cdk/portal';\r\nimport {take} from 'rxjs/operators/take';\r\nimport {filter} from 'rxjs/operators/filter';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ComponentRef,\r\n  EventEmitter,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  ViewChild,\r\n  ViewContainerRef,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {DateAdapter} from '@angular/material/core';\r\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {merge} from 'rxjs/observable/merge';\r\nimport {MatCalendar} from './calendar';\r\nimport {createMissingDateImplError} from './datepicker-errors';\r\nimport {MatDatepickerInput} from './datepicker-input';\r\n\r\n\r\n/** Used to generate a unique ID for each datepicker instance. */\r\nlet datepickerUid = 0;\r\n\r\n/** Injection token that determines the scroll handling while the calendar is open. */\r\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\r\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\r\n\r\n/** @docs-private */\r\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\r\n    () => RepositionScrollStrategy {\r\n  return () => overlay.scrollStrategies.reposition();\r\n}\r\n\r\n/** @docs-private */\r\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER = {\r\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\r\n  deps: [Overlay],\r\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,\r\n};\r\n\r\n\r\n/**\r\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\r\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\r\n * place to put additional features of the popup that are not part of the calendar itself in the\r\n * future. (e.g. confirmation buttons).\r\n * @docs-private\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-datepicker-content',\r\n  templateUrl: 'datepicker-content.html',\r\n  styleUrls: ['datepicker-content.css'],\r\n  host: {\r\n    'class': 'mat-datepicker-content',\r\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\r\n  },\r\n  exportAs: 'matDatepickerContent',\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatDatepickerContent<D> implements AfterContentInit {\r\n  datepicker: MatDatepicker<D>;\r\n\r\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\r\n\r\n  ngAfterContentInit() {\r\n    this._calendar._focusActiveCell();\r\n  }\r\n}\r\n\r\n\r\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\r\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\r\n// if angular adds support for `exportAs: '$implicit'` on directives.\r\n/** Component responsible for managing the datepicker popup/dialog. */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-datepicker',\r\n  template: '',\r\n  exportAs: 'matDatepicker',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n})\r\nexport class MatDatepicker<D> implements OnDestroy {\r\n  /** The date to open the calendar to initially. */\r\n  @Input()\r\n  get startAt(): D | null {\r\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\r\n    // selected value is.\r\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\r\n  }\r\n  set startAt(value: D | null) {\r\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _startAt: D | null;\r\n\r\n  /** The view that the calendar should start in. */\r\n  @Input() startView: 'month' | 'year' = 'month';\r\n\r\n  /**\r\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\r\n   * than a popup and elements have more padding to allow for bigger touch targets.\r\n   */\r\n  @Input()\r\n  get touchUi(): boolean { return this._touchUi; }\r\n  set touchUi(value: boolean) {\r\n    this._touchUi = coerceBooleanProperty(value);\r\n  }\r\n  private _touchUi = false;\r\n\r\n  /** Whether the datepicker pop-up should be disabled. */\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return this._disabled === undefined && this._datepickerInput ?\r\n        this._datepickerInput.disabled : !!this._disabled;\r\n  }\r\n  set disabled(value: boolean) {\r\n    const newValue = coerceBooleanProperty(value);\r\n\r\n    if (newValue !== this._disabled) {\r\n      this._disabled = newValue;\r\n      this._disabledChange.next(newValue);\r\n    }\r\n  }\r\n  private _disabled: boolean;\r\n\r\n  /**\r\n   * Emits new selected date when selected date changes.\r\n   * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\r\n   * @deletion-target 6.0.0\r\n   */\r\n  @Output() readonly selectedChanged: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\r\n  @Input() panelClass: string | string[];\r\n\r\n  /** Emits when the datepicker has been opened. */\r\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /** Emits when the datepicker has been closed. */\r\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /** Whether the calendar is open. */\r\n  @Input()\r\n  get opened(): boolean { return this._opened; }\r\n  set opened(value: boolean) { value ? this.open() : this.close(); }\r\n  private _opened = false;\r\n\r\n  /** The id for the datepicker calendar. */\r\n  id: string = `mat-datepicker-${datepickerUid++}`;\r\n\r\n  /** The currently selected date. */\r\n  get _selected(): D | null { return this._validSelected; }\r\n  set _selected(value: D | null) { this._validSelected = value; }\r\n  private _validSelected: D | null = null;\r\n\r\n  /** The minimum selectable date. */\r\n  get _minDate(): D | null {\r\n    return this._datepickerInput && this._datepickerInput.min;\r\n  }\r\n\r\n  /** The maximum selectable date. */\r\n  get _maxDate(): D | null {\r\n    return this._datepickerInput && this._datepickerInput.max;\r\n  }\r\n\r\n  get _dateFilter(): (date: D | null) => boolean {\r\n    return this._datepickerInput && this._datepickerInput._dateFilter;\r\n  }\r\n\r\n  /** A reference to the overlay when the calendar is opened as a popup. */\r\n  private _popupRef: OverlayRef;\r\n\r\n  /** A reference to the dialog when the calendar is opened as a dialog. */\r\n  private _dialogRef: MatDialogRef<any> | null;\r\n\r\n  /** A portal containing the calendar for this datepicker. */\r\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\r\n\r\n  /** The element that was focused before the datepicker was opened. */\r\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\r\n\r\n  private _inputSubscription = Subscription.EMPTY;\r\n\r\n  /** The input element this datepicker is associated with. */\r\n  _datepickerInput: MatDatepickerInput<D>;\r\n\r\n  /** Emits when the datepicker is disabled. */\r\n  readonly _disabledChange = new Subject<boolean>();\r\n\r\n  constructor(private _dialog: MatDialog,\r\n              private _overlay: Overlay,\r\n              private _ngZone: NgZone,\r\n              private _viewContainerRef: ViewContainerRef,\r\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\r\n              @Optional() private _dateAdapter: DateAdapter<D>,\r\n              @Optional() private _dir: Directionality,\r\n              @Optional() @Inject(DOCUMENT) private _document: any) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('DateAdapter');\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.close();\r\n    this._inputSubscription.unsubscribe();\r\n    this._disabledChange.complete();\r\n\r\n    if (this._popupRef) {\r\n      this._popupRef.dispose();\r\n    }\r\n  }\r\n\r\n  /** Selects the given date */\r\n  _select(date: D): void {\r\n    let oldValue = this._selected;\r\n    this._selected = date;\r\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\r\n      this.selectedChanged.emit(date);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Register an input with this datepicker.\r\n   * @param input The datepicker input to register with this datepicker.\r\n   */\r\n  _registerInput(input: MatDatepickerInput<D>): void {\r\n    if (this._datepickerInput) {\r\n      throw Error('A MatDatepicker can only be associated with a single input.');\r\n    }\r\n    this._datepickerInput = input;\r\n    this._inputSubscription =\r\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\r\n  }\r\n\r\n  /** Open the calendar. */\r\n  open(): void {\r\n    if (this._opened || this.disabled) {\r\n      return;\r\n    }\r\n    if (!this._datepickerInput) {\r\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\r\n    }\r\n    if (this._document) {\r\n      this._focusedElementBeforeOpen = this._document.activeElement;\r\n    }\r\n\r\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\r\n    this._opened = true;\r\n    this.openedStream.emit();\r\n  }\r\n\r\n  /** Close the calendar. */\r\n  close(): void {\r\n    if (!this._opened) {\r\n      return;\r\n    }\r\n    if (this._popupRef && this._popupRef.hasAttached()) {\r\n      this._popupRef.detach();\r\n    }\r\n    if (this._dialogRef) {\r\n      this._dialogRef.close();\r\n      this._dialogRef = null;\r\n    }\r\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\r\n      this._calendarPortal.detach();\r\n    }\r\n\r\n    const completeClose = () => {\r\n      // The `_opened` could've been reset already if\r\n      // we got two events in quick succession.\r\n      if (this._opened) {\r\n        this._opened = false;\r\n        this.closedStream.emit();\r\n        this._focusedElementBeforeOpen = null;\r\n      }\r\n    };\r\n\r\n    if (this._focusedElementBeforeOpen &&\r\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\r\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\r\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\r\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\r\n      // able to close the calendar at all. We work around it by making the logic, that marks\r\n      // the datepicker as closed, async as well.\r\n      this._focusedElementBeforeOpen.focus();\r\n      setTimeout(completeClose);\r\n    } else {\r\n      completeClose();\r\n    }\r\n  }\r\n\r\n  /** Open the calendar as a dialog. */\r\n  private _openAsDialog(): void {\r\n    this._dialogRef = this._dialog.open(MatDatepickerContent, {\r\n      direction: this._dir ? this._dir.value : 'ltr',\r\n      viewContainerRef: this._viewContainerRef,\r\n      panelClass: 'mat-datepicker-dialog',\r\n    });\r\n    this._dialogRef.afterClosed().subscribe(() => this.close());\r\n    this._dialogRef.componentInstance.datepicker = this;\r\n  }\r\n\r\n  /** Open the calendar as a popup. */\r\n  private _openAsPopup(): void {\r\n    if (!this._calendarPortal) {\r\n      this._calendarPortal = new ComponentPortal(MatDatepickerContent, this._viewContainerRef);\r\n    }\r\n\r\n    if (!this._popupRef) {\r\n      this._createPopup();\r\n    }\r\n\r\n    if (!this._popupRef.hasAttached()) {\r\n      let componentRef: ComponentRef<MatDatepickerContent<D>> =\r\n          this._popupRef.attach(this._calendarPortal);\r\n      componentRef.instance.datepicker = this;\r\n\r\n      // Update the position once the calendar has rendered.\r\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\r\n        this._popupRef.updatePosition();\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Create the popup. */\r\n  private _createPopup(): void {\r\n    const overlayConfig = new OverlayConfig({\r\n      positionStrategy: this._createPopupPositionStrategy(),\r\n      hasBackdrop: true,\r\n      backdropClass: 'mat-overlay-transparent-backdrop',\r\n      direction: this._dir ? this._dir.value : 'ltr',\r\n      scrollStrategy: this._scrollStrategy(),\r\n      panelClass: 'mat-datepicker-popup',\r\n    });\r\n\r\n    this._popupRef = this._overlay.create(overlayConfig);\r\n\r\n    merge(\r\n      this._popupRef.backdropClick(),\r\n      this._popupRef.detachments(),\r\n      this._popupRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\r\n    ).subscribe(() => this.close());\r\n  }\r\n\r\n  /** Create the popup PositionStrategy. */\r\n  private _createPopupPositionStrategy(): PositionStrategy {\r\n    const fallbackOffset = this._datepickerInput._getPopupFallbackOffset();\r\n\r\n    return this._overlay.position()\r\n      .connectedTo(this._datepickerInput.getPopupConnectionElementRef(),\r\n        {originX: 'start', originY: 'bottom'},\r\n        {overlayX: 'start', overlayY: 'top'}\r\n      )\r\n      .withFallbackPosition(\r\n        {originX: 'start', originY: 'top'},\r\n        {overlayX: 'start', overlayY: 'bottom'},\r\n        undefined,\r\n        fallbackOffset\r\n      )\r\n      .withFallbackPosition(\r\n        {originX: 'end', originY: 'bottom'},\r\n        {overlayX: 'end', overlayY: 'top'}\r\n      )\r\n      .withFallbackPosition(\r\n        {originX: 'end', originY: 'top'},\r\n        {overlayX: 'end', overlayY: 'bottom'},\r\n        undefined,\r\n        fallbackOffset\r\n      );\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\r\nimport {\r\n  AfterContentInit,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Inject,\r\n  Input,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n} from '@angular/core';\r\nimport {\r\n  AbstractControl,\r\n  ControlValueAccessor,\r\n  NG_VALIDATORS,\r\n  NG_VALUE_ACCESSOR,\r\n  ValidationErrors,\r\n  Validator,\r\n  ValidatorFn,\r\n  Validators\r\n} from '@angular/forms';\r\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\r\nimport {MatFormField} from '@angular/material/form-field';\r\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {MatDatepicker} from './datepicker';\r\nimport {createMissingDateImplError} from './datepicker-errors';\r\n\r\n\r\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MatDatepickerInput),\r\n  multi: true\r\n};\r\n\r\n\r\nexport const MAT_DATEPICKER_VALIDATORS: any = {\r\n  provide: NG_VALIDATORS,\r\n  useExisting: forwardRef(() => MatDatepickerInput),\r\n  multi: true\r\n};\r\n\r\n\r\n/**\r\n * An event used for datepicker input and change events. We don't always have access to a native\r\n * input or change event because the event may have been triggered by the user clicking on the\r\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\r\n */\r\nexport class MatDatepickerInputEvent<D> {\r\n  /** The new value for the target datepicker input. */\r\n  value: D | null;\r\n\r\n  constructor(\r\n    /** Reference to the datepicker input component that emitted the event. */\r\n    public target: MatDatepickerInput<D>,\r\n    /** Reference to the native input element associated with the datepicker input. */\r\n    public targetElement: HTMLElement) {\r\n    this.value = this.target.value;\r\n  }\r\n}\r\n\r\n\r\n/** Directive used to connect an input to a MatDatepicker. */\r\n@Directive({\r\n  selector: 'input[matDatepicker]',\r\n  providers: [\r\n    MAT_DATEPICKER_VALUE_ACCESSOR,\r\n    MAT_DATEPICKER_VALIDATORS,\r\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\r\n  ],\r\n  host: {\r\n    '[attr.aria-haspopup]': 'true',\r\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\r\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\r\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\r\n    '[disabled]': 'disabled',\r\n    '(input)': '_onInput($event.target.value)',\r\n    '(change)': '_onChange()',\r\n    '(blur)': '_onTouched()',\r\n    '(keydown)': '_onKeydown($event)',\r\n  },\r\n  exportAs: 'matDatepickerInput',\r\n})\r\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\r\n    Validator {\r\n  /** The datepicker that this input is associated with. */\r\n  @Input()\r\n  set matDatepicker(value: MatDatepicker<D>) {\r\n    this.registerDatepicker(value);\r\n  }\r\n  _datepicker: MatDatepicker<D>;\r\n\r\n  private registerDatepicker(value: MatDatepicker<D>) {\r\n    if (value) {\r\n      this._datepicker = value;\r\n      this._datepicker._registerInput(this);\r\n    }\r\n  }\r\n\r\n  /** Function that can be used to filter out dates within the datepicker. */\r\n  @Input()\r\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\r\n    this._dateFilter = value;\r\n    this._validatorOnChange();\r\n  }\r\n  _dateFilter: (date: D | null) => boolean;\r\n\r\n  /** The value of the input. */\r\n  @Input()\r\n  get value(): D | null { return this._value; }\r\n  set value(value: D | null) {\r\n    value = this._dateAdapter.deserialize(value);\r\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\r\n    value = this._getValidDateOrNull(value);\r\n    let oldDate = this.value;\r\n    this._value = value;\r\n    this._elementRef.nativeElement.value =\r\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\r\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\r\n      this._valueChange.emit(value);\r\n    }\r\n  }\r\n  private _value: D | null;\r\n\r\n  /** The minimum valid date. */\r\n  @Input()\r\n  get min(): D | null { return this._min; }\r\n  set min(value: D | null) {\r\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    this._validatorOnChange();\r\n  }\r\n  private _min: D | null;\r\n\r\n  /** The maximum valid date. */\r\n  @Input()\r\n  get max(): D | null { return this._max; }\r\n  set max(value: D | null) {\r\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    this._validatorOnChange();\r\n  }\r\n  private _max: D | null;\r\n\r\n  /** Whether the datepicker-input is disabled. */\r\n  @Input()\r\n  get disabled(): boolean { return !!this._disabled; }\r\n  set disabled(value: boolean) {\r\n    const newValue = coerceBooleanProperty(value);\r\n\r\n    if (this._disabled !== newValue) {\r\n      this._disabled = newValue;\r\n      this._disabledChange.emit(newValue);\r\n    }\r\n\r\n    if (newValue) {\r\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\r\n      // is problematic, because it would mean that it triggers another change detection cycle,\r\n      // which then causes a changed after checked error if the input element was focused before.\r\n      this._elementRef.nativeElement.blur();\r\n    }\r\n  }\r\n  private _disabled: boolean;\r\n\r\n  /** Emits when a `change` event is fired on this `<input>`. */\r\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\r\n      new EventEmitter<MatDatepickerInputEvent<D>>();\r\n\r\n  /** Emits when an `input` event is fired on this `<input>`. */\r\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\r\n      new EventEmitter<MatDatepickerInputEvent<D>>();\r\n\r\n  /** Emits when the value changes (either due to user input or programmatic change). */\r\n  _valueChange = new EventEmitter<D | null>();\r\n\r\n  /** Emits when the disabled state has changed */\r\n  _disabledChange = new EventEmitter<boolean>();\r\n\r\n  _onTouched = () => {};\r\n\r\n  private _cvaOnChange: (value: any) => void = () => {};\r\n\r\n  private _validatorOnChange = () => {};\r\n\r\n  private _datepickerSubscription = Subscription.EMPTY;\r\n\r\n  private _localeSubscription = Subscription.EMPTY;\r\n\r\n  /** The form control validator for whether the input parses. */\r\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\r\n    return this._lastValueValid ?\r\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\r\n  }\r\n\r\n  /** The form control validator for the min date. */\r\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\r\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\r\n    return (!this.min || !controlValue ||\r\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\r\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\r\n  }\r\n\r\n  /** The form control validator for the max date. */\r\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\r\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\r\n    return (!this.max || !controlValue ||\r\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\r\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\r\n  }\r\n\r\n  /** The form control validator for the date filter. */\r\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\r\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\r\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\r\n        null : {'matDatepickerFilter': true};\r\n  }\r\n\r\n  /** The combined form control validator for this input. */\r\n  private _validator: ValidatorFn | null =\r\n      Validators.compose(\r\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\r\n\r\n  /** Whether the last value set on the input was valid. */\r\n  private _lastValueValid = false;\r\n\r\n  constructor(\r\n      private _elementRef: ElementRef,\r\n      @Optional() public _dateAdapter: DateAdapter<D>,\r\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\r\n      @Optional() private _formField: MatFormField) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('DateAdapter');\r\n    }\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\r\n    }\r\n\r\n    // Update the displayed date when the locale changes.\r\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\r\n      this.value = this.value;\r\n    });\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    if (this._datepicker) {\r\n      this._datepickerSubscription =\r\n          this._datepicker.selectedChanged.subscribe((selected: D) => {\r\n            this.value = selected;\r\n            this._cvaOnChange(selected);\r\n            this._onTouched();\r\n            this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\r\n            this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\r\n          });\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._datepickerSubscription.unsubscribe();\r\n    this._localeSubscription.unsubscribe();\r\n    this._valueChange.complete();\r\n    this._disabledChange.complete();\r\n  }\r\n\r\n  /** @docs-private */\r\n  registerOnValidatorChange(fn: () => void): void {\r\n    this._validatorOnChange = fn;\r\n  }\r\n\r\n  /** @docs-private */\r\n  validate(c: AbstractControl): ValidationErrors | null {\r\n    return this._validator ? this._validator(c) : null;\r\n  }\r\n\r\n  /**\r\n   * Gets the element that the datepicker popup should be connected to.\r\n   * @return The element to connect the popup to.\r\n   */\r\n  getPopupConnectionElementRef(): ElementRef {\r\n    return this._formField ? this._formField.underlineRef : this._elementRef;\r\n  }\r\n\r\n  /**\r\n   * Determines the offset to be used when the calendar goes into a fallback position.\r\n   * Primarily used to prevent the calendar from overlapping the input.\r\n   */\r\n  _getPopupFallbackOffset(): number {\r\n    return this._formField ? -this._formField._inputContainerRef.nativeElement.clientHeight : 0;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  writeValue(value: D): void {\r\n    this.value = value;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnChange(fn: (value: any) => void): void {\r\n    this._cvaOnChange = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnTouched(fn: () => void): void {\r\n    this._onTouched = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n  }\r\n\r\n  _onKeydown(event: KeyboardEvent) {\r\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\r\n      this._datepicker.open();\r\n      event.preventDefault();\r\n    }\r\n  }\r\n\r\n  _onInput(value: string) {\r\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\r\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\r\n    date = this._getValidDateOrNull(date);\r\n    this._value = date;\r\n    this._cvaOnChange(date);\r\n    this._valueChange.emit(date);\r\n    this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\r\n  }\r\n\r\n  _onChange() {\r\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  SimpleChanges,\r\n  ViewEncapsulation,\r\n  Directive,\r\n  ContentChild,\r\n} from '@angular/core';\r\nimport {merge} from 'rxjs/observable/merge';\r\nimport {of as observableOf} from 'rxjs/observable/of';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {MatDatepicker} from './datepicker';\r\nimport {MatDatepickerIntl} from './datepicker-intl';\r\n\r\n\r\n/** Can be used to override the icon of a `matDatepickerToggle`. */\r\n@Directive({\r\n  selector: '[matDatepickerToggleIcon]'\r\n})\r\nexport class MatDatepickerToggleIcon {}\r\n\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-datepicker-toggle',\r\n  templateUrl: 'datepicker-toggle.html',\r\n  styleUrls: ['datepicker-toggle.css'],\r\n  host: {\r\n    'class': 'mat-datepicker-toggle',\r\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\r\n  },\r\n  exportAs: 'matDatepickerToggle',\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\r\n  private _stateChanges = Subscription.EMPTY;\r\n\r\n  /** Datepicker instance that the button will toggle. */\r\n  @Input('for') datepicker: MatDatepicker<D>;\r\n\r\n  /** Whether the toggle button is disabled. */\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\r\n  }\r\n  set disabled(value: boolean) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n  }\r\n  private _disabled: boolean;\r\n\r\n  /** Custom icon set by the consumer. */\r\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\r\n\r\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.datepicker) {\r\n      this._watchStateChanges();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._stateChanges.unsubscribe();\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._watchStateChanges();\r\n  }\r\n\r\n  _open(event: Event): void {\r\n    if (this.datepicker && !this.disabled) {\r\n      this.datepicker.open();\r\n      event.stopPropagation();\r\n    }\r\n  }\r\n\r\n  private _watchStateChanges() {\r\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\r\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\r\n        this.datepicker._datepickerInput._disabledChange : observableOf();\r\n    const datepickerToggled = this.datepicker ?\r\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\r\n        observableOf();\r\n\r\n    this._stateChanges.unsubscribe();\r\n    this._stateChanges = merge(\r\n      this._intl.changes,\r\n      datepickerDisabled,\r\n      inputDisabled,\r\n      datepickerToggled\r\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {A11yModule} from '@angular/cdk/a11y';\r\nimport {OverlayModule} from '@angular/cdk/overlay';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {MatButtonModule} from '@angular/material/button';\r\nimport {MatDialogModule} from '@angular/material/dialog';\r\nimport {MatCalendar} from './calendar';\r\nimport {MatCalendarBody} from './calendar-body';\r\nimport {\r\n  MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\r\n  MatDatepicker,\r\n  MatDatepickerContent,\r\n} from './datepicker';\r\nimport {MatDatepickerInput} from './datepicker-input';\r\nimport {MatDatepickerIntl} from './datepicker-intl';\r\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\r\nimport {MatMonthView} from './month-view';\r\nimport {MatMultiYearView} from './multi-year-view';\r\nimport {MatYearView} from './year-view';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatButtonModule,\r\n    MatDialogModule,\r\n    OverlayModule,\r\n    A11yModule,\r\n  ],\r\n  exports: [\r\n    MatCalendar,\r\n    MatCalendarBody,\r\n    MatDatepicker,\r\n    MatDatepickerContent,\r\n    MatDatepickerInput,\r\n    MatDatepickerToggle,\r\n    MatDatepickerToggleIcon,\r\n    MatMonthView,\r\n    MatYearView,\r\n    MatMultiYearView,\r\n  ],\r\n  declarations: [\r\n    MatCalendar,\r\n    MatCalendarBody,\r\n    MatDatepicker,\r\n    MatDatepickerContent,\r\n    MatDatepickerInput,\r\n    MatDatepickerToggle,\r\n    MatDatepickerToggleIcon,\r\n    MatMonthView,\r\n    MatYearView,\r\n    MatMultiYearView,\r\n  ],\r\n  providers: [\r\n    MatDatepickerIntl,\r\n    MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\r\n  ],\r\n  entryComponents: [\r\n    MatDatepickerContent,\r\n  ]\r\n})\r\nexport class MatDatepickerModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/** @docs-private */\r\nexport function createMissingDateImplError(provider: string) {\r\n  return Error(\r\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\r\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\r\n      `custom implementation.`);\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Injectable} from '@angular/core';\r\nimport {Subject} from 'rxjs/Subject';\r\n\r\n\r\n/** Datepicker data that requires internationalization. */\r\n@Injectable()\r\nexport class MatDatepickerIntl {\r\n  /**\r\n   * Stream that emits whenever the labels here are changed. Use this to notify\r\n   * components if the labels have changed after initialization.\r\n   */\r\n  readonly changes: Subject<void> = new Subject<void>();\r\n\r\n  /** A label for the calendar popup (used by screen readers). */\r\n  calendarLabel: string = 'Calendar';\r\n\r\n  /** A label for the button used to open the calendar popup (used by screen readers). */\r\n  openCalendarLabel: string = 'Open calendar';\r\n\r\n  /** A label for the previous month button (used by screen readers). */\r\n  prevMonthLabel: string = 'Previous month';\r\n\r\n  /** A label for the next month button (used by screen readers). */\r\n  nextMonthLabel: string = 'Next month';\r\n\r\n  /** A label for the previous year button (used by screen readers). */\r\n  prevYearLabel: string = 'Previous year';\r\n\r\n  /** A label for the next year button (used by screen readers). */\r\n  nextYearLabel: string = 'Next year';\r\n\r\n  /** A label for the previous multi-year button (used by screen readers). */\r\n  prevMultiYearLabel: string = 'Previous 20 years';\r\n\r\n  /** A label for the next multi-year button (used by screen readers). */\r\n  nextMultiYearLabel: string = 'Next 20 years';\r\n\r\n  /** A label for the 'switch to month view' button (used by screen readers). */\r\n  switchToMonthViewLabel: string = 'Choose date';\r\n\r\n  /** A label for the 'switch to year view' button (used by screen readers). */\r\n  switchToMultiYearViewLabel: string = 'Choose month and year';\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\n\r\n\r\n/**\r\n * An internal class that represents the data corresponding to a single calendar cell.\r\n * @docs-private\r\n */\r\nexport class MatCalendarCell {\r\n  constructor(public value: number,\r\n              public displayValue: string,\r\n              public ariaLabel: string,\r\n              public enabled: boolean) {}\r\n}\r\n\r\n\r\n/**\r\n * An internal component used to display calendar data in a table.\r\n * @docs-private\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: '[mat-calendar-body]',\r\n  templateUrl: 'calendar-body.html',\r\n  styleUrls: ['calendar-body.css'],\r\n  host: {\r\n    'class': 'mat-calendar-body',\r\n    'role': 'grid',\r\n    'attr.aria-readonly': 'true'\r\n  },\r\n  exportAs: 'matCalendarBody',\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatCalendarBody {\r\n  /** The label for the table. (e.g. \"Jan 2017\"). */\r\n  @Input() label: string;\r\n\r\n  /** The cells to display in the table. */\r\n  @Input() rows: MatCalendarCell[][];\r\n\r\n  /** The value in the table that corresponds to today. */\r\n  @Input() todayValue: number;\r\n\r\n  /** The value in the table that is currently selected. */\r\n  @Input() selectedValue: number;\r\n\r\n  /** The minimum number of free cells needed to fit the label in the first row. */\r\n  @Input() labelMinRequiredCells: number;\r\n\r\n  /** The number of columns in the table. */\r\n  @Input() numCols = 7;\r\n\r\n  /** Whether to allow selection of disabled cells. */\r\n  @Input() allowDisabledSelection = false;\r\n\r\n  /** The cell number of the active cell in the table. */\r\n  @Input() activeCell = 0;\r\n\r\n  /**\r\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\r\n   * maintained even as the table resizes.\r\n   */\r\n  @Input() cellAspectRatio = 1;\r\n\r\n  /** Emits when a new value is selected. */\r\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\r\n\r\n  _cellClicked(cell: MatCalendarCell): void {\r\n    if (!this.allowDisabledSelection && !cell.enabled) {\r\n      return;\r\n    }\r\n    this.selectedValueChange.emit(cell.value);\r\n  }\r\n\r\n  /** The number of blank cells to put at the beginning for the first row. */\r\n  get _firstRowOffset(): number {\r\n    return this.rows && this.rows.length && this.rows[0].length ?\r\n        this.numCols - this.rows[0].length : 0;\r\n  }\r\n\r\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\r\n    let cellNumber = rowIndex * this.numCols + colIndex;\r\n\r\n    // Account for the fact that the first row may not have as many cells.\r\n    if (rowIndex) {\r\n      cellNumber -= this._firstRowOffset;\r\n    }\r\n\r\n    return cellNumber == this.activeCell;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  Optional,\r\n  Output,\r\n  ViewEncapsulation,\r\n  ChangeDetectorRef,\r\n} from '@angular/core';\r\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\r\nimport {MatCalendarCell} from './calendar-body';\r\nimport {createMissingDateImplError} from './datepicker-errors';\r\n\r\n\r\nconst DAYS_PER_WEEK = 7;\r\n\r\n\r\n/**\r\n * An internal component used to display a single month in the datepicker.\r\n * @docs-private\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-month-view',\r\n  templateUrl: 'month-view.html',\r\n  exportAs: 'matMonthView',\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatMonthView<D> implements AfterContentInit {\r\n  /**\r\n   * The date to display in this month view (everything other than the month and year is ignored).\r\n   */\r\n  @Input()\r\n  get activeDate(): D { return this._activeDate; }\r\n  set activeDate(value: D) {\r\n    let oldActiveDate = this._activeDate;\r\n    this._activeDate =\r\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\r\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\r\n      this._init();\r\n    }\r\n  }\r\n  private _activeDate: D;\r\n\r\n  /** The currently selected date. */\r\n  @Input()\r\n  get selected(): D | null { return this._selected; }\r\n  set selected(value: D | null) {\r\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\r\n  }\r\n  private _selected: D | null;\r\n\r\n  /** The minimum selectable date. */\r\n  @Input()\r\n  get minDate(): D | null { return this._minDate; }\r\n  set minDate(value: D | null) {\r\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _minDate: D | null;\r\n\r\n  /** The maximum selectable date. */\r\n  @Input()\r\n  get maxDate(): D | null { return this._maxDate; }\r\n  set maxDate(value: D | null) {\r\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _maxDate: D | null;\r\n\r\n  /** A function used to filter which dates are selectable. */\r\n  @Input() dateFilter: (date: D) => boolean;\r\n\r\n  /** Emits when a new date is selected. */\r\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\r\n\r\n  /** Emits when any date is selected. */\r\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /** The label for this month (e.g. \"January 2017\"). */\r\n  _monthLabel: string;\r\n\r\n  /** Grid of calendar cells representing the dates of the month. */\r\n  _weeks: MatCalendarCell[][];\r\n\r\n  /** The number of blank cells in the first row before the 1st of the month. */\r\n  _firstWeekOffset: number;\r\n\r\n  /**\r\n   * The date of the month that the currently selected Date falls on.\r\n   * Null if the currently selected Date is in another month.\r\n   */\r\n  _selectedDate: number | null;\r\n\r\n  /** The date of the month that today falls on. Null if today is in another month. */\r\n  _todayDate: number | null;\r\n\r\n  /** The names of the weekdays. */\r\n  _weekdays: {long: string, narrow: string}[];\r\n\r\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\r\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\r\n              private _changeDetectorRef: ChangeDetectorRef) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('DateAdapter');\r\n    }\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\r\n    }\r\n\r\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\r\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\r\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\r\n\r\n    // Rotate the labels for days of the week based on the configured first day of the week.\r\n    let weekdays = longWeekdays.map((long, i) => {\r\n      return {long, narrow: narrowWeekdays[i]};\r\n    });\r\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\r\n\r\n    this._activeDate = this._dateAdapter.today();\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._init();\r\n  }\r\n\r\n  /** Handles when a new date is selected. */\r\n  _dateSelected(date: number) {\r\n    if (this._selectedDate != date) {\r\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\r\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\r\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\r\n\r\n      this.selectedChange.emit(selectedDate);\r\n    }\r\n\r\n    this._userSelection.emit();\r\n  }\r\n\r\n  /** Initializes this month view. */\r\n  _init() {\r\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\r\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\r\n    this._monthLabel =\r\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\r\n            .toLocaleUpperCase();\r\n\r\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\r\n        this._dateAdapter.getMonth(this.activeDate), 1);\r\n    this._firstWeekOffset =\r\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\r\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\r\n\r\n    this._createWeekCells();\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /** Creates MatCalendarCells for the dates in this month. */\r\n  private _createWeekCells() {\r\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\r\n    const dateNames = this._dateAdapter.getDateNames();\r\n    this._weeks = [[]];\r\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\r\n      if (cell == DAYS_PER_WEEK) {\r\n        this._weeks.push([]);\r\n        cell = 0;\r\n      }\r\n      const date = this._dateAdapter.createDate(\r\n            this._dateAdapter.getYear(this.activeDate),\r\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\r\n      const enabled = this._shouldEnableDate(date);\r\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\r\n      this._weeks[this._weeks.length - 1]\r\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\r\n    }\r\n  }\r\n\r\n  /** Date filter for the month */\r\n  private _shouldEnableDate(date: D): boolean {\r\n    return !!date &&\r\n        (!this.dateFilter || this.dateFilter(date)) &&\r\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\r\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\r\n  }\r\n\r\n  /**\r\n   * Gets the date in this month that the given Date falls on.\r\n   * Returns null if the given Date is in another month.\r\n   */\r\n  private _getDateInCurrentMonth(date: D | null): number | null {\r\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\r\n        this._dateAdapter.getDate(date) : null;\r\n  }\r\n\r\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\r\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\r\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\r\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  Optional,\r\n  Output,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport {DateAdapter} from '@angular/material/core';\r\nimport {MatCalendarCell} from './calendar-body';\r\nimport {createMissingDateImplError} from './datepicker-errors';\r\n\r\n\r\nexport const yearsPerPage = 24;\r\n\r\nexport const yearsPerRow = 4;\r\n\r\n\r\n/**\r\n * An internal component used to display a year selector in the datepicker.\r\n * @docs-private\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-multi-year-view',\r\n  templateUrl: 'multi-year-view.html',\r\n  exportAs: 'matMultiYearView',\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatMultiYearView<D> implements AfterContentInit {\r\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\r\n  @Input()\r\n  get activeDate(): D { return this._activeDate; }\r\n  set activeDate(value: D) {\r\n    let oldActiveDate = this._activeDate;\r\n    this._activeDate =\r\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\r\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\r\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\r\n      this._init();\r\n    }\r\n  }\r\n  private _activeDate: D;\r\n\r\n  /** The currently selected date. */\r\n  @Input()\r\n  get selected(): D | null { return this._selected; }\r\n  set selected(value: D | null) {\r\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\r\n  }\r\n  private _selected: D | null;\r\n\r\n  /** The minimum selectable date. */\r\n  @Input()\r\n  get minDate(): D | null { return this._minDate; }\r\n  set minDate(value: D | null) {\r\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _minDate: D | null;\r\n\r\n  /** The maximum selectable date. */\r\n  @Input()\r\n  get maxDate(): D | null { return this._maxDate; }\r\n  set maxDate(value: D | null) {\r\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _maxDate: D | null;\r\n\r\n  /** A function used to filter which dates are selectable. */\r\n  @Input() dateFilter: (date: D) => boolean;\r\n\r\n  /** Emits when a new month is selected. */\r\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** Grid of calendar cells representing the currently displayed years. */\r\n  _years: MatCalendarCell[][];\r\n\r\n  /** The year that today falls on. */\r\n  _todayYear: number;\r\n\r\n  /** The year of the selected date. Null if the selected date is null. */\r\n  _selectedYear: number | null;\r\n\r\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\r\n              private _changeDetectorRef: ChangeDetectorRef) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('DateAdapter');\r\n    }\r\n\r\n    this._activeDate = this._dateAdapter.today();\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._init();\r\n  }\r\n\r\n  /** Initializes this multi-year view. */\r\n  _init() {\r\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\r\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\r\n    let activeOffset = activeYear % yearsPerPage;\r\n    this._years = [];\r\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\r\n      row.push(activeYear - activeOffset + i);\r\n      if (row.length == yearsPerRow) {\r\n        this._years.push(row.map(year => this._createCellForYear(year)));\r\n        row = [];\r\n      }\r\n    }\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /** Handles when a new year is selected. */\r\n  _yearSelected(year: number) {\r\n    let month = this._dateAdapter.getMonth(this.activeDate);\r\n    let daysInMonth =\r\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\r\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\r\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\r\n  }\r\n\r\n  _getActiveCell(): number {\r\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\r\n  }\r\n\r\n  /** Creates an MatCalendarCell for the given year. */\r\n  private _createCellForYear(year: number) {\r\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\r\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\r\n  }\r\n\r\n  /** Whether the given year is enabled. */\r\n  private _shouldEnableYear(year: number) {\r\n    // disable if the year is greater than maxDate lower than minDate\r\n    if (year === undefined || year === null ||\r\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\r\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\r\n      return false;\r\n    }\r\n\r\n    // enable if it reaches here and there's no filter defined\r\n    if (!this.dateFilter) {\r\n      return true;\r\n    }\r\n\r\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\r\n\r\n    // If any date in the year is enabled count the year as enabled.\r\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\r\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\r\n      if (this.dateFilter(date)) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  Optional,\r\n  Output,\r\n  ViewEncapsulation,\r\n  ChangeDetectorRef,\r\n} from '@angular/core';\r\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\r\nimport {MatCalendarCell} from './calendar-body';\r\nimport {createMissingDateImplError} from './datepicker-errors';\r\n\r\n\r\n/**\r\n * An internal component used to display a single year in the datepicker.\r\n * @docs-private\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-year-view',\r\n  templateUrl: 'year-view.html',\r\n  exportAs: 'matYearView',\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatYearView<D> implements AfterContentInit {\r\n  /** The date to display in this year view (everything other than the year is ignored). */\r\n  @Input()\r\n  get activeDate(): D { return this._activeDate; }\r\n  set activeDate(value: D) {\r\n    let oldActiveDate = this._activeDate;\r\n    this._activeDate =\r\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\r\n    if (this._dateAdapter.getYear(oldActiveDate) != this._dateAdapter.getYear(this._activeDate)) {\r\n      this._init();\r\n    }\r\n  }\r\n  private _activeDate: D;\r\n\r\n  /** The currently selected date. */\r\n  @Input()\r\n  get selected(): D | null { return this._selected; }\r\n  set selected(value: D | null) {\r\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\r\n  }\r\n  private _selected: D | null;\r\n\r\n  /** The minimum selectable date. */\r\n  @Input()\r\n  get minDate(): D | null { return this._minDate; }\r\n  set minDate(value: D | null) {\r\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _minDate: D | null;\r\n\r\n  /** The maximum selectable date. */\r\n  @Input()\r\n  get maxDate(): D | null { return this._maxDate; }\r\n  set maxDate(value: D | null) {\r\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _maxDate: D | null;\r\n\r\n  /** A function used to filter which dates are selectable. */\r\n  @Input() dateFilter: (date: D) => boolean;\r\n\r\n  /** Emits when a new month is selected. */\r\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** Grid of calendar cells representing the months of the year. */\r\n  _months: MatCalendarCell[][];\r\n\r\n  /** The label for this year (e.g. \"2017\"). */\r\n  _yearLabel: string;\r\n\r\n  /** The month in this year that today falls on. Null if today is in a different year. */\r\n  _todayMonth: number | null;\r\n\r\n  /**\r\n   * The month in this year that the selected Date falls on.\r\n   * Null if the selected Date is in a different year.\r\n   */\r\n  _selectedMonth: number | null;\r\n\r\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\r\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\r\n              private _changeDetectorRef: ChangeDetectorRef) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('DateAdapter');\r\n    }\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\r\n    }\r\n\r\n    this._activeDate = this._dateAdapter.today();\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._init();\r\n  }\r\n\r\n  /** Handles when a new month is selected. */\r\n  _monthSelected(month: number) {\r\n    let daysInMonth = this._dateAdapter.getNumDaysInMonth(\r\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1));\r\n    this.selectedChange.emit(this._dateAdapter.createDate(\r\n        this._dateAdapter.getYear(this.activeDate), month,\r\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\r\n  }\r\n\r\n  /** Initializes this year view. */\r\n  _init() {\r\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\r\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\r\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\r\n\r\n    let monthNames = this._dateAdapter.getMonthNames('short');\r\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\r\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\r\n        month => this._createCellForMonth(month, monthNames[month])));\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /**\r\n   * Gets the month in this year that the given Date falls on.\r\n   * Returns null if the given Date is in another year.\r\n   */\r\n  private _getMonthInCurrentYear(date: D | null) {\r\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\r\n        this._dateAdapter.getMonth(date) : null;\r\n  }\r\n\r\n  /** Creates an MatCalendarCell for the given month. */\r\n  private _createCellForMonth(month: number, monthName: string) {\r\n    let ariaLabel = this._dateAdapter.format(\r\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\r\n        this._dateFormats.display.monthYearA11yLabel);\r\n    return new MatCalendarCell(\r\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\r\n  }\r\n\r\n  /** Whether the given month is enabled. */\r\n  private _shouldEnableMonth(month: number) {\r\n\r\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\r\n\r\n    if (month === undefined || month === null ||\r\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\r\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\r\n      return false;\r\n    }\r\n\r\n    if (!this.dateFilter) {\r\n      return true;\r\n    }\r\n\r\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\r\n\r\n    // If any date in the month is enabled count the month as enabled.\r\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\r\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\r\n      if (this.dateFilter(date)) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Tests whether the combination month/year is after this.maxDate, considering\r\n   * just the month and year of this.maxDate\r\n   */\r\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\r\n    if (this.maxDate) {\r\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\r\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\r\n\r\n      return year > maxYear || (year === maxYear && month > maxMonth);\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Tests whether the combination month/year is before this.minDate, considering\r\n   * just the month and year of this.minDate\r\n   */\r\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\r\n    if (this.minDate) {\r\n      const minYear = this._dateAdapter.getYear(this.minDate);\r\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\r\n\r\n      return year < minYear || (year === minYear && month < minMonth);\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  DOWN_ARROW,\r\n  END,\r\n  ENTER,\r\n  HOME,\r\n  LEFT_ARROW,\r\n  PAGE_DOWN,\r\n  PAGE_UP,\r\n  RIGHT_ARROW,\r\n  UP_ARROW,\r\n} from '@angular/cdk/keycodes';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  NgZone,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  SimpleChanges,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\r\nimport {take} from 'rxjs/operators/take';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {createMissingDateImplError} from './datepicker-errors';\r\nimport {MatDatepickerIntl} from './datepicker-intl';\r\nimport {MatMonthView} from './month-view';\r\nimport {MatMultiYearView, yearsPerPage, yearsPerRow} from './multi-year-view';\r\nimport {MatYearView} from './year-view';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\n\r\n\r\n/**\r\n * A calendar that is used as part of the datepicker.\r\n * @docs-private\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-calendar',\r\n  templateUrl: 'calendar.html',\r\n  styleUrls: ['calendar.css'],\r\n  host: {\r\n    'class': 'mat-calendar',\r\n  },\r\n  exportAs: 'matCalendar',\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatCalendar<D> implements AfterContentInit, OnDestroy, OnChanges {\r\n  private _intlChanges: Subscription;\r\n\r\n  /** A date representing the period (month or year) to start the calendar in. */\r\n  @Input()\r\n  get startAt(): D | null { return this._startAt; }\r\n  set startAt(value: D | null) {\r\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _startAt: D | null;\r\n\r\n  /** Whether the calendar should be started in month or year view. */\r\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\r\n\r\n  /** The currently selected date. */\r\n  @Input()\r\n  get selected(): D | null { return this._selected; }\r\n  set selected(value: D | null) {\r\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _selected: D | null;\r\n\r\n  /** The minimum selectable date. */\r\n  @Input()\r\n  get minDate(): D | null { return this._minDate; }\r\n  set minDate(value: D | null) {\r\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _minDate: D | null;\r\n\r\n  /** The maximum selectable date. */\r\n  @Input()\r\n  get maxDate(): D | null { return this._maxDate; }\r\n  set maxDate(value: D | null) {\r\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _maxDate: D | null;\r\n\r\n  /** A function used to filter which dates are selectable. */\r\n  @Input() dateFilter: (date: D) => boolean;\r\n\r\n  /** Emits when the currently selected date changes. */\r\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** Emits when any date is selected. */\r\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /** Reference to the current month view component. */\r\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\r\n\r\n  /** Reference to the current year view component. */\r\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\r\n\r\n  /** Reference to the current multi-year view component. */\r\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\r\n\r\n  /**\r\n   * The current active date. This determines which time period is shown and which date is\r\n   * highlighted when using keyboard navigation.\r\n   */\r\n  get _activeDate(): D { return this._clampedActiveDate; }\r\n  set _activeDate(value: D) {\r\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\r\n  }\r\n  private _clampedActiveDate: D;\r\n\r\n  /** Whether the calendar is in month view. */\r\n  _currentView: 'month' | 'year' | 'multi-year';\r\n\r\n  /** The label for the current calendar view. */\r\n  get _periodButtonText(): string {\r\n    if (this._currentView == 'month') {\r\n      return this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel)\r\n          .toLocaleUpperCase();\r\n    }\r\n    if (this._currentView == 'year') {\r\n      return this._dateAdapter.getYearName(this._activeDate);\r\n    }\r\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\r\n    const firstYearInView = this._dateAdapter.getYearName(\r\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\r\n    const lastYearInView = this._dateAdapter.getYearName(\r\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\r\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\r\n  }\r\n\r\n  get _periodButtonLabel(): string {\r\n    return this._currentView == 'month' ?\r\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\r\n  }\r\n\r\n  /** The label for the the previous button. */\r\n  get _prevButtonLabel(): string {\r\n    return {\r\n      'month': this._intl.prevMonthLabel,\r\n      'year': this._intl.prevYearLabel,\r\n      'multi-year': this._intl.prevMultiYearLabel\r\n    }[this._currentView];\r\n  }\r\n\r\n  /** The label for the the next button. */\r\n  get _nextButtonLabel(): string {\r\n    return {\r\n      'month': this._intl.nextMonthLabel,\r\n      'year': this._intl.nextYearLabel,\r\n      'multi-year': this._intl.nextMultiYearLabel\r\n    }[this._currentView];\r\n  }\r\n\r\n  constructor(private _elementRef: ElementRef,\r\n              private _intl: MatDatepickerIntl,\r\n              private _ngZone: NgZone,\r\n              @Optional() private _dateAdapter: DateAdapter<D>,\r\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\r\n              changeDetectorRef: ChangeDetectorRef,\r\n              @Optional() private _dir?: Directionality) {\r\n\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('DateAdapter');\r\n    }\r\n\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\r\n    }\r\n\r\n    this._intlChanges = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._activeDate = this.startAt || this._dateAdapter.today();\r\n    this._focusActiveCell();\r\n    this._currentView = this.startView;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._intlChanges.unsubscribe();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\r\n\r\n    if (change && !change.firstChange) {\r\n      const view = this.monthView || this.yearView || this.multiYearView;\r\n\r\n      if (view) {\r\n        view._init();\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Handles date selection in the month view. */\r\n  _dateSelected(date: D): void {\r\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\r\n      this.selectedChange.emit(date);\r\n    }\r\n  }\r\n\r\n  _userSelected(): void {\r\n    this._userSelection.emit();\r\n  }\r\n\r\n  /** Handles month selection in the multi-year view. */\r\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\r\n    this._activeDate = date;\r\n    this._currentView = view;\r\n  }\r\n\r\n  /** Handles user clicks on the period label. */\r\n  _currentPeriodClicked(): void {\r\n    this._currentView = this._currentView == 'month' ? 'multi-year' : 'month';\r\n  }\r\n\r\n  /** Handles user clicks on the previous button. */\r\n  _previousClicked(): void {\r\n    this._activeDate = this._currentView == 'month' ?\r\n        this._dateAdapter.addCalendarMonths(this._activeDate, -1) :\r\n        this._dateAdapter.addCalendarYears(\r\n            this._activeDate, this._currentView == 'year' ? -1 : -yearsPerPage);\r\n  }\r\n\r\n  /** Handles user clicks on the next button. */\r\n  _nextClicked(): void {\r\n    this._activeDate = this._currentView == 'month' ?\r\n        this._dateAdapter.addCalendarMonths(this._activeDate, 1) :\r\n        this._dateAdapter.addCalendarYears(\r\n            this._activeDate, this._currentView == 'year' ? 1 : yearsPerPage);\r\n  }\r\n\r\n  /** Whether the previous period button is enabled. */\r\n  _previousEnabled(): boolean {\r\n    if (!this.minDate) {\r\n      return true;\r\n    }\r\n    return !this.minDate || !this._isSameView(this._activeDate, this.minDate);\r\n  }\r\n\r\n  /** Whether the next period button is enabled. */\r\n  _nextEnabled(): boolean {\r\n    return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);\r\n  }\r\n\r\n  /** Handles keydown events on the calendar body. */\r\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\r\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\r\n    // disabled ones from being selected. This may not be ideal, we should look into whether\r\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\r\n    if (this._currentView == 'month') {\r\n      this._handleCalendarBodyKeydownInMonthView(event);\r\n    } else if (this._currentView == 'year') {\r\n      this._handleCalendarBodyKeydownInYearView(event);\r\n    } else {\r\n      this._handleCalendarBodyKeydownInMultiYearView(event);\r\n    }\r\n  }\r\n\r\n  /** Focuses the active cell after the microtask queue is empty. */\r\n  _focusActiveCell() {\r\n    this._ngZone.runOutsideAngular(() => {\r\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\r\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\r\n      });\r\n    });\r\n  }\r\n\r\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\r\n  private _isSameView(date1: D, date2: D): boolean {\r\n    if (this._currentView == 'month') {\r\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\r\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\r\n    }\r\n    if (this._currentView == 'year') {\r\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\r\n    }\r\n    // Otherwise we are in 'multi-year' view.\r\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\r\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\r\n  }\r\n\r\n  /** Handles keydown events on the calendar body when calendar is in month view. */\r\n  private _handleCalendarBodyKeydownInMonthView(event: KeyboardEvent): void {\r\n    const isRtl = this._isRtl();\r\n\r\n    switch (event.keyCode) {\r\n      case LEFT_ARROW:\r\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\r\n        break;\r\n      case RIGHT_ARROW:\r\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\r\n        break;\r\n      case UP_ARROW:\r\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\r\n        break;\r\n      case DOWN_ARROW:\r\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\r\n        break;\r\n      case HOME:\r\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\r\n            1 - this._dateAdapter.getDate(this._activeDate));\r\n        break;\r\n      case END:\r\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\r\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\r\n             this._dateAdapter.getDate(this._activeDate)));\r\n        break;\r\n      case PAGE_UP:\r\n        this._activeDate = event.altKey ?\r\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\r\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\r\n        break;\r\n      case PAGE_DOWN:\r\n        this._activeDate = event.altKey ?\r\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\r\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\r\n        break;\r\n      case ENTER:\r\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\r\n          this._dateSelected(this._activeDate);\r\n          this._userSelected();\r\n          // Prevent unexpected default actions such as form submission.\r\n          event.preventDefault();\r\n        }\r\n        return;\r\n      default:\r\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\r\n        return;\r\n    }\r\n\r\n    this._focusActiveCell();\r\n    // Prevent unexpected default actions such as form submission.\r\n    event.preventDefault();\r\n  }\r\n\r\n  /** Handles keydown events on the calendar body when calendar is in year view. */\r\n  private _handleCalendarBodyKeydownInYearView(event: KeyboardEvent): void {\r\n    const isRtl = this._isRtl();\r\n\r\n    switch (event.keyCode) {\r\n      case LEFT_ARROW:\r\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\r\n        break;\r\n      case RIGHT_ARROW:\r\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\r\n        break;\r\n      case UP_ARROW:\r\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\r\n        break;\r\n      case DOWN_ARROW:\r\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\r\n        break;\r\n      case HOME:\r\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\r\n            -this._dateAdapter.getMonth(this._activeDate));\r\n        break;\r\n      case END:\r\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\r\n            11 - this._dateAdapter.getMonth(this._activeDate));\r\n        break;\r\n      case PAGE_UP:\r\n        this._activeDate =\r\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\r\n        break;\r\n      case PAGE_DOWN:\r\n        this._activeDate =\r\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\r\n        break;\r\n      case ENTER:\r\n        this._goToDateInView(this._activeDate, 'month');\r\n        break;\r\n      default:\r\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\r\n        return;\r\n    }\r\n\r\n    this._focusActiveCell();\r\n    // Prevent unexpected default actions such as form submission.\r\n    event.preventDefault();\r\n  }\r\n\r\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\r\n  private _handleCalendarBodyKeydownInMultiYearView(event: KeyboardEvent): void {\r\n    switch (event.keyCode) {\r\n      case LEFT_ARROW:\r\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -1);\r\n        break;\r\n      case RIGHT_ARROW:\r\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, 1);\r\n        break;\r\n      case UP_ARROW:\r\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\r\n        break;\r\n      case DOWN_ARROW:\r\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\r\n        break;\r\n      case HOME:\r\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\r\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\r\n        break;\r\n      case END:\r\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\r\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\r\n        break;\r\n      case PAGE_UP:\r\n        this._activeDate =\r\n            this._dateAdapter.addCalendarYears(\r\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\r\n        break;\r\n      case PAGE_DOWN:\r\n        this._activeDate =\r\n            this._dateAdapter.addCalendarYears(\r\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\r\n        break;\r\n      case ENTER:\r\n        this._goToDateInView(this._activeDate, 'year');\r\n        break;\r\n      default:\r\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\r\n        return;\r\n    }\r\n\r\n    this._focusActiveCell();\r\n    // Prevent unexpected default actions such as form submission.\r\n    event.preventDefault();\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\r\n  }\r\n\r\n  /** Determines whether the user has the RTL layout direction. */\r\n  private _isRtl() {\r\n    return this._dir && this._dir.value === 'rtl';\r\n  }\r\n}\r\n"],"names":["styles","host","class","[class.mat-datepicker-content-touch]","exportAs","encapsulation","ViewEncapsulation","None","preserveWhitespaces","changeDetection","ChangeDetectionStrategy","OnPush","MatDatepickerContent","this","_overlay","_ngZone","_viewContainerRef","_scrollStrategy","_dateAdapter","_dir","_document","createMissingDateImplError","Object","defineProperty","MatDatepicker","prototype","get","set","enumerable","configurable","newValue","_disabled","_disabledChange","next","_inputSubscription","unsubscribe","complete","_popupRef","dispose","_selected","date","sameDate","oldValue","selectedChanged","emit","_datepickerInput","Error","input","_valueChange","subscribe","value","_this","_focusedElementBeforeOpen","activeElement","touchUi","_openAsDialog","_openAsPopup","_opened","openedStream","hasAttached","detach","_dialogRef","close","_calendarPortal","isAttached","completeClose","closedStream","focus","viewContainerRef","panelClass","afterClosed","componentInstance","datepicker","_createPopup","attach","instance","onStable","asObservable","pipe","take","hasBackdrop","backdropClass","direction","scrollStrategy","create","overlayConfig","merge","backdropClick","detachments","keydownEvents","filter","event","keyCode","ESCAPE","connectedTo","getPopupConnectionElementRef","originX","originY","overlayX","overlayY","withFallbackPosition","undefined","fallbackOffset","decorators","ctorParameters","type","MatDialog","Inject","args","MAT_DATEPICKER_SCROLL_STRATEGY","DateAdapter","Optional","Directionality","DOCUMENT","propDecorators","startAt","Input","startView","Output","opened","MAT_DATEPICKER_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","MatDatepickerInput","multi","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","target","targetElement","_elementRef","_dateFormats","_formField","dateChange","EventEmitter","dateInput","_onTouched","_cvaOnChange","_validatorOnChange","_datepickerSubscription","Subscription","EMPTY","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","nativeElement","_minValidator","control","controlValue","_getValidDateOrNull","deserialize","min","compareDate","matDatepickerMin","actual","_maxValidator","max","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","registerDatepicker","_datepicker","_registerInput","_value","isValid","oldDate","format","display","_min","_max","coerceBooleanProperty","blur","ngAfterContentInit","selected","ngOnDestroy","registerOnValidatorChange","fn","validate","c","underlineRef","_getPopupFallbackOffset","_inputContainerRef","clientHeight","writeValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","disabled","_onKeydown","altKey","DOWN_ARROW","open","preventDefault","_onInput","parse","_onChange","obj","isDateInstance","Directive","selector","providers","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.aria-owns]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","(blur)","(keydown)","ElementRef","MAT_DATE_FORMATS","MatFormField","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","_intl","_changeDetectorRef","_stateChanges","ngOnChanges","changes","_watchStateChanges","_open","stopPropagation","datepickerDisabled","observableOf","inputDisabled","datepickerToggled","markForCheck","Component","template","[class.mat-datepicker-toggle-active]","_customIcon","ContentChild","MatDatepickerModule","NgModule","imports","CommonModule","MatButtonModule","MatDialogModule","OverlayModule","A11yModule","exports","MatCalendar","MatCalendarBody","MatMonthView","MatYearView","MatMultiYearView","declarations","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER","entryComponents","provider","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY","overlay","scrollStrategies","reposition","Subject","calendarLabel","openCalendarLabel","prevMonthLabel","nextMonthLabel","prevYearLabel","nextYearLabel","prevMultiYearLabel","nextMultiYearLabel","switchToMonthViewLabel","switchToMultiYearViewLabel","Injectable","MatCalendarCell","displayValue","ariaLabel","enabled","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","cell","rows","length","_isActiveCell","rowIndex","colIndex","cellNumber","_firstRowOffset","role","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","selectedChange","_userSelection","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","map","long","i","narrow","_weekdays","slice","concat","_activeDate","today","oldActiveDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","daysInMonth","getNumDaysInMonth","dateNames","getDateNames","_weeks","push","_shouldEnableDate","dateA11yLabel","dateFilter","minDate","maxDate","getDate","d1","d2","ChangeDetectorRef","Math","floor","_selectedYear","_todayYear","activeYear","activeOffset","_years","row","year","_createCellForYear","_yearSelected","month","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","addCalendarDays","_selectedMonth","_getMonthInCurrentYear","_monthSelected","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","changeDetectorRef","_intlChanges","_startAt","_clampedActiveDate","clampDate","_currentView","monthYearLabel","multi-year","_focusActiveCell","change","firstChange","view","monthView","yearView","multiYearView","_userSelected","_goToDateInView","_currentPeriodClicked","_previousClicked","addCalendarMonths","addCalendarYears","_nextClicked","_previousEnabled","_isSameView","_nextEnabled","_handleCalendarBodyKeydown","_handleCalendarBodyKeydownInMonthView","_handleCalendarBodyKeydownInYearView","_handleCalendarBodyKeydownInMultiYearView","runOutsideAngular","querySelector","date1","date2","isRtl","_isRtl","LEFT_ARROW","RIGHT_ARROW","UP_ARROW","HOME","END","PAGE_UP","PAGE_DOWN","ENTER","yearsPerPage","NgZone","ViewChild","datepickerUid","InjectionToken","deps","Overlay","useFactory","_calendar"],"mappings":"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"}
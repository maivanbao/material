{"version":3,"file":"material-select.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../src/lib/select/select-errors.ts","../../src/lib/select/select.ts","../../src/lib/select/select-animations.ts","../../src/lib/select/select-module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\r\n * after initialization.\r\n * @docs-private\r\n */\r\nexport function getMatSelectDynamicMultipleError(): Error {\r\n  return Error('Cannot change `multiple` mode of select after initialization.');\r\n}\r\n\r\n/**\r\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\r\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\r\n * resetting the value.\r\n * @docs-private\r\n */\r\nexport function getMatSelectNonArrayValueError(): Error {\r\n  return Error('Value must be an array in multiple-selection mode.');\r\n}\r\n\r\n/**\r\n * Returns an exception to be thrown when assigning a non-function value to the comparator\r\n * used to determine if a value corresponds to an option. Note that whether the function\r\n * actually takes two values and returns a boolean is not checked.\r\n */\r\nexport function getMatSelectNonFunctionValueError(): Error {\r\n  return Error('`compareWith` must be a function.');\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {SelectionModel} from '@angular/cdk/collections';\r\nimport {\r\n  DOWN_ARROW,\r\n  END,\r\n  ENTER,\r\n  HOME,\r\n  SPACE,\r\n  UP_ARROW,\r\n  LEFT_ARROW,\r\n  RIGHT_ARROW,\r\n} from '@angular/cdk/keycodes';\r\nimport {\r\n  CdkConnectedOverlay,\r\n  Overlay,\r\n  RepositionScrollStrategy,\r\n  ScrollStrategy,\r\n  ViewportRuler,\r\n} from '@angular/cdk/overlay';\r\nimport {filter} from 'rxjs/operators/filter';\r\nimport {take} from 'rxjs/operators/take';\r\nimport {map} from 'rxjs/operators/map';\r\nimport {switchMap} from 'rxjs/operators/switchMap';\r\nimport {startWith} from 'rxjs/operators/startWith';\r\nimport {takeUntil} from 'rxjs/operators/takeUntil';\r\nimport {\r\n  AfterContentInit,\r\n  Attribute,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  Directive,\r\n  DoCheck,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  isDevMode,\r\n  NgZone,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  Self,\r\n  SimpleChanges,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {\r\n  ControlValueAccessor,\r\n  FormGroupDirective,\r\n  NgControl,\r\n  NgForm\r\n} from '@angular/forms';\r\nimport {\r\n  CanDisable,\r\n  ErrorStateMatcher,\r\n  CanUpdateErrorState,\r\n  mixinErrorState,\r\n  HasTabIndex,\r\n  MatOptgroup,\r\n  MatOption,\r\n  MatOptionSelectionChange,\r\n  mixinDisabled,\r\n  mixinTabIndex,\r\n  MAT_OPTION_PARENT_COMPONENT,\r\n  mixinDisableRipple,\r\n  CanDisableRipple,\r\n  _countGroupLabelsBeforeOption,\r\n  _getOptionScrollPosition,\r\n} from '@angular/material/core';\r\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {merge} from 'rxjs/observable/merge';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {defer} from 'rxjs/observable/defer';\r\nimport {matSelectAnimations} from './select-animations';\r\nimport {\r\n  getMatSelectDynamicMultipleError,\r\n  getMatSelectNonArrayValueError,\r\n  getMatSelectNonFunctionValueError,\r\n} from './select-errors';\r\n\r\n\r\nlet nextUniqueId = 0;\r\n\r\n/**\r\n * The following style constants are necessary to save here in order\r\n * to properly calculate the alignment of the selected option over\r\n * the trigger element.\r\n */\r\n\r\n/** The max height of the select's overlay panel */\r\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\r\n\r\n/** The panel's padding on the x-axis */\r\nexport const SELECT_PANEL_PADDING_X = 16;\r\n\r\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\r\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\r\n\r\n/** The height of the select items in `em` units. */\r\nexport const SELECT_ITEM_HEIGHT_EM = 3;\r\n\r\n/**\r\n * Distance between the panel edge and the option text in\r\n * multi-selection mode.\r\n *\r\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\r\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\r\n * The checkbox width is 20px.\r\n */\r\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\r\n\r\n/**\r\n * The select panel will only \"fit\" inside the viewport if it is positioned at\r\n * this value or more away from the viewport boundary.\r\n */\r\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\r\n\r\n/** Injection token that determines the scroll handling while a select is open. */\r\nexport const MAT_SELECT_SCROLL_STRATEGY =\r\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\r\n\r\n/** @docs-private */\r\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\r\n    () => RepositionScrollStrategy {\r\n  return () => overlay.scrollStrategies.reposition();\r\n}\r\n\r\n/** @docs-private */\r\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\r\n  provide: MAT_SELECT_SCROLL_STRATEGY,\r\n  deps: [Overlay],\r\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\r\n};\r\n\r\n/** Change event object that is emitted when the select value has changed. */\r\nexport class MatSelectChange {\r\n  constructor(\r\n    /** Reference to the select that emitted the change event. */\r\n    public source: MatSelect,\r\n    /** Current value of the select that emitted the event. */\r\n    public value: any) { }\r\n}\r\n\r\n// Boilerplate for applying mixins to MatSelect.\r\n/** @docs-private */\r\nexport class MatSelectBase {\r\n  constructor(public _elementRef: ElementRef,\r\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\r\n              public _parentForm: NgForm,\r\n              public _parentFormGroup: FormGroupDirective,\r\n              public ngControl: NgControl) {}\r\n}\r\nexport const _MatSelectMixinBase = mixinDisableRipple(\r\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\r\n\r\n\r\n/**\r\n * Allows the user to customize the trigger that is displayed when the select has a value.\r\n */\r\n@Directive({\r\n  selector: 'mat-select-trigger'\r\n})\r\nexport class MatSelectTrigger {}\r\n\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-select',\r\n  exportAs: 'matSelect',\r\n  templateUrl: 'select.html',\r\n  styleUrls: ['select.css'],\r\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  host: {\r\n    'role': 'listbox',\r\n    '[attr.id]': 'id',\r\n    '[attr.tabindex]': 'tabIndex',\r\n    '[attr.aria-label]': '_ariaLabel',\r\n    '[attr.aria-labelledby]': 'ariaLabelledby',\r\n    '[attr.aria-required]': 'required.toString()',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n    '[attr.aria-invalid]': 'errorState',\r\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\r\n    '[attr.aria-multiselectable]': 'multiple',\r\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\r\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\r\n    '[class.mat-select-disabled]': 'disabled',\r\n    '[class.mat-select-invalid]': 'errorState',\r\n    '[class.mat-select-required]': 'required',\r\n    'class': 'mat-select',\r\n    '(keydown)': '_handleKeydown($event)',\r\n    '(focus)': '_onFocus()',\r\n    '(blur)': '_onBlur()',\r\n  },\r\n  animations: [\r\n    matSelectAnimations.transformPanel,\r\n    matSelectAnimations.fadeInContent\r\n  ],\r\n  providers: [\r\n    {provide: MatFormFieldControl, useExisting: MatSelect},\r\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\r\n  ],\r\n})\r\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\r\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\r\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\r\n  /** Whether or not the overlay panel is open. */\r\n  private _panelOpen = false;\r\n\r\n  /** Whether filling out the select is required in the form. */\r\n  private _required: boolean = false;\r\n\r\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\r\n  private _scrollTop = 0;\r\n\r\n  /** The placeholder displayed in the trigger of the select. */\r\n  private _placeholder: string;\r\n\r\n  /** Whether the component is in multiple selection mode. */\r\n  private _multiple: boolean = false;\r\n\r\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\r\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\r\n\r\n  /** Unique id for this input. */\r\n  private _uid = `mat-select-${nextUniqueId++}`;\r\n\r\n  /** Emits whenever the component is destroyed. */\r\n  private readonly _destroy = new Subject<void>();\r\n\r\n  /** The last measured value for the trigger's client bounding rect. */\r\n  _triggerRect: ClientRect;\r\n\r\n  /** The aria-describedby attribute on the select for improved a11y. */\r\n  _ariaDescribedby: string;\r\n\r\n  /** The cached font-size of the trigger element. */\r\n  _triggerFontSize = 0;\r\n\r\n  /** Deals with the selection logic. */\r\n  _selectionModel: SelectionModel<MatOption>;\r\n\r\n  /** Manages keyboard events for options in the panel. */\r\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\r\n\r\n  /** `View -> model callback called when value changes` */\r\n  _onChange: (value: any) => void = () => {};\r\n\r\n  /** `View -> model callback called when select has been touched` */\r\n  _onTouched = () => {};\r\n\r\n  /** The IDs of child options to be passed to the aria-owns attribute. */\r\n  _optionIds: string = '';\r\n\r\n  /** The value of the select panel's transform-origin property. */\r\n  _transformOrigin: string = 'top';\r\n\r\n  /** Whether the panel's animation is done. */\r\n  _panelDoneAnimating: boolean = false;\r\n\r\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\r\n  _scrollStrategy = this._scrollStrategyFactory();\r\n\r\n  /**\r\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\r\n   * This must be adjusted to align the selected option text over the trigger text.\r\n   * when the panel opens. Will change based on the y-position of the selected option.\r\n   */\r\n  _offsetY = 0;\r\n\r\n  /**\r\n   * This position config ensures that the top \"start\" corner of the overlay\r\n   * is aligned with with the top \"start\" of the origin by default (overlapping\r\n   * the trigger completely). If the panel cannot fit below the trigger, it\r\n   * will fall back to a position above the trigger.\r\n   */\r\n  _positions = [\r\n    {\r\n      originX: 'start',\r\n      originY: 'top',\r\n      overlayX: 'start',\r\n      overlayY: 'top',\r\n    },\r\n    {\r\n      originX: 'start',\r\n      originY: 'bottom',\r\n      overlayX: 'start',\r\n      overlayY: 'bottom',\r\n    },\r\n  ];\r\n\r\n  /** Whether the select is focused. */\r\n  focused: boolean = false;\r\n\r\n  /** A name for this control that can be used by `mat-form-field`. */\r\n  controlType = 'mat-select';\r\n\r\n  /** Trigger that opens the select. */\r\n  @ViewChild('trigger') trigger: ElementRef;\r\n\r\n  /** Panel containing the select options. */\r\n  @ViewChild('panel') panel: ElementRef;\r\n\r\n  /** Overlay pane containing the options. */\r\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\r\n\r\n  /** All of the defined select options. */\r\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\r\n\r\n  /** All of the defined groups of options. */\r\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\r\n\r\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\r\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\r\n\r\n  /** User-supplied override of the trigger element. */\r\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\r\n\r\n  /** Placeholder to be shown if no value has been selected. */\r\n  @Input()\r\n  get placeholder(): string { return this._placeholder; }\r\n  set placeholder(value: string) {\r\n    this._placeholder = value;\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  /** Whether the component is required. */\r\n  @Input()\r\n  get required(): boolean { return this._required; }\r\n  set required(value: boolean) {\r\n    this._required = coerceBooleanProperty(value);\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  /** Whether the user should be allowed to select multiple options. */\r\n  @Input()\r\n  get multiple(): boolean { return this._multiple; }\r\n  set multiple(value: boolean) {\r\n    if (this._selectionModel) {\r\n      throw getMatSelectDynamicMultipleError();\r\n    }\r\n\r\n    this._multiple = coerceBooleanProperty(value);\r\n  }\r\n\r\n  /**\r\n   * A function to compare the option values with the selected values. The first argument\r\n   * is a value from an option. The second is a value from the selection. A boolean\r\n   * should be returned.\r\n   */\r\n  @Input()\r\n  get compareWith() { return this._compareWith; }\r\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\r\n    if (typeof fn !== 'function') {\r\n      throw getMatSelectNonFunctionValueError();\r\n    }\r\n    this._compareWith = fn;\r\n    if (this._selectionModel) {\r\n      // A different comparator means the selection could change.\r\n      this._initializeSelection();\r\n    }\r\n  }\r\n\r\n  /** Value of the select control. */\r\n  @Input()\r\n  get value(): any { return this._value; }\r\n  set value(newValue: any) {\r\n    if (newValue !== this._value) {\r\n      this.writeValue(newValue);\r\n      this._value = newValue;\r\n    }\r\n  }\r\n  private _value: any;\r\n\r\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\r\n  @Input('aria-label') ariaLabel: string = '';\r\n\r\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\r\n  @Input('aria-labelledby') ariaLabelledby: string;\r\n\r\n  /** An object used to control when error messages are shown. */\r\n  @Input() errorStateMatcher: ErrorStateMatcher;\r\n\r\n  /** Unique id of the element. */\r\n  @Input()\r\n  get id(): string { return this._id; }\r\n  set id(value: string) {\r\n    this._id = value || this._uid;\r\n    this.stateChanges.next();\r\n  }\r\n  private _id: string;\r\n\r\n  /** Combined stream of all of the child options' change events. */\r\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\r\n    if (this.options) {\r\n      return merge(...this.options.map(option => option.onSelectionChange));\r\n    }\r\n\r\n    return this._ngZone.onStable\r\n      .asObservable()\r\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\r\n  });\r\n\r\n   /** Event emitted when the select panel has been toggled. */\r\n   @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n\r\n   /** Event emitted when the select has been opened. */\r\n   @Output('opened')\r\n   get _openedStream(): Observable<void> {\r\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\r\n  }\r\n\r\n  /** Event emitted when the select has been closed. */\r\n  @Output('closed')\r\n  get _closedStream(): Observable<void> {\r\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\r\n  }\r\n\r\n  /**\r\n   * Event emitted when the select has been opened.\r\n   * @deprecated Use `openedChange` instead.\r\n   * @deletion-target 6.0.0\r\n   */\r\n  @Output() readonly onOpen: Observable<void> = this._openedStream;\r\n\r\n  /**\r\n   * Event emitted when the select has been closed.\r\n   * @deprecated Use `openedChange` instead.\r\n   * @deletion-target 6.0.0\r\n   */\r\n  @Output() readonly onClose: Observable<void> = this._closedStream;\r\n\r\n   /** Event emitted when the selected value has been changed by the user. */\r\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\r\n      new EventEmitter<MatSelectChange>();\r\n\r\n  /**\r\n   * Event emitted when the selected value has been changed by the user.\r\n   * @deprecated Use `selectionChange` instead.\r\n   * @deletion-target 6.0.0\r\n   */\r\n  @Output() readonly change: EventEmitter<MatSelectChange> = this.selectionChange;\r\n\r\n  /**\r\n   * Event that emits whenever the raw value of the select changes. This is here primarily\r\n   * to facilitate the two-way binding for the `value` input.\r\n   * @docs-private\r\n   */\r\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  constructor(\r\n    private _viewportRuler: ViewportRuler,\r\n    private _changeDetectorRef: ChangeDetectorRef,\r\n    private _ngZone: NgZone,\r\n    _defaultErrorStateMatcher: ErrorStateMatcher,\r\n    elementRef: ElementRef,\r\n    @Optional() private _dir: Directionality,\r\n    @Optional() _parentForm: NgForm,\r\n    @Optional() _parentFormGroup: FormGroupDirective,\r\n    @Optional() private _parentFormField: MatFormField,\r\n    @Self() @Optional() public ngControl: NgControl,\r\n    @Attribute('tabindex') tabIndex: string,\r\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\r\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\r\n          _parentFormGroup, ngControl);\r\n\r\n    if (this.ngControl) {\r\n      // Note: we provide the value accessor through here, instead of\r\n      // the `providers` to avoid running into a circular import.\r\n      this.ngControl.valueAccessor = this;\r\n    }\r\n\r\n    this.tabIndex = parseInt(tabIndex) || 0;\r\n\r\n    // Force setter to be called in case id was not specified.\r\n    this.id = this.id;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple, undefined, false);\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._initKeyManager();\r\n\r\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\r\n      this._resetOptions();\r\n      this._initializeSelection();\r\n    });\r\n  }\r\n\r\n  ngDoCheck() {\r\n    if (this.ngControl) {\r\n      this.updateErrorState();\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\r\n    // the parent form field know to run change detection when the disabled state changes.\r\n    if (changes.disabled) {\r\n      this.stateChanges.next();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._destroy.next();\r\n    this._destroy.complete();\r\n    this.stateChanges.complete();\r\n  }\r\n\r\n  /** Toggles the overlay panel open or closed. */\r\n  toggle(): void {\r\n    this.panelOpen ? this.close() : this.open();\r\n  }\r\n\r\n  /** Opens the overlay panel. */\r\n  open(): void {\r\n    if (this.disabled || !this.options || !this.options.length) {\r\n      return;\r\n    }\r\n\r\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\r\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\r\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\r\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\r\n\r\n    this._panelOpen = true;\r\n    this._keyManager.withHorizontalOrientation(null);\r\n    this._calculateOverlayPosition();\r\n    this._highlightCorrectOption();\r\n    this._changeDetectorRef.markForCheck();\r\n\r\n    // Set the font size on the panel element once it exists.\r\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\r\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\r\n          this.overlayDir.overlayRef.overlayElement) {\r\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\r\n      }\r\n    });\r\n  }\r\n\r\n  /** Closes the overlay panel and focuses the host element. */\r\n  close(): void {\r\n    if (this._panelOpen) {\r\n      this._panelOpen = false;\r\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\r\n      this._changeDetectorRef.markForCheck();\r\n      this._onTouched();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the select's value. Part of the ControlValueAccessor interface\r\n   * required to integrate with Angular's core forms API.\r\n   *\r\n   * @param value New value to be written to the model.\r\n   */\r\n  writeValue(value: any): void {\r\n    if (this.options) {\r\n      this._setSelectionByValue(value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Saves a callback function to be invoked when the select's value\r\n   * changes from user input. Part of the ControlValueAccessor interface\r\n   * required to integrate with Angular's core forms API.\r\n   *\r\n   * @param fn Callback to be triggered when the value changes.\r\n   */\r\n  registerOnChange(fn: (value: any) => void): void {\r\n    this._onChange = fn;\r\n  }\r\n\r\n  /**\r\n   * Saves a callback function to be invoked when the select is blurred\r\n   * by the user. Part of the ControlValueAccessor interface required\r\n   * to integrate with Angular's core forms API.\r\n   *\r\n   * @param fn Callback to be triggered when the component has been touched.\r\n   */\r\n  registerOnTouched(fn: () => {}): void {\r\n    this._onTouched = fn;\r\n  }\r\n\r\n  /**\r\n   * Disables the select. Part of the ControlValueAccessor interface required\r\n   * to integrate with Angular's core forms API.\r\n   *\r\n   * @param isDisabled Sets whether the component is disabled.\r\n   */\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n    this._changeDetectorRef.markForCheck();\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  /** Whether or not the overlay panel is open. */\r\n  get panelOpen(): boolean {\r\n    return this._panelOpen;\r\n  }\r\n\r\n  /** The currently selected option. */\r\n  get selected(): MatOption | MatOption[] {\r\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\r\n  }\r\n\r\n  /** The value displayed in the trigger. */\r\n  get triggerValue(): string {\r\n    if (this.empty) {\r\n      return '';\r\n    }\r\n\r\n    if (this._multiple) {\r\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\r\n\r\n      if (this._isRtl()) {\r\n        selectedOptions.reverse();\r\n      }\r\n\r\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\r\n      return selectedOptions.join(', ');\r\n    }\r\n\r\n    return this._selectionModel.selected[0].viewValue;\r\n  }\r\n\r\n  /** Whether the element is in RTL mode. */\r\n  _isRtl(): boolean {\r\n    return this._dir ? this._dir.value === 'rtl' : false;\r\n  }\r\n\r\n  /** Handles all keydown events on the select. */\r\n  _handleKeydown(event: KeyboardEvent): void {\r\n    if (!this.disabled) {\r\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\r\n    }\r\n  }\r\n\r\n  /** Handles keyboard events while the select is closed. */\r\n  private _handleClosedKeydown(event: KeyboardEvent): void {\r\n    const keyCode = event.keyCode;\r\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\r\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\r\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\r\n\r\n    // Open the select on ALT + arrow key to match the native <select>\r\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\r\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\r\n      this.open();\r\n    } else if (!this.multiple) {\r\n      this._keyManager.onKeydown(event);\r\n    }\r\n  }\r\n\r\n  /** Handles keyboard events when the selected is open. */\r\n  private _handleOpenKeydown(event: KeyboardEvent): void {\r\n    const keyCode = event.keyCode;\r\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\r\n    const manager = this._keyManager;\r\n\r\n    if (keyCode === HOME || keyCode === END) {\r\n      event.preventDefault();\r\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\r\n    } else if (isArrowKey && event.altKey) {\r\n      // Close the select on ALT + arrow key to match the native <select>\r\n      event.preventDefault();\r\n      this.close();\r\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\r\n      event.preventDefault();\r\n      manager.activeItem._selectViaInteraction();\r\n    } else {\r\n      const previouslyFocusedIndex = manager.activeItemIndex;\r\n\r\n      manager.onKeydown(event);\r\n\r\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\r\n          manager.activeItemIndex !== previouslyFocusedIndex) {\r\n        manager.activeItem._selectViaInteraction();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * When the panel element is finished transforming in (though not fading in), it\r\n   * emits an event and focuses an option if the panel is open.\r\n   */\r\n  _onPanelDone(): void {\r\n    if (this.panelOpen) {\r\n      this._scrollTop = 0;\r\n      this.openedChange.emit(true);\r\n    } else {\r\n      this.openedChange.emit(false);\r\n      this._panelDoneAnimating = false;\r\n      this.overlayDir.offsetX = 0;\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * When the panel content is done fading in, the _panelDoneAnimating property is\r\n   * set so the proper class can be added to the panel.\r\n   */\r\n  _onFadeInDone(): void {\r\n    this._panelDoneAnimating = this.panelOpen;\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  _onFocus() {\r\n    if (!this.disabled) {\r\n      this.focused = true;\r\n      this.stateChanges.next();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\r\n   * \"blur\" to the panel when it opens, causing a false positive.\r\n   */\r\n  _onBlur() {\r\n    this.focused = false;\r\n\r\n    if (!this.disabled && !this.panelOpen) {\r\n      this._onTouched();\r\n      this._changeDetectorRef.markForCheck();\r\n      this.stateChanges.next();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Callback that is invoked when the overlay panel has been attached.\r\n   */\r\n  _onAttached(): void {\r\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\r\n      this._changeDetectorRef.detectChanges();\r\n      this._calculateOverlayOffsetX();\r\n      this.panel.nativeElement.scrollTop = this._scrollTop;\r\n    });\r\n  }\r\n\r\n  /** Returns the theme to be used on the panel. */\r\n  _getPanelTheme(): string {\r\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\r\n  }\r\n\r\n  /** Whether the select has a value. */\r\n  get empty(): boolean {\r\n    return !this._selectionModel || this._selectionModel.isEmpty();\r\n  }\r\n\r\n  private _initializeSelection(): void {\r\n    // Defer setting the value in order to avoid the \"Expression\r\n    // has changed after it was checked\" errors from Angular.\r\n    Promise.resolve().then(() => {\r\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Sets the selected option based on a value. If no option can be\r\n   * found with the designated value, the select trigger is cleared.\r\n   */\r\n  private _setSelectionByValue(value: any | any[], isUserInput = false): void {\r\n    if (this.multiple && value) {\r\n      if (!Array.isArray(value)) {\r\n        throw getMatSelectNonArrayValueError();\r\n      }\r\n\r\n      this._clearSelection();\r\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\r\n      this._sortValues();\r\n    } else {\r\n      this._clearSelection();\r\n\r\n      const correspondingOption = this._selectValue(value, isUserInput);\r\n\r\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\r\n      // mode, because we don't know what option the user interacted with last.\r\n      if (correspondingOption) {\r\n        this._keyManager.setActiveItem(this.options.toArray().indexOf(correspondingOption));\r\n      }\r\n    }\r\n\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /**\r\n   * Finds and selects and option based on its value.\r\n   * @returns Option that has the corresponding value.\r\n   */\r\n  private _selectValue(value: any, isUserInput = false): MatOption | undefined {\r\n    const correspondingOption = this.options.find((option: MatOption) => {\r\n      try {\r\n        // Treat null as a special reset value.\r\n        return option.value != null && this._compareWith(option.value,  value);\r\n      } catch (error) {\r\n        if (isDevMode()) {\r\n          // Notify developers of errors in their comparator.\r\n          console.warn(error);\r\n        }\r\n        return false;\r\n      }\r\n    });\r\n\r\n    if (correspondingOption) {\r\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\r\n      this._selectionModel.select(correspondingOption);\r\n      this.stateChanges.next();\r\n    }\r\n\r\n    return correspondingOption;\r\n  }\r\n\r\n\r\n  /**\r\n   * Clears the select trigger and deselects every option in the list.\r\n   * @param skip Option that should not be deselected.\r\n   */\r\n  private _clearSelection(skip?: MatOption): void {\r\n    this._selectionModel.clear();\r\n    this.options.forEach(option => {\r\n      if (option !== skip) {\r\n        option.deselect();\r\n      }\r\n    });\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\r\n  private _initKeyManager() {\r\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\r\n      .withTypeAhead()\r\n      .withVerticalOrientation()\r\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\r\n\r\n      this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => this.close());\r\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\r\n      if (this._panelOpen && this.panel) {\r\n        this._scrollActiveOptionIntoView();\r\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\r\n        this._keyManager.activeItem._selectViaInteraction();\r\n      }\r\n    });\r\n  }\r\n\r\n  /** Drops current option subscriptions and IDs and resets from scratch. */\r\n  private _resetOptions(): void {\r\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\r\n\r\n    this.optionSelectionChanges\r\n      .pipe(takeUntil(changedOrDestroyed), filter(event => event.isUserInput))\r\n      .subscribe(event => {\r\n        this._onSelect(event.source);\r\n\r\n        if (!this.multiple && this._panelOpen) {\r\n          this.close();\r\n          this.focus();\r\n        }\r\n      });\r\n\r\n    // Listen to changes in the internal state of the options and react accordingly.\r\n    // Handles cases like the labels of the selected options changing.\r\n    merge(...this.options.map(option => option._stateChanges))\r\n      .pipe(takeUntil(changedOrDestroyed))\r\n      .subscribe(() => {\r\n        this._changeDetectorRef.markForCheck();\r\n        this.stateChanges.next();\r\n      });\r\n\r\n    this._setOptionIds();\r\n  }\r\n\r\n  /** Invoked when an option is clicked. */\r\n  private _onSelect(option: MatOption): void {\r\n    const wasSelected = this._selectionModel.isSelected(option);\r\n\r\n    // TODO(crisbeto): handle blank/null options inside multi-select.\r\n    if (this.multiple) {\r\n      this._selectionModel.toggle(option);\r\n      this.stateChanges.next();\r\n      wasSelected ? option.deselect() : option.select();\r\n      this._keyManager.setActiveItem(this._getOptionIndex(option)!);\r\n      this._sortValues();\r\n    } else {\r\n      this._clearSelection(option.value == null ? undefined : option);\r\n\r\n      if (option.value == null) {\r\n        this._propagateChanges(option.value);\r\n      } else {\r\n        this._selectionModel.select(option);\r\n        this.stateChanges.next();\r\n      }\r\n    }\r\n\r\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\r\n      this._propagateChanges();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sorts the model values, ensuring that they keep the same\r\n   * order that they have in the panel.\r\n   */\r\n  private _sortValues(): void {\r\n    if (this._multiple) {\r\n      this._selectionModel.clear();\r\n\r\n      this.options.forEach(option => {\r\n        if (option.selected) {\r\n          this._selectionModel.select(option);\r\n        }\r\n      });\r\n      this.stateChanges.next();\r\n    }\r\n  }\r\n\r\n  /** Emits change event to set the model value. */\r\n  private _propagateChanges(fallbackValue?: any): void {\r\n    let valueToEmit: any = null;\r\n\r\n    if (this.multiple) {\r\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\r\n    } else {\r\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\r\n    }\r\n\r\n    this._value = valueToEmit;\r\n    this.valueChange.emit(valueToEmit);\r\n    this._onChange(valueToEmit);\r\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /** Records option IDs to pass to the aria-owns property. */\r\n  private _setOptionIds() {\r\n    this._optionIds = this.options.map(option => option.id).join(' ');\r\n  }\r\n\r\n  /**\r\n   * Highlights the selected item. If no option is selected, it will highlight\r\n   * the first item instead.\r\n   */\r\n  private _highlightCorrectOption(): void {\r\n    if (this._keyManager) {\r\n      if (this.empty) {\r\n        this._keyManager.setFirstItemActive();\r\n      } else {\r\n        this._keyManager.setActiveItem(this._getOptionIndex(this._selectionModel.selected[0])!);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Scrolls the active option into view. */\r\n  private _scrollActiveOptionIntoView(): void {\r\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\r\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\r\n        this.optionGroups);\r\n\r\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\r\n      activeOptionIndex + labelCount,\r\n      this._getItemHeight(),\r\n      this.panel.nativeElement.scrollTop,\r\n      SELECT_PANEL_MAX_HEIGHT\r\n    );\r\n  }\r\n\r\n  /** Focuses the select element. */\r\n  focus(): void {\r\n    this._elementRef.nativeElement.focus();\r\n  }\r\n\r\n  /** Gets the index of the provided option in the option list. */\r\n  private _getOptionIndex(option: MatOption): number | undefined {\r\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\r\n      return result === undefined ? (option === current ? index : undefined) : result;\r\n    }, undefined);\r\n  }\r\n\r\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\r\n  private _calculateOverlayPosition(): void {\r\n    const itemHeight = this._getItemHeight();\r\n    const items = this._getItemCount();\r\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\r\n    const scrollContainerHeight = items * itemHeight;\r\n\r\n    // The farthest the panel can be scrolled before it hits the bottom\r\n    const maxScroll = scrollContainerHeight - panelHeight;\r\n\r\n    // If no value is selected we open the popup to the first item.\r\n    let selectedOptionOffset =\r\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\r\n\r\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\r\n        this.optionGroups);\r\n\r\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\r\n    // center of the overlay panel rather than the top.\r\n    const scrollBuffer = panelHeight / 2;\r\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\r\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\r\n\r\n    this._checkOverlayWithinViewport(maxScroll);\r\n  }\r\n\r\n  /**\r\n   * Calculates the scroll position of the select's overlay panel.\r\n   *\r\n   * Attempts to center the selected option in the panel. If the option is\r\n   * too high or too low in the panel to be scrolled to the center, it clamps the\r\n   * scroll position to the min or max scroll positions respectively.\r\n   */\r\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\r\n                          maxScroll: number): number {\r\n    const itemHeight = this._getItemHeight();\r\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\r\n    const halfOptionHeight = itemHeight / 2;\r\n\r\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\r\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\r\n    // the center of the overlay panel. Half the option height must be re-added to the\r\n    // scrollTop so the option is centered based on its middle, not its top edge.\r\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\r\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\r\n  }\r\n\r\n  /** Returns the aria-label of the select component. */\r\n  get _ariaLabel(): string | null {\r\n    // If an ariaLabelledby value has been set, the select should not overwrite the\r\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\r\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\r\n  }\r\n\r\n  /** Determines the `aria-activedescendant` to be set on the host. */\r\n  _getAriaActiveDescendant(): string | null {\r\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\r\n      return this._keyManager.activeItem.id;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\r\n   * This must be adjusted to align the selected option text over the trigger text when\r\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\r\n   * can't be calculated until the panel has been attached, because we need to know the\r\n   * content width in order to constrain the panel within the viewport.\r\n   */\r\n  private _calculateOverlayOffsetX(): void {\r\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\r\n    const viewportSize = this._viewportRuler.getViewportSize();\r\n    const isRtl = this._isRtl();\r\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\r\n                                         SELECT_PANEL_PADDING_X * 2;\r\n    let offsetX: number;\r\n\r\n    // Adjust the offset, depending on the option padding.\r\n    if (this.multiple) {\r\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\r\n    } else {\r\n      let selected = this._selectionModel.selected[0] || this.options.first;\r\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\r\n    }\r\n\r\n    // Invert the offset in LTR.\r\n    if (!isRtl) {\r\n      offsetX *= -1;\r\n    }\r\n\r\n    // Determine how much the select overflows on each side.\r\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\r\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\r\n                          + (isRtl ? 0 : paddingWidth);\r\n\r\n    // If the element overflows on either side, reduce the offset to allow it to fit.\r\n    if (leftOverflow > 0) {\r\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\r\n    } else if (rightOverflow > 0) {\r\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\r\n    }\r\n\r\n    // Set the offset directly in order to avoid having to go through change detection and\r\n    // potentially triggering \"changed after it was checked\" errors.\r\n    this.overlayDir.offsetX = offsetX;\r\n    this.overlayDir.overlayRef.updatePosition();\r\n  }\r\n\r\n  /**\r\n   * Calculates the y-offset of the select's overlay panel in relation to the\r\n   * top start corner of the trigger. It has to be adjusted in order for the\r\n   * selected option to be aligned over the trigger when the panel opens.\r\n   */\r\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\r\n                                  maxScroll: number): number {\r\n    const itemHeight = this._getItemHeight();\r\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\r\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\r\n    let optionOffsetFromPanelTop: number;\r\n\r\n    if (this._scrollTop === 0) {\r\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\r\n    } else if (this._scrollTop === maxScroll) {\r\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\r\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\r\n\r\n      // The first item is partially out of the viewport. Therefore we need to calculate what\r\n      // portion of it is shown in the viewport and account for it in our offset.\r\n      let partialItemHeight =\r\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\r\n\r\n      // Because the panel height is longer than the height of the options alone,\r\n      // there is always extra padding at the top or bottom of the panel. When\r\n      // scrolled to the very bottom, this padding is at the top of the panel and\r\n      // must be added to the offset.\r\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\r\n    } else {\r\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\r\n      // its offset will be the scroll buffer minus the half height that was added to\r\n      // center it.\r\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\r\n    }\r\n\r\n    // The final offset is the option's offset from the top, adjusted for the height\r\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\r\n    // direction up the page.\r\n    return optionOffsetFromPanelTop * -1 - optionHeightAdjustment;\r\n  }\r\n\r\n  /**\r\n   * Checks that the attempted overlay position will fit within the viewport.\r\n   * If it will not fit, tries to adjust the scroll position and the associated\r\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\r\n   * sets the offset back to 0 to allow the fallback position to take over.\r\n   */\r\n  private _checkOverlayWithinViewport(maxScroll: number): void {\r\n    const itemHeight = this._getItemHeight();\r\n    const viewportSize = this._viewportRuler.getViewportSize();\r\n\r\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\r\n    const bottomSpaceAvailable =\r\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\r\n\r\n    const panelHeightTop = Math.abs(this._offsetY);\r\n    const totalPanelHeight =\r\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\r\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\r\n\r\n    if (panelHeightBottom > bottomSpaceAvailable) {\r\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\r\n    } else if (panelHeightTop > topSpaceAvailable) {\r\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\r\n    } else {\r\n      this._transformOrigin = this._getOriginBasedOnOption();\r\n    }\r\n  }\r\n\r\n  /** Adjusts the overlay panel up to fit in the viewport. */\r\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\r\n    // Browsers ignore fractional scroll offsets, so we need to round.\r\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\r\n\r\n    // Scrolls the panel up by the distance it was extending past the boundary, then\r\n    // adjusts the offset by that amount to move the panel up into the viewport.\r\n    this._scrollTop -= distanceBelowViewport;\r\n    this._offsetY -= distanceBelowViewport;\r\n    this._transformOrigin = this._getOriginBasedOnOption();\r\n\r\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\r\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\r\n    // effect.\r\n    if (this._scrollTop <= 0) {\r\n      this._scrollTop = 0;\r\n      this._offsetY = 0;\r\n      this._transformOrigin = `50% bottom 0px`;\r\n    }\r\n  }\r\n\r\n  /** Adjusts the overlay panel down to fit in the viewport. */\r\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\r\n                           maxScroll: number) {\r\n    // Browsers ignore fractional scroll offsets, so we need to round.\r\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\r\n\r\n    // Scrolls the panel down by the distance it was extending past the boundary, then\r\n    // adjusts the offset by that amount to move the panel down into the viewport.\r\n    this._scrollTop += distanceAboveViewport;\r\n    this._offsetY += distanceAboveViewport;\r\n    this._transformOrigin = this._getOriginBasedOnOption();\r\n\r\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\r\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\r\n    // to take effect.\r\n    if (this._scrollTop >= maxScroll) {\r\n      this._scrollTop = maxScroll;\r\n      this._offsetY = 0;\r\n      this._transformOrigin = `50% top 0px`;\r\n      return;\r\n    }\r\n  }\r\n\r\n  /** Sets the transform origin point based on the selected option. */\r\n  private _getOriginBasedOnOption(): string {\r\n    const itemHeight = this._getItemHeight();\r\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\r\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\r\n    return `50% ${originY}px 0px`;\r\n  }\r\n\r\n  /** Calculates the amount of items in the select. This includes options and group labels. */\r\n  private _getItemCount(): number {\r\n    return this.options.length + this.optionGroups.length;\r\n  }\r\n\r\n  /** Calculates the height of the select's options. */\r\n  private _getItemHeight(): number {\r\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\r\n  }\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  setDescribedByIds(ids: string[]) {\r\n    this._ariaDescribedby = ids.join(' ');\r\n  }\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  onContainerClick() {\r\n    this.focus();\r\n    this.open();\r\n  }\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  get shouldPlaceholderFloat(): boolean {\r\n    return this._panelOpen || !this.empty;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  animate,\r\n  AnimationTriggerMetadata,\r\n  state,\r\n  style,\r\n  transition,\r\n  trigger,\r\n} from '@angular/animations';\r\n\r\n/**\r\n * The following are all the animations for the mat-select component, with each\r\n * const containing the metadata for one animation.\r\n *\r\n * The values below match the implementation of the AngularJS Material mat-select animation.\r\n */\r\nexport const matSelectAnimations: {\r\n  readonly transformPanel: AnimationTriggerMetadata;\r\n  readonly fadeInContent: AnimationTriggerMetadata;\r\n} = {\r\n  /**\r\n   * This animation transforms the select's overlay panel on and off the page.\r\n   *\r\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\r\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\r\n   * side to ensure the option text correctly overlaps the trigger text.\r\n   *\r\n   * When the panel is removed from the DOM, it simply fades out linearly.\r\n   */\r\n  transformPanel: trigger('transformPanel', [\r\n    state('showing', style({\r\n      opacity: 1,\r\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\r\n      transform: 'scaleY(1)'\r\n    })),\r\n    state('showing-multiple', style({\r\n      opacity: 1,\r\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\r\n      transform: 'scaleY(1)'\r\n    })),\r\n    transition('void => *', [\r\n      style({\r\n        opacity: 0,\r\n        minWidth: '100%',\r\n        transform: 'scaleY(0)'\r\n      }),\r\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\r\n    ]),\r\n    transition('* => void', [\r\n      animate('250ms 100ms linear', style({opacity: 0}))\r\n    ])\r\n  ]),\r\n\r\n  /**\r\n   * This animation fades in the background color and text content of the\r\n   * select's options. It is time delayed to occur 100ms after the overlay\r\n   * panel has transformed in.\r\n   */\r\n  fadeInContent: trigger('fadeInContent', [\r\n    state('showing', style({opacity: 1})),\r\n    transition('void => showing', [\r\n      style({opacity: 0}),\r\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\r\n    ])\r\n  ])\r\n};\r\n\r\n\r\n/**\r\n * @deprecated\r\n * @deletion-target 7.0.0\r\n */\r\nexport const transformPanel = matSelectAnimations.transformPanel;\r\n\r\n/**\r\n * @deprecated\r\n * @deletion-target 7.0.0\r\n */\r\nexport const fadeInContent = matSelectAnimations.fadeInContent;\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {MatSelect, MatSelectTrigger, MAT_SELECT_SCROLL_STRATEGY_PROVIDER} from './select';\r\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\r\nimport {OverlayModule} from '@angular/cdk/overlay';\r\nimport {MatFormFieldModule} from '@angular/material/form-field';\r\nimport {ErrorStateMatcher} from '@angular/material/core';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    OverlayModule,\r\n    MatOptionModule,\r\n    MatCommonModule,\r\n  ],\r\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\r\n  declarations: [MatSelect, MatSelectTrigger],\r\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER, ErrorStateMatcher]\r\n})\r\nexport class MatSelectModule {}\r\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","getMatSelectDynamicMultipleError","Error","getMatSelectNonArrayValueError","getMatSelectNonFunctionValueError","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","overlay","scrollStrategies","reposition","setPrototypeOf","__proto__","Array","p","hasOwnProperty","matSelectAnimations","transformPanel","trigger","state","style","opacity","minWidth","transform","transition","animate","fadeInContent","nextUniqueId","MAT_SELECT_SCROLL_STRATEGY","InjectionToken","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","provide","deps","Overlay","useFactory","MatSelectChange","source","value","MatSelectBase","_elementRef","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinDisableRipple","mixinTabIndex","mixinDisabled","mixinErrorState","type","Directive","args","selector","MatSelectTrigger","MatSelect","_super","_viewportRuler","_changeDetectorRef","_ngZone","elementRef","_dir","_parentFormField","tabIndex","_scrollStrategyFactory","_this","call","_panelOpen","_required","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","Subject","_triggerFontSize","_onChange","_onTouched","_optionIds","_transformOrigin","_panelDoneAnimating","_scrollStrategy","_offsetY","_positions","originX","originY","overlayX","overlayY","focused","controlType","ariaLabel","optionSelectionChanges","defer","options","merge","apply","map","option","onSelectionChange","onStable","asObservable","pipe","take","switchMap","openedChange","EventEmitter","onOpen","_openedStream","onClose","_closedStream","selectionChange","change","valueChange","valueAccessor","parseInt","id","tslib_1.__extends","defineProperty","_placeholder","stateChanges","next","coerceBooleanProperty","_selectionModel","fn","_initializeSelection","_value","newValue","writeValue","_id","filter","o","ngOnInit","SelectionModel","multiple","undefined","ngAfterContentInit","_initKeyManager","changes","startWith","takeUntil","subscribe","_resetOptions","ngDoCheck","updateErrorState","ngOnChanges","ngOnDestroy","complete","toggle","panelOpen","close","open","disabled","length","_triggerRect","nativeElement","getBoundingClientRect","getComputedStyle","_keyManager","withHorizontalOrientation","_calculateOverlayPosition","_highlightCorrectOption","markForCheck","overlayDir","overlayRef","overlayElement","fontSize","_isRtl","_setSelectionByValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","selected","empty","selectedOptions","viewValue","reverse","join","_handleKeydown","event","_handleOpenKeydown","_handleClosedKeydown","keyCode","isArrowKey","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","ENTER","SPACE","altKey","preventDefault","onKeydown","manager","HOME","END","setFirstItemActive","setLastItemActive","activeItem","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onPanelDone","emit","offsetX","_onFadeInDone","_onFocus","_onBlur","_onAttached","positionChange","detectChanges","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","isEmpty","Promise","resolve","then","isUserInput","isArray","_clearSelection","forEach","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","toArray","indexOf","find","error","isDevMode","console","warn","select","skip","clear","deselect","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","focus","_stateChanges","_setOptionIds","wasSelected","isSelected","_getOptionIndex","_propagateChanges","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getItemHeight","reduce","result","current","index","itemHeight","items","_getItemCount","panelHeight","Math","min","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","selectedIndex","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","max","ariaLabelledby","placeholder","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","isRtl","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","SELECT_PANEL_PADDING_X","first","group","leftOverflow","left","rightOverflow","right","width","updatePosition","optionOffsetFromPanelTop","optionHeightAdjustment","height","maxOptionsDisplayed","floor","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","top","bottomSpaceAvailable","bottom","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","round","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","Component","exportAs","template","styles","inputs","encapsulation","ViewEncapsulation","None","preserveWhitespaces","changeDetection","ChangeDetectionStrategy","OnPush","host","role","[attr.id]","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-disabled]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","class","(keydown)","(focus)","(blur)","animations","providers","MatFormFieldControl","useExisting","MAT_OPTION_PARENT_COMPONENT","NgZone","ErrorStateMatcher","ElementRef","Directionality","decorators","Optional","NgForm","FormGroupDirective","MatFormField","NgControl","Self","Attribute","Inject","propDecorators","ViewChild","CdkConnectedOverlay","ContentChildren","MatOption","descendants","MatOptgroup","panelClass","Input","customTrigger","ContentChild","required","compareWith","errorStateMatcher","Output","MatSelectModule","NgModule","imports","CommonModule","OverlayModule","MatOptionModule","MatCommonModule","exports","MatFormFieldModule","declarations"],"mappings":"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"}
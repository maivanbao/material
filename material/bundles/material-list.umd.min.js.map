{"version":3,"file":"material-list.umd.min.js","sources":["../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/list/list.ts","../../node_modules/tslib/tslib.es6.js"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {SelectionModel} from '@angular/cdk/collections';\r\nimport {SPACE, ENTER, HOME, END} from '@angular/cdk/keycodes';\r\nimport {\r\n  AfterContentInit,\r\n  Attribute,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Inject,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {\r\n  CanDisable,\r\n  CanDisableRipple,\r\n  MatLine,\r\n  MatLineSetter,\r\n  mixinDisabled,\r\n  mixinDisableRipple,\r\n} from '@angular/material/core';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {Subscription} from 'rxjs/Subscription';\r\n\r\n\r\n/** @docs-private */\r\nexport class MatSelectionListBase {}\r\nexport const _MatSelectionListMixinBase = mixinDisableRipple(mixinDisabled(MatSelectionListBase));\r\n\r\n/** @docs-private */\r\nexport class MatListOptionBase {}\r\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\r\n\r\n/** @docs-private */\r\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MatSelectionList),\r\n  multi: true\r\n};\r\n\r\n/**\r\n * Change event object emitted by MatListOption whenever the selected state changes.\r\n * @deprecated Use the `MatSelectionListChange` event on the selection list instead.\r\n * @deletion-target 6.0.0\r\n */\r\nexport class MatListOptionChange {\r\n  constructor(\r\n    /** Reference to the list option that changed. */\r\n    public source: MatListOption,\r\n    /** The new selected state of the option. */\r\n    public selected: boolean) {}\r\n}\r\n\r\n/** Change event that is being fired whenever the selected state of an option changes. */\r\nexport class MatSelectionListChange {\r\n  constructor(\r\n    /** Reference to the selection list that emitted the event. */\r\n    public source: MatSelectionList,\r\n    /** Reference to the option that has been changed. */\r\n    public option: MatListOption) {}\r\n}\r\n\r\n/**\r\n * Component for list-options of selection-list. Each list-option can automatically\r\n * generate a checkbox and can put current item into the selectionModel of selection-list\r\n * if the current item is selected.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-list-option',\r\n  exportAs: 'matListOption',\r\n  inputs: ['disableRipple'],\r\n  host: {\r\n    'role': 'option',\r\n    'class': 'mat-list-item mat-list-option',\r\n    '(focus)': '_handleFocus()',\r\n    '(blur)': '_handleBlur()',\r\n    '(click)': '_handleClick()',\r\n    'tabindex': '-1',\r\n    '[class.mat-list-item-disabled]': 'disabled',\r\n    '[class.mat-list-item-focus]': '_hasFocus',\r\n    '[attr.aria-selected]': 'selected.toString()',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n  },\r\n  templateUrl: 'list-option.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatListOption extends _MatListOptionMixinBase\r\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\r\n\r\n  private _selected = false;\r\n  private _disabled = false;\r\n\r\n  /** Whether the option has focus. */\r\n  _hasFocus: boolean = false;\r\n\r\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\r\n\r\n  /** DOM element containing the item's text. */\r\n  @ViewChild('text') _text: ElementRef;\r\n\r\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\r\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\r\n\r\n  /** Value of the option */\r\n  @Input() value: any;\r\n\r\n  /** Whether the option is disabled. */\r\n  @Input()\r\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\r\n  set disabled(value: any) {\r\n    const newValue = coerceBooleanProperty(value);\r\n\r\n    if (newValue !== this._disabled) {\r\n      this._disabled = newValue;\r\n      this._changeDetector.markForCheck();\r\n    }\r\n  }\r\n\r\n  /** Whether the option is selected. */\r\n  @Input()\r\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\r\n  set selected(value: boolean) {\r\n    const isSelected = coerceBooleanProperty(value);\r\n\r\n    if (isSelected !== this._selected) {\r\n      this._setSelected(isSelected);\r\n      this.selectionList._reportValueChange();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Emits a change event whenever the selected state of an option changes.\r\n   * @deprecated Use the `selectionChange` event on the `<mat-selection-list>` instead.\r\n   * @deletion-target 6.0.0\r\n   */\r\n  @Output() readonly selectionChange: EventEmitter<MatListOptionChange> =\r\n    new EventEmitter<MatListOptionChange>();\r\n\r\n  constructor(private _element: ElementRef,\r\n              private _changeDetector: ChangeDetectorRef,\r\n              /** @docs-private */\r\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit() {\r\n    // List options that are selected at initialization can't be reported properly to the form\r\n    // control. This is because it takes some time until the selection-list knows about all\r\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\r\n    // that should be used instead. Deferring the value change report to the next tick ensures\r\n    // that the form control value is not being overwritten.\r\n    const wasSelected = this._selected;\r\n\r\n    Promise.resolve().then(() => {\r\n      if (this._selected || wasSelected) {\r\n        this.selected = true;\r\n        this._changeDetector.markForCheck();\r\n      }\r\n    });\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\r\n    // tslint:disable-next-line:no-unused-expression\r\n    new MatLineSetter(this._lines, this._element);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.selected) {\r\n      // We have to delay this until the next tick in order\r\n      // to avoid changed after checked errors.\r\n      Promise.resolve().then(() => this.selected = false);\r\n    }\r\n\r\n    this.selectionList._removeOptionFromList(this);\r\n  }\r\n\r\n  /** Toggles the selection state of the option. */\r\n  toggle(): void {\r\n    this.selected = !this.selected;\r\n  }\r\n\r\n  /** Allows for programmatic focusing of the option. */\r\n  focus(): void {\r\n    this._element.nativeElement.focus();\r\n  }\r\n\r\n  /**\r\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\r\n   * @docs-private\r\n   */\r\n  getLabel() {\r\n    return this._text ? this._text.nativeElement.textContent : '';\r\n  }\r\n\r\n  /** Whether this list item should show a ripple effect when clicked. */\r\n  _isRippleDisabled() {\r\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\r\n  }\r\n\r\n  _handleClick() {\r\n    if (!this.disabled) {\r\n      this.toggle();\r\n\r\n      // Emit a change event if the selected state of the option changed through user interaction.\r\n      this.selectionList._emitChangeEvent(this);\r\n\r\n      // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\r\n      this._emitDeprecatedChangeEvent();\r\n    }\r\n  }\r\n\r\n  _handleFocus() {\r\n    this._hasFocus = true;\r\n    this.selectionList._setFocusedOption(this);\r\n  }\r\n\r\n  _handleBlur() {\r\n    this._hasFocus = false;\r\n    this.selectionList._onTouched();\r\n  }\r\n\r\n  /** Retrieves the DOM element of the component host. */\r\n  _getHostElement(): HTMLElement {\r\n    return this._element.nativeElement;\r\n  }\r\n\r\n  /** Sets the selected state of the option. */\r\n  _setSelected(selected: boolean) {\r\n    if (selected === this._selected) {\r\n      return;\r\n    }\r\n\r\n    this._selected = selected;\r\n\r\n    if (selected) {\r\n      this.selectionList.selectedOptions.select(this);\r\n    } else {\r\n      this.selectionList.selectedOptions.deselect(this);\r\n    }\r\n\r\n    this._changeDetector.markForCheck();\r\n  }\r\n\r\n  /** Emits a selectionChange event for this option. */\r\n  _emitDeprecatedChangeEvent() {\r\n    // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\r\n    this.selectionChange.emit(new MatListOptionChange(this, this.selected));\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-selection-list',\r\n  exportAs: 'matSelectionList',\r\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\r\n  host: {\r\n    'role': 'listbox',\r\n    '[tabIndex]': 'tabIndex',\r\n    'class': 'mat-selection-list',\r\n    '(focus)': 'focus()',\r\n    '(blur)': '_onTouched()',\r\n    '(keydown)': '_keydown($event)',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n  },\r\n  template: '<ng-content></ng-content>',\r\n  styleUrls: ['list.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\r\n    CanDisable, CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\r\n\r\n  /** The FocusKeyManager which handles focus. */\r\n  _keyManager: FocusKeyManager<MatListOption>;\r\n\r\n  /** The option components contained within this selection-list. */\r\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\r\n\r\n  /** Emits a change event whenever the selected state of an option changes. */\r\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\r\n      new EventEmitter<MatSelectionListChange>();\r\n\r\n  /** Tabindex of the selection list. */\r\n  @Input() tabIndex: number = 0;\r\n\r\n  /** The currently selected options. */\r\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\r\n\r\n  /** View to model callback that should be called whenever the selected options change. */\r\n  private _onChange: (value: any) => void = (_: any) => {};\r\n\r\n  /** Used for storing the values that were assigned before the options were initialized. */\r\n  private _tempValues: string[]|null;\r\n\r\n  private _modelChanges = Subscription.EMPTY;\r\n\r\n  /** View to model callback that should be called if the list or its options lost focus. */\r\n  _onTouched: () => void = () => {};\r\n\r\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\r\n    super();\r\n\r\n    this.tabIndex = parseInt(tabIndex) || 0;\r\n  }\r\n\r\n  ngAfterContentInit(): void {\r\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\r\n      .withWrap()\r\n      .withTypeAhead()\r\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\r\n      // screenreader users, that allows reading the different options of the list.\r\n      .skipPredicate(() => false);\r\n\r\n    if (this._tempValues) {\r\n      this._setOptionsFromValues(this._tempValues);\r\n      this._tempValues = null;\r\n    }\r\n\r\n    // Sync external changes to the model back to the options.\r\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\r\n      if (event.added) {\r\n        for (let item of event.added) {\r\n          item.selected = true;\r\n        }\r\n      }\r\n\r\n      if (event.removed) {\r\n        for (let item of event.removed) {\r\n          item.selected = false;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._modelChanges.unsubscribe();\r\n  }\r\n\r\n  /** Focuses the last active list option. */\r\n  focus() {\r\n    this._element.nativeElement.focus();\r\n  }\r\n\r\n  /** Selects all of the options. */\r\n  selectAll() {\r\n    this.options.forEach(option => option._setSelected(true));\r\n    this._reportValueChange();\r\n  }\r\n\r\n  /** Deselects all of the options. */\r\n  deselectAll() {\r\n    this.options.forEach(option => option._setSelected(false));\r\n    this._reportValueChange();\r\n  }\r\n\r\n  /** Sets the focused option of the selection-list. */\r\n  _setFocusedOption(option: MatListOption) {\r\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\r\n  }\r\n\r\n  /** Removes an option from the selection list and updates the active item. */\r\n  _removeOptionFromList(option: MatListOption) {\r\n    if (option._hasFocus) {\r\n      const optionIndex = this._getOptionIndex(option);\r\n\r\n      // Check whether the option is the last item\r\n      if (optionIndex > 0) {\r\n        this._keyManager.setPreviousItemActive();\r\n      } else if (optionIndex === 0 && this.options.length > 1) {\r\n        this._keyManager.setNextItemActive();\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Passes relevant key presses to our key manager. */\r\n  _keydown(event: KeyboardEvent) {\r\n    switch (event.keyCode) {\r\n      case SPACE:\r\n      case ENTER:\r\n        if (!this.disabled) {\r\n          this._toggleSelectOnFocusedOption();\r\n\r\n          // Always prevent space from scrolling the page since the list has focus\r\n          event.preventDefault();\r\n        }\r\n        break;\r\n      case HOME:\r\n      case END:\r\n        event.keyCode === HOME ? this._keyManager.setFirstItemActive() :\r\n                                 this._keyManager.setLastItemActive();\r\n        event.preventDefault();\r\n        break;\r\n      default:\r\n        this._keyManager.onKeydown(event);\r\n    }\r\n  }\r\n\r\n  /** Reports a value change to the ControlValueAccessor */\r\n  _reportValueChange() {\r\n    if (this.options) {\r\n      this._onChange(this._getSelectedOptionValues());\r\n    }\r\n  }\r\n\r\n  /** Emits a change event if the selected state of an option changed. */\r\n  _emitChangeEvent(option: MatListOption) {\r\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\r\n  }\r\n\r\n  /** Implemented as part of ControlValueAccessor. */\r\n  writeValue(values: string[]): void {\r\n    if (this.options) {\r\n      this._setOptionsFromValues(values || []);\r\n    } else {\r\n      this._tempValues = values;\r\n    }\r\n  }\r\n\r\n  /** Implemented as a part of ControlValueAccessor. */\r\n  setDisabledState(isDisabled: boolean): void {\r\n    if (this.options) {\r\n      this.options.forEach(option => option.disabled = isDisabled);\r\n    }\r\n  }\r\n\r\n  /** Implemented as part of ControlValueAccessor. */\r\n  registerOnChange(fn: (value: any) => void): void {\r\n    this._onChange = fn;\r\n  }\r\n\r\n  /** Implemented as part of ControlValueAccessor. */\r\n  registerOnTouched(fn: () => void): void {\r\n    this._onTouched = fn;\r\n  }\r\n\r\n  /** Returns the option with the specified value. */\r\n  private _getOptionByValue(value: string): MatListOption | undefined {\r\n    return this.options.find(option => option.value === value);\r\n  }\r\n\r\n  /** Sets the selected options based on the specified values. */\r\n  private _setOptionsFromValues(values: string[]) {\r\n    this.options.forEach(option => option._setSelected(false));\r\n\r\n    values\r\n      .map(value => this._getOptionByValue(value))\r\n      .filter(Boolean)\r\n      .forEach(option => option!._setSelected(true));\r\n  }\r\n\r\n  /** Returns the values of the selected options. */\r\n  private _getSelectedOptionValues(): string[] {\r\n    return this.options.filter(option => option.selected).map(option => option.value);\r\n  }\r\n\r\n  /** Toggles the selected state of the currently focused option. */\r\n  private _toggleSelectOnFocusedOption(): void {\r\n    let focusedIndex = this._keyManager.activeItemIndex;\r\n\r\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\r\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\r\n\r\n      if (focusedOption) {\r\n        focusedOption.toggle();\r\n\r\n        // Emit a change event because the focused option changed its state through user\r\n        // interaction.\r\n        this._emitChangeEvent(focusedOption);\r\n\r\n        // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\r\n        focusedOption._emitDeprecatedChangeEvent();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Utility to ensure all indexes are valid.\r\n   * @param index The index to be checked.\r\n   * @returns True if the index is valid for our list of options.\r\n   */\r\n  private _isValidIndex(index: number): boolean {\r\n    return index >= 0 && index < this.options.length;\r\n  }\r\n\r\n  /** Returns the index of the specified list option. */\r\n  private _getOptionIndex(option: MatListOption): number {\r\n    return this.options.toArray().indexOf(option);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {\r\n  MatCommonModule,\r\n  MatLineModule,\r\n  MatPseudoCheckboxModule,\r\n  MatRippleModule,\r\n} from '@angular/material/core';\r\nimport {\r\n  MatList,\r\n  MatNavList,\r\n  MatListAvatarCssMatStyler,\r\n  MatListIconCssMatStyler,\r\n  MatListItem,\r\n  MatListSubheaderCssMatStyler,\r\n} from './list';\r\nimport {MatListOption, MatSelectionList} from './selection-list';\r\nimport {MatDividerModule} from '@angular/material/divider';\r\n\r\n\r\n@NgModule({\r\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\r\n  exports: [\r\n    MatList,\r\n    MatNavList,\r\n    MatListItem,\r\n    MatListAvatarCssMatStyler,\r\n    MatLineModule,\r\n    MatCommonModule,\r\n    MatListIconCssMatStyler,\r\n    MatListSubheaderCssMatStyler,\r\n    MatPseudoCheckboxModule,\r\n    MatSelectionList,\r\n    MatListOption,\r\n    MatDividerModule\r\n  ],\r\n  declarations: [\r\n    MatList,\r\n    MatNavList,\r\n    MatListItem,\r\n    MatListAvatarCssMatStyler,\r\n    MatListIconCssMatStyler,\r\n    MatListSubheaderCssMatStyler,\r\n    MatSelectionList,\r\n    MatListOption\r\n  ],\r\n})\r\nexport class MatListModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  Directive,\r\n  ElementRef,\r\n  Optional,\r\n  QueryList,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\r\n\r\n// Boilerplate for applying mixins to MatList.\r\n/** @docs-private */\r\nexport class MatListBase {}\r\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\r\n\r\n// Boilerplate for applying mixins to MatListItem.\r\n/** @docs-private */\r\nexport class MatListItemBase {}\r\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-nav-list',\r\n  exportAs: 'matNavList',\r\n  host: {\r\n    'role': 'navigation',\r\n    'class': 'mat-nav-list'\r\n  },\r\n  templateUrl: 'list.html',\r\n  styleUrls: ['list.css'],\r\n  inputs: ['disableRipple'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-list',\r\n  exportAs: 'matList',\r\n  templateUrl: 'list.html',\r\n  host: {'class': 'mat-list'},\r\n  styleUrls: ['list.css'],\r\n  inputs: ['disableRipple'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\r\n\r\n/**\r\n * Directive whose purpose is to add the mat- CSS styling to this selector.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: '[mat-list-avatar], [matListAvatar]',\r\n  host: {'class': 'mat-list-avatar'}\r\n})\r\nexport class MatListAvatarCssMatStyler {}\r\n\r\n/**\r\n * Directive whose purpose is to add the mat- CSS styling to this selector.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: '[mat-list-icon], [matListIcon]',\r\n  host: {'class': 'mat-list-icon'}\r\n})\r\nexport class MatListIconCssMatStyler {}\r\n\r\n/**\r\n * Directive whose purpose is to add the mat- CSS styling to this selector.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: '[mat-subheader], [matSubheader]',\r\n  host: {'class': 'mat-subheader'}\r\n})\r\nexport class MatListSubheaderCssMatStyler {}\r\n\r\n/** An item within a Material Design list. */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-list-item, a[mat-list-item]',\r\n  exportAs: 'matListItem',\r\n  host: {\r\n    'class': 'mat-list-item',\r\n    // @deletion-target 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\r\n    '[class.mat-list-item-avatar]': '_avatar',\r\n    '[class.mat-list-item-with-avatar]': '_avatar',\r\n    '(focus)': '_handleFocus()',\r\n    '(blur)': '_handleBlur()',\r\n  },\r\n  inputs: ['disableRipple'],\r\n  templateUrl: 'list-item.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\r\n    CanDisableRipple {\r\n  private _isNavList: boolean = false;\r\n\r\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\r\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\r\n\r\n  constructor(private _element: ElementRef,\r\n              @Optional() private _navList: MatNavList) {\r\n    super();\r\n    this._isNavList = !!_navList;\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\r\n    // tslint:disable-next-line:no-unused-expression\r\n    new MatLineSetter(this._lines, this._element);\r\n  }\r\n\r\n  /** Whether this list item should show a ripple effect when clicked. */\r\n  _isRippleDisabled() {\r\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\r\n  }\r\n\r\n  _handleFocus() {\r\n    this._element.nativeElement.classList.add('mat-list-item-focus');\r\n  }\r\n\r\n  _handleBlur() {\r\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\r\n  }\r\n\r\n  /** Retrieves the DOM element of the component host. */\r\n  _getHostElement(): HTMLElement {\r\n    return this._element.nativeElement;\r\n  }\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n"],"names":["_setSelected","focusedOption","this","options","toArray","focusedIndex","toggle","_emitDeprecatedChangeEvent","MatSelectionList","decorators","inputs","host","role","[tabIndex]","class","(focus)","(blur)","(keydown)","[attr.aria-disabled]","template","styles","encapsulation","ViewEncapsulation","None","providers","MAT_SELECTION_LIST_VALUE_ACCESSOR","preserveWhitespaces","changeDetection","ChangeDetectionStrategy","OnPush","ctorParameters","type","ElementRef","ContentChildren","args","MatListOption","selectionChange","Output","_MatSelectionListMixinBase","MatListModule","NgModule","imports","MatLineModule","MatRippleModule","MatCommonModule","MatPseudoCheckboxModule","CommonModule","exports","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","declarations","_this","_navList","_isNavList","prototype","ngAfterContentInit","_handleFocus","_element","nativeElement","classList","add","_handleBlur","remove","Component","selector","exportAs","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","Optional","_MatListItemMixinBase","MatSelectionListBase","mixinDisableRipple","mixinDisabled","MatListOptionBase","_MatListOptionMixinBase","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","MatListOptionChange","source","selected","MatSelectionListChange","option","_changeDetector","selectionList","_super","call","_selected","_disabled","_hasFocus","checkboxPosition","EventEmitter","tslib_1.__extends","Object","defineProperty","disabled","value","newValue","coerceBooleanProperty","markForCheck","selectedOptions","isSelected","_reportValueChange","ngOnInit","wasSelected","Promise","resolve","then","MatLineSetter","_lines","ngOnDestroy","_removeOptionFromList","focus","getLabel","_text","textContent","_isRippleDisabled","disableRipple","_handleClick","_emitChangeEvent","_setFocusedOption","_onTouched","_getHostElement","select","deselect","emit","(click)","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","Inject","propDecorators","Input","withWrap","withTypeAhead","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","subscribe","event","_i","_a","added","length","item","removed","_b","_c","optionIndex","_getOptionIndex","_keyManager","setNextItemActive","SPACE","ENTER","_toggleSelectOnFocusedOption","preventDefault","HOME","END","keyCode","setFirstItemActive","setLastItemActive","onKeydown","_onChange","_getSelectedOptionValues","values","forEach","isDisabled","map","_getOptionByValue","filter","Boolean","__extends","d","b","__","constructor","extendStatics","create","setPrototypeOf","__proto__","Array","p","hasOwnProperty","MatListBase","_MatListMixinBase","MatListItemBase","apply","arguments"],"mappings":"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"}
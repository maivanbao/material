{"version":3,"file":"material-paginator.umd.min.js","sources":["../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Injectable, SkipSelf, Optional } from '@angular/core';\r\nimport {Subject} from 'rxjs/Subject';\r\n\r\n/**\r\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\r\n * include it in a custom provider\r\n */\r\n@Injectable()\r\nexport class MatPaginatorIntl {\r\n  /**\r\n   * Stream that emits whenever the labels here are changed. Use this to notify\r\n   * components if the labels have changed after initialization.\r\n   */\r\n  readonly changes: Subject<void> = new Subject<void>();\r\n\r\n  /** A label for the page size selector. */\r\n  itemsPerPageLabel: string = 'Items per page:';\r\n\r\n  /** A label for the button that increments the current page. */\r\n  nextPageLabel: string = 'Next page';\r\n\r\n  /** A label for the button that decrements the current page. */\r\n  previousPageLabel: string = 'Previous page';\r\n\r\n  /** A label for the button that moves to the first page. */\r\n  firstPageLabel: string = 'First page';\r\n\r\n  /** A label for the button that moves to the last page. */\r\n  lastPageLabel: string = 'Last page';\r\n\r\n  /** A label for the range of items within the current page and the length of the whole list. */\r\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\r\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\r\n\r\n    length = Math.max(length, 0);\r\n\r\n    const startIndex = page * pageSize;\r\n\r\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\r\n    const endIndex = startIndex < length ?\r\n        Math.min(startIndex + pageSize, length) :\r\n        startIndex + pageSize;\r\n\r\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\r\n  }\r\n}\r\n\r\n/** @docs-private */\r\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\r\n  return parentIntl || new MatPaginatorIntl();\r\n}\r\n\r\n/** @docs-private */\r\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\r\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\r\n  provide: MatPaginatorIntl,\r\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\r\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {MatPaginatorIntl} from './paginator-intl';\r\n\r\n/** The default page size if there is no page size and there are no provided page size options. */\r\nconst DEFAULT_PAGE_SIZE = 50;\r\n\r\n/**\r\n * Change event object that is emitted when the user selects a\r\n * different page size or navigates to another page.\r\n */\r\nexport class PageEvent {\r\n  /** The current page index. */\r\n  pageIndex: number;\r\n\r\n  /** The current page size */\r\n  pageSize: number;\r\n\r\n  /** The current total number of items being paged */\r\n  length: number;\r\n}\r\n\r\n/**\r\n * Component to provide navigation between paged information. Displays the size of the current\r\n * page, user-selectable options to change that size, what items are being shown, and\r\n * navigational button to go to the previous or next page.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-paginator',\r\n  exportAs: 'matPaginator',\r\n  templateUrl: 'paginator.html',\r\n  styleUrls: ['paginator.css'],\r\n  host: {\r\n    'class': 'mat-paginator',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n})\r\nexport class MatPaginator implements OnInit, OnDestroy {\r\n  private _initialized: boolean;\r\n  private _intlChanges: Subscription;\r\n\r\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\r\n  @Input()\r\n  get pageIndex(): number { return this._pageIndex; }\r\n  set pageIndex(value: number) {\r\n    this._pageIndex = coerceNumberProperty(value);\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n  _pageIndex: number = 0;\r\n\r\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\r\n  @Input()\r\n  get length(): number { return this._length; }\r\n  set length(value: number) {\r\n    this._length = coerceNumberProperty(value);\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n  _length: number = 0;\r\n\r\n  /** Number of items to display on a page. By default set to 50. */\r\n  @Input()\r\n  get pageSize(): number { return this._pageSize; }\r\n  set pageSize(value: number) {\r\n    this._pageSize = coerceNumberProperty(value);\r\n    this._updateDisplayedPageSizeOptions();\r\n  }\r\n  private _pageSize: number;\r\n\r\n  /** The set of provided page size options to display to the user. */\r\n  @Input()\r\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\r\n  set pageSizeOptions(value: number[]) {\r\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\r\n    this._updateDisplayedPageSizeOptions();\r\n  }\r\n  private _pageSizeOptions: number[] = [];\r\n\r\n  /** Whether to hide the page size selection UI from the user. */\r\n  @Input()\r\n  get hidePageSize(): boolean { return this._hidePageSize; }\r\n  set hidePageSize(value: boolean) {\r\n    this._hidePageSize = coerceBooleanProperty(value);\r\n  }\r\n  private _hidePageSize = false;\r\n\r\n\r\n  /** Whether to show the first/last buttons UI to the user. */\r\n  @Input()\r\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\r\n  set showFirstLastButtons(value: boolean) {\r\n    this._showFirstLastButtons = coerceBooleanProperty(value);\r\n  }\r\n  private _showFirstLastButtons = false;\r\n\r\n  /** Event emitted when the paginator changes the page size or page index. */\r\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\r\n\r\n  /** Displayed set of page size options. Will be sorted and include current page size. */\r\n  _displayedPageSizeOptions: number[];\r\n\r\n  constructor(public _intl: MatPaginatorIntl,\r\n              private _changeDetectorRef: ChangeDetectorRef) {\r\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\r\n  }\r\n\r\n  ngOnInit() {\r\n    this._initialized = true;\r\n    this._updateDisplayedPageSizeOptions();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._intlChanges.unsubscribe();\r\n  }\r\n\r\n  /** Advances to the next page if it exists. */\r\n  nextPage(): void {\r\n    if (!this.hasNextPage()) { return; }\r\n    this.pageIndex++;\r\n    this._emitPageEvent();\r\n  }\r\n\r\n  /** Move back to the previous page if it exists. */\r\n  previousPage(): void {\r\n    if (!this.hasPreviousPage()) { return; }\r\n    this.pageIndex--;\r\n    this._emitPageEvent();\r\n  }\r\n\r\n  /** Move to the first page if not already there. */\r\n  firstPage(): void {\r\n    // hasPreviousPage being false implies at the start\r\n    if (!this.hasPreviousPage()) { return; }\r\n    this.pageIndex = 0;\r\n    this._emitPageEvent();\r\n  }\r\n\r\n  /** Move to the last page if not already there. */\r\n  lastPage(): void {\r\n    // hasNextPage being false implies at the end\r\n    if (!this.hasNextPage()) { return; }\r\n    this.pageIndex = this.getNumberOfPages();\r\n    this._emitPageEvent();\r\n  }\r\n\r\n  /** Whether there is a previous page. */\r\n  hasPreviousPage(): boolean {\r\n    return this.pageIndex >= 1 && this.pageSize != 0;\r\n  }\r\n\r\n  /** Whether there is a next page. */\r\n  hasNextPage(): boolean {\r\n    const numberOfPages = this.getNumberOfPages();\r\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\r\n  }\r\n\r\n  /** Calculate the number of pages */\r\n  getNumberOfPages(): number {\r\n    return Math.ceil(this.length / this.pageSize) - 1;\r\n  }\r\n\r\n\r\n  /**\r\n   * Changes the page size so that the first item displayed on the page will still be\r\n   * displayed using the new page size.\r\n   *\r\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\r\n   * switching so that the page size is 5 will set the third page as the current page so\r\n   * that the 10th item will still be displayed.\r\n   */\r\n  _changePageSize(pageSize: number) {\r\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\r\n    // containing the previous page's first item.\r\n    const startIndex = this.pageIndex * this.pageSize;\r\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\r\n\r\n    this.pageSize = pageSize;\r\n    this._emitPageEvent();\r\n  }\r\n\r\n  /**\r\n   * Updates the list of page size options to display to the user. Includes making sure that\r\n   * the page size is an option and that the list is sorted.\r\n   */\r\n  private _updateDisplayedPageSizeOptions() {\r\n    if (!this._initialized) { return; }\r\n\r\n    // If no page size is provided, use the first page size option or the default page size.\r\n    if (!this.pageSize) {\r\n      this._pageSize = this.pageSizeOptions.length != 0 ?\r\n          this.pageSizeOptions[0] :\r\n          DEFAULT_PAGE_SIZE;\r\n    }\r\n\r\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\r\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) == -1) {\r\n      this._displayedPageSizeOptions.push(this.pageSize);\r\n    }\r\n\r\n    // Sort the numbers using a number-specific sort function.\r\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\r\n\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\r\n  private _emitPageEvent() {\r\n    this.page.emit({\r\n      pageIndex: this.pageIndex,\r\n      pageSize: this.pageSize,\r\n      length: this.length\r\n    });\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {MatButtonModule} from '@angular/material/button';\r\nimport {MatSelectModule} from '@angular/material/select';\r\nimport {MatTooltipModule} from '@angular/material/tooltip';\r\nimport {MatPaginator} from './paginator';\r\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatButtonModule,\r\n    MatSelectModule,\r\n    MatTooltipModule,\r\n  ],\r\n  exports: [MatPaginator],\r\n  declarations: [MatPaginator],\r\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\r\n})\r\nexport class MatPaginatorModule {}\r\n"],"names":["MAT_PAGINATOR_INTL_PROVIDER_FACTORY","parentIntl","MatPaginatorIntl","this","changes","Subject","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","page","pageSize","length","Math","max","startIndex","min","type","Injectable","MAT_PAGINATOR_INTL_PROVIDER","provide","deps","Optional","SkipSelf","useFactory","PageEvent","MatPaginator","_intl","_changeDetectorRef","_this","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","EventEmitter","_intlChanges","subscribe","markForCheck","Object","defineProperty","prototype","value","coerceNumberProperty","_pageSize","_updateDisplayedPageSizeOptions","map","p","coerceBooleanProperty","ngOnInit","_initialized","ngOnDestroy","unsubscribe","nextPage","hasNextPage","pageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","ceil","_changePageSize","floor","pageSizeOptions","_displayedPageSizeOptions","slice","indexOf","push","sort","a","b","emit","Component","args","selector","exportAs","template","styles","host","class","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","preserveWhitespaces","propDecorators","Input","hidePageSize","showFirstLastButtons","Output","MatPaginatorModule","NgModule","imports","CommonModule","MatButtonModule","MatSelectModule","MatTooltipModule","exports","declarations","providers"],"mappings":";;;;;;;gwBAwDA,SAAAA,GAAoDC,GAClD,MAAOA,IAAc,GAAIC,iCApC3BC,KAAAC,QAAoC,GAAIC,GAAAA,QAGxCF,KAAAG,kBAA8B,kBAG9BH,KAAAI,cAA0B,YAG1BJ,KAAAK,kBAA8B,gBAG9BL,KAAAM,eAA2B,aAG3BN,KAAAO,cAA0B,YAG1BP,KAAAQ,cAAkB,SAACC,EAAcC,EAAkBC,GAC/C,GAAc,GAAVA,GAA2B,GAAZD,EAAiB,MAAO,QAAQC,CAEnDA,GAASC,KAAKC,IAAIF,EAAQ,EAE1B,IAAMG,GAAaL,EAAOC,CAO1B,OAAUI,GAAa,EAA3B,OAJqBA,EAAaH,EAC1BC,KAAKG,IAAID,EAAaJ,EAAUC,GAChCG,EAAaJ,GAErB,OAAiDC,GAnDjD,sBAeAK,KAACC,EAAAA,mDAfDlB,KA6DamB,GAEXC,QAASpB,EACTqB,OAAQ,GAAIC,GAAAA,SAAY,GAAIC,GAAAA,SAAYvB,IACxCwB,WAAY1B,GCnCd2B,EAAA,yBA9BA,MAAAA,mBA0HE,QAAFC,GAAqBC,EACCC,GADpB,GAAFC,GAAA5B,IAAqBA,MAArB0B,MAAqBA,EACC1B,KAAtB2B,mBAAsBA,EArDtB3B,KAAA6B,WAAuB,EASvB7B,KAAA8B,QAAoB,EAkBpB9B,KAAA+B,oBAQA/B,KAAAgC,eAA0B,EAS1BhC,KAAAiC,uBAAkC,EAGlCjC,KAAAS,KAAqD,GAAIyB,GAAAA,aAOrDlC,KAAKmC,aAAeT,EAAMzB,QAAQmC,UAAU,WAAM,MAAAR,GAAKD,mBAAmBU,iBAP9E,MApDAC,QAAAC,eAAMd,EAANe,UAAA,iBAAA,WAA4B,MAAOxC,MAAK6B,gBACtC,SAAcY,GACZzC,KAAK6B,WAAaa,EAAAA,qBAAqBD,GACvCzC,KAAK2B,mBAAmBU,gDAM5BC,OAAAC,eAAMd,EAANe,UAAA,cAAA,WAAyB,MAAOxC,MAAK8B,aACnC,SAAWW,GACTzC,KAAK8B,QAAUY,EAAAA,qBAAqBD,GACpCzC,KAAK2B,mBAAmBU,gDAM5BC,OAAAC,eAAMd,EAANe,UAAA,gBAAA,WAA2B,MAAOxC,MAAK2C,eACrC,SAAaF,GACXzC,KAAK2C,UAAYD,EAAAA,qBAAqBD,GACtCzC,KAAK4C,mEAMTN,OAAAC,eAAMd,EAANe,UAAA,uBAAA,WAAoC,MAAOxC,MAAK+B,sBAC9C,SAAoBU,GAClBzC,KAAK+B,kBAAoBU,OAAaI,IAAI,SAAAC,GAAK,MAAAJ,GAAAA,qBAAqBI,KACpE9C,KAAK4C,mEAMTN,OAAAC,eAAMd,EAANe,UAAA,oBAAA,WAAgC,MAAOxC,MAAKgC,mBAC1C,SAAiBS,GACfzC,KAAKgC,cAAgBe,EAAAA,sBAAsBN,oCAO/CH,OAAAC,eAAMd,EAANe,UAAA,4BAAA,WAAwC,MAAOxC,MAAKiC,2BAClD,SAAyBQ,GACvBzC,KAAKiC,sBAAwBc,EAAAA,sBAAsBN,oCAerDhB,EAAFe,UAAAQ,SAAE,WACEhD,KAAKiD,cAAe,EACpBjD,KAAK4C,mCAGPnB,EAAFe,UAAAU,YAAE,WACElD,KAAKmC,aAAagB,eAIpB1B,EAAFe,UAAAY,SAAE,WACOpD,KAAKqD,gBACVrD,KAAKsD,YACLtD,KAAKuD,mBAIP9B,EAAFe,UAAAgB,aAAE,WACOxD,KAAKyD,oBACVzD,KAAKsD,YACLtD,KAAKuD,mBAIP9B,EAAFe,UAAAkB,UAAE,WAEO1D,KAAKyD,oBACVzD,KAAKsD,UAAY,EACjBtD,KAAKuD,mBAIP9B,EAAFe,UAAAmB,SAAE,WAEO3D,KAAKqD,gBACVrD,KAAKsD,UAAYtD,KAAK4D,mBACtB5D,KAAKuD,mBAIP9B,EAAFe,UAAAiB,gBAAE,WACE,MAAOzD,MAAKsD,WAAa,GAAsB,GAAjBtD,KAAKU,UAIrCe,EAAFe,UAAAa,YAAE,WACE,GAAMQ,GAAgB7D,KAAK4D,kBAC3B,OAAO5D,MAAKsD,UAAYO,GAAkC,GAAjB7D,KAAKU,UAIhDe,EAAFe,UAAAoB,iBAAE,WACE,MAAOhD,MAAKkD,KAAK9D,KAAKW,OAASX,KAAKU,UAAY,GAYlDe,EAAFe,UAAAuB,gBAAE,SAAgBrD,GAGd,GAAMI,GAAad,KAAKsD,UAAYtD,KAAKU,QACzCV,MAAKsD,UAAY1C,KAAKoD,MAAMlD,EAAaJ,IAAa,EAEtDV,KAAKU,SAAWA,EAChBV,KAAKuD,kBAOC9B,EAAVe,UAAAI,2CACS5C,KAAKiD,eAGLjD,KAAKU,WACRV,KAAK2C,UAA2C,GAA/B3C,KAAKiE,gBAAgBtD,OAClCX,KAAKiE,gBAAgB,GA3LL,IA+LtBjE,KAAKkE,0BAA4BlE,KAAKiE,gBAAgBE,SACQ,GAA1DnE,KAAKkE,0BAA0BE,QAAQpE,KAAKU,WAC9CV,KAAKkE,0BAA0BG,KAAKrE,KAAKU,UAI3CV,KAAKkE,0BAA0BI,KAAK,SAACC,EAAGC,GAAM,MAAAD,GAAIC,IAElDxE,KAAK2B,mBAAmBU,iBAIlBZ,EAAVe,UAAAe,0BACIvD,KAAKS,KAAKgE,MACRnB,UAAWtD,KAAKsD,UAChB5C,SAAUV,KAAKU,SACfC,OAAQX,KAAKW,yBAzLnBK,KAAC0D,EAAAA,UAADC,OAAAC,SAAA,gBACEC,SAAU,eACVC,SAAU,80EACVC,QAAF,qkBACEC,MACFC,MAAA,iBAEAC,gBAAAC,EAAAA,wBAAAC,OACAC,cAAAC,EAAAA,kBAAAC,KACEC,qBAAF,+EA5CA/D,EAAAgE,mEAqDA/E,WAAAM,KAAA0E,EAAAA,QASAzB,kBAAAjD,KAAA0E,EAAAA,QASAC,eAAA3E,KAAA0E,EAAAA,QASAE,uBAAA5E,KAAQ0E,EAAAA,QASRjF,OAAAO,KAAA6E,EAAAA,UAiBApE,KC7GAqE,EAAA,yBARA,sBAiBA9E,KAAC+E,EAAAA,SAADpB,OACEqB,SACEC,EAAAA,aACAC,EAAAA,gBACAC,EAAAA,gBACAC,EAAAA,kBAEFC,SAAU5E,GACV6E,cAAe7E,GACf8E,WAAYrF,6CA1Bd4E"}
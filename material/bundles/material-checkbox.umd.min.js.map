{"version":3,"file":"material-checkbox.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {InjectionToken} from '@angular/core';\r\n\r\n\r\n/**\r\n * Checkbox click action when user click on input element.\r\n * noop: Do not toggle checked or indeterminate.\r\n * check: Only toggle checked status, ignore indeterminate.\r\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\r\n * undefined: Same as `check-indeterminate`.\r\n */\r\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\r\n\r\n/**\r\n * Injection token that can be used to specify the checkbox click behavior.\r\n */\r\nexport const MAT_CHECKBOX_CLICK_ACTION =\r\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {\r\n  AfterViewInit,\r\n  Attribute,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Inject,\r\n  Input,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {\r\n  CanColor,\r\n  CanDisable,\r\n  CanDisableRipple,\r\n  HasTabIndex,\r\n  MatRipple,\r\n  mixinColor,\r\n  mixinDisabled,\r\n  mixinDisableRipple,\r\n  mixinTabIndex,\r\n  RippleRef,\r\n} from '@angular/material/core';\r\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\r\n\r\n\r\n// Increasing integer for generating unique ids for checkbox components.\r\nlet nextUniqueId = 0;\r\n\r\n/**\r\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\r\n * This allows it to support [(ngModel)].\r\n * @docs-private\r\n */\r\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MatCheckbox),\r\n  multi: true\r\n};\r\n\r\n/**\r\n * Represents the different states that require custom transitions between them.\r\n * @docs-private\r\n */\r\nexport enum TransitionCheckState {\r\n  /** The initial state of the component before any user interaction. */\r\n  Init,\r\n  /** The state representing the component when it's becoming checked. */\r\n  Checked,\r\n  /** The state representing the component when it's becoming unchecked. */\r\n  Unchecked,\r\n  /** The state representing the component when it's becoming indeterminate. */\r\n  Indeterminate\r\n}\r\n\r\n/** Change event object emitted by MatCheckbox. */\r\nexport class MatCheckboxChange {\r\n  /** The source MatCheckbox of the event. */\r\n  source: MatCheckbox;\r\n  /** The new `checked` value of the checkbox. */\r\n  checked: boolean;\r\n}\r\n\r\n// Boilerplate for applying mixins to MatCheckbox.\r\n/** @docs-private */\r\nexport class MatCheckboxBase {\r\n  constructor(public _elementRef: ElementRef) {}\r\n}\r\nexport const _MatCheckboxMixinBase =\r\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\r\n\r\n\r\n/**\r\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\r\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\r\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\r\n * so there is no need to provide them yourself. However, if you want to omit a label and still\r\n * have the checkbox be accessible, you may supply an [aria-label] input.\r\n * See: https://www.google.com/design/spec/components/selection-controls.html\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-checkbox',\r\n  templateUrl: 'checkbox.html',\r\n  styleUrls: ['checkbox.css'],\r\n  exportAs: 'matCheckbox',\r\n  host: {\r\n    'class': 'mat-checkbox',\r\n    '[id]': 'id',\r\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\r\n    '[class.mat-checkbox-checked]': 'checked',\r\n    '[class.mat-checkbox-disabled]': 'disabled',\r\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\r\n  },\r\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\r\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\r\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\r\n\r\n  /**\r\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\r\n   * take precedence so this may be omitted.\r\n   */\r\n  @Input('aria-label') ariaLabel: string = '';\r\n\r\n  /**\r\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\r\n   */\r\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\r\n\r\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\r\n\r\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\r\n  @Input() id: string = this._uniqueId;\r\n\r\n  /** Returns the unique id for the visual hidden input. */\r\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\r\n\r\n  /** Whether the checkbox is required. */\r\n  @Input()\r\n  get required(): boolean { return this._required; }\r\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\r\n  private _required: boolean;\r\n\r\n  /**\r\n   * Whether or not the checkbox should appear before or after the label.\r\n   * @deprecated\r\n   * @deletion-target 6.0.0\r\n   */\r\n  @Input()\r\n  get align(): 'start' | 'end' {\r\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\r\n    // label relative to the checkbox. As such, they are inverted.\r\n    return this.labelPosition == 'after' ? 'start' : 'end';\r\n  }\r\n  set align(value: 'start' | 'end') {\r\n    this.labelPosition = (value == 'start') ? 'after' : 'before';\r\n  }\r\n\r\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\r\n  @Input() labelPosition: 'before' | 'after' = 'after';\r\n\r\n  /** Name value will be applied to the input element if present */\r\n  @Input() name: string | null = null;\r\n\r\n  /** Event emitted when the checkbox's `checked` value changes. */\r\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\r\n      new EventEmitter<MatCheckboxChange>();\r\n\r\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\r\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n\r\n  /** The value attribute of the native input element */\r\n  @Input() value: string;\r\n\r\n  /** The native `<input type=\"checkbox\">` element */\r\n  @ViewChild('input') _inputElement: ElementRef;\r\n\r\n  /** Reference to the ripple instance of the checkbox. */\r\n  @ViewChild(MatRipple) ripple: MatRipple;\r\n\r\n  /**\r\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\r\n   * @docs-private\r\n   */\r\n  _onTouched: () => any = () => {};\r\n\r\n  private _currentAnimationClass: string = '';\r\n\r\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\r\n\r\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\r\n\r\n  /** Reference to the focused state ripple. */\r\n  private _focusRipple: RippleRef | null;\r\n\r\n  constructor(elementRef: ElementRef,\r\n              private _changeDetectorRef: ChangeDetectorRef,\r\n              private _focusMonitor: FocusMonitor,\r\n              @Attribute('tabindex') tabIndex: string,\r\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\r\n                  private _clickAction: MatCheckboxClickAction) {\r\n    super(elementRef);\r\n\r\n    this.tabIndex = parseInt(tabIndex) || 0;\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this._focusMonitor\r\n      .monitor(this._inputElement.nativeElement)\r\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\r\n  }\r\n\r\n  /**\r\n   * Whether the checkbox is checked.\r\n   */\r\n  @Input()\r\n  get checked(): boolean { return this._checked; }\r\n  set checked(value: boolean) {\r\n    if (value != this.checked) {\r\n      this._checked = value;\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\r\n  private _checked: boolean = false;\r\n\r\n  /**\r\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\r\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\r\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\r\n   * set to false.\r\n   */\r\n  @Input()\r\n  get indeterminate(): boolean { return this._indeterminate; }\r\n  set indeterminate(value: boolean) {\r\n    const changed = value != this._indeterminate;\r\n    this._indeterminate = value;\r\n\r\n    if (changed) {\r\n      if (this._indeterminate) {\r\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\r\n      } else {\r\n        this._transitionCheckState(\r\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\r\n      }\r\n      this.indeterminateChange.emit(this._indeterminate);\r\n    }\r\n  }\r\n  private _indeterminate: boolean = false;\r\n\r\n  _isRippleDisabled() {\r\n    return this.disableRipple || this.disabled;\r\n  }\r\n\r\n  /** Method being called whenever the label text changes. */\r\n  _onLabelTextChange() {\r\n    // This method is getting called whenever the label of the checkbox changes.\r\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\r\n    // that has been recognized by the cdkObserveContent directive.\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  writeValue(value: any) {\r\n    this.checked = !!value;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnChange(fn: (value: any) => void) {\r\n    this._controlValueAccessorChangeFn = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnTouched(fn: any) {\r\n    this._onTouched = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  setDisabledState(isDisabled: boolean) {\r\n    this.disabled = isDisabled;\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\r\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\r\n  }\r\n\r\n  private _transitionCheckState(newState: TransitionCheckState) {\r\n    let oldState = this._currentCheckState;\r\n    let element: HTMLElement = this._elementRef.nativeElement;\r\n\r\n    if (oldState === newState) {\r\n      return;\r\n    }\r\n    if (this._currentAnimationClass.length > 0) {\r\n      element.classList.remove(this._currentAnimationClass);\r\n    }\r\n\r\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\r\n        oldState, newState);\r\n    this._currentCheckState = newState;\r\n\r\n    if (this._currentAnimationClass.length > 0) {\r\n      element.classList.add(this._currentAnimationClass);\r\n    }\r\n  }\r\n\r\n  private _emitChangeEvent() {\r\n    let event = new MatCheckboxChange();\r\n    event.source = this;\r\n    event.checked = this.checked;\r\n\r\n    this._controlValueAccessorChangeFn(this.checked);\r\n    this.change.emit(event);\r\n  }\r\n\r\n  /** Function is called whenever the focus changes for the input element. */\r\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\r\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\r\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\r\n    } else if (!focusOrigin) {\r\n      this._removeFocusRipple();\r\n      this._onTouched();\r\n    }\r\n  }\r\n\r\n  /** Toggles the `checked` state of the checkbox. */\r\n  toggle(): void {\r\n    this.checked = !this.checked;\r\n  }\r\n\r\n  /**\r\n   * Event handler for checkbox input element.\r\n   * Toggles checked state if element is not disabled.\r\n   * Do not toggle on (change) event since IE doesn't fire change event when\r\n   *   indeterminate checkbox is clicked.\r\n   * @param event\r\n   */\r\n  _onInputClick(event: Event) {\r\n    // We have to stop propagation for click events on the visual hidden input element.\r\n    // By default, when a user clicks on a label element, a generated click event will be\r\n    // dispatched on the associated input element. Since we are using a label element as our\r\n    // root container, the click event on the `checkbox` will be executed twice.\r\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\r\n    // This will lead to multiple click events.\r\n    // Preventing bubbling for the second event will solve that issue.\r\n    event.stopPropagation();\r\n\r\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\r\n    if (!this.disabled && this._clickAction !== 'noop') {\r\n      // When user manually click on the checkbox, `indeterminate` is set to false.\r\n      if (this.indeterminate && this._clickAction !== 'check') {\r\n\r\n        Promise.resolve().then(() => {\r\n          this._indeterminate = false;\r\n          this.indeterminateChange.emit(this._indeterminate);\r\n        });\r\n      }\r\n\r\n      this.toggle();\r\n      this._transitionCheckState(\r\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\r\n\r\n      // Emit our custom change event if the native input emitted one.\r\n      // It is important to only emit it, if the native input triggered one, because\r\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\r\n      this._emitChangeEvent();\r\n    } else if (!this.disabled && this._clickAction === 'noop') {\r\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\r\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\r\n      this._inputElement.nativeElement.checked = this.checked;\r\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\r\n    }\r\n  }\r\n\r\n  /** Focuses the checkbox. */\r\n  focus(): void {\r\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\r\n  }\r\n\r\n  _onInteractionEvent(event: Event) {\r\n    // We always have to stop propagation on the change event.\r\n    // Otherwise the change event, from the input element, will bubble up and\r\n    // emit its event object to the `change` output.\r\n    event.stopPropagation();\r\n  }\r\n\r\n  private _getAnimationClassForCheckStateTransition(\r\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\r\n    let animSuffix: string = '';\r\n\r\n    switch (oldState) {\r\n      case TransitionCheckState.Init:\r\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\r\n        // [checked] bound to it.\r\n        if (newState === TransitionCheckState.Checked) {\r\n          animSuffix = 'unchecked-checked';\r\n        } else if (newState == TransitionCheckState.Indeterminate) {\r\n          animSuffix = 'unchecked-indeterminate';\r\n        } else {\r\n          return '';\r\n        }\r\n        break;\r\n      case TransitionCheckState.Unchecked:\r\n        animSuffix = newState === TransitionCheckState.Checked ?\r\n            'unchecked-checked' : 'unchecked-indeterminate';\r\n        break;\r\n      case TransitionCheckState.Checked:\r\n        animSuffix = newState === TransitionCheckState.Unchecked ?\r\n            'checked-unchecked' : 'checked-indeterminate';\r\n        break;\r\n      case TransitionCheckState.Indeterminate:\r\n        animSuffix = newState === TransitionCheckState.Checked ?\r\n            'indeterminate-checked' : 'indeterminate-unchecked';\r\n        break;\r\n    }\r\n\r\n    return `mat-checkbox-anim-${animSuffix}`;\r\n  }\r\n\r\n  /** Fades out the focus state ripple. */\r\n  private _removeFocusRipple(): void {\r\n    if (this._focusRipple) {\r\n      this._focusRipple.fadeOut();\r\n      this._focusRipple = null;\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  Directive,\r\n  forwardRef,\r\n  Provider,\r\n} from '@angular/core';\r\nimport {\r\n  CheckboxRequiredValidator,\r\n  NG_VALIDATORS,\r\n} from '@angular/forms';\r\n\r\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\r\n  provide: NG_VALIDATORS,\r\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\r\n  multi: true\r\n};\r\n\r\n/**\r\n * Validator for Material checkbox's required attribute in template-driven checkbox.\r\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\r\n * work with `mat-checkbox`.\r\n */\r\n@Directive({\r\n  selector: `mat-checkbox[required][formControlName],\r\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\r\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\r\n  host: {'[attr.required]': 'required ? \"\" : null'}\r\n})\r\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {ObserversModule} from '@angular/cdk/observers';\r\nimport {MatRippleModule, MatCommonModule} from '@angular/material/core';\r\nimport {MatCheckbox} from './checkbox';\r\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\r\nimport {A11yModule} from '@angular/cdk/a11y';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule, A11yModule],\r\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\r\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\r\n})\r\nexport class MatCheckboxModule {}\r\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","setPrototypeOf","__proto__","Array","p","hasOwnProperty","MAT_CHECKBOX_CLICK_ACTION","InjectionToken","nextUniqueId","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","MatCheckbox","multi","MatCheckboxChange","MatCheckboxBase","_elementRef","_MatCheckboxMixinBase","mixinTabIndex","mixinColor","mixinDisableRipple","mixinDisabled","elementRef","_changeDetectorRef","_focusMonitor","tabIndex","_clickAction","_this","_super","call","ariaLabel","ariaLabelledby","_uniqueId","id","labelPosition","name","change","EventEmitter","indeterminateChange","_onTouched","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_controlValueAccessorChangeFn","_checked","_indeterminate","parseInt","tslib_1.__extends","defineProperty","_required","value","coerceBooleanProperty","ngAfterViewInit","monitor","_inputElement","nativeElement","subscribe","focusOrigin","_onInputFocusChange","ngOnDestroy","stopMonitoring","checked","markForCheck","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","emit","_isRippleDisabled","disableRipple","disabled","_onLabelTextChange","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","_getAriaChecked","indeterminate","newState","oldState","element","length","classList","remove","_getAnimationClassForCheckStateTransition","add","_emitChangeEvent","event","source","_focusRipple","_removeFocusRipple","ripple","launch","persistent","toggle","_onInputClick","stopPropagation","Promise","resolve","then","focus","focusVia","_onInteractionEvent","animSuffix","fadeOut","type","Component","args","selector","template","styles","exportAs","host","class","[id]","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","providers","inputs","encapsulation","ViewEncapsulation","None","preserveWhitespaces","changeDetection","ChangeDetectionStrategy","OnPush","FocusMonitor","undefined","decorators","Attribute","Optional","Inject","propDecorators","Input","required","align","Output","ViewChild","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","NG_VALIDATORS","MatCheckboxRequiredValidator","Directive","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","NgModule","imports","CommonModule","MatRippleModule","MatCommonModule","ObserversModule","A11yModule","exports","declarations"],"mappings":";;;;;;;ouBAoBA,SAAgBA,GAAUC,EAAGC,GAEzB,QAASC,KAAOC,KAAKC,YAAcJ,EADnCK,EAAcL,EAAGC,GAEjBD,EAAEM,UAAkB,OAANL,EAAaM,OAAOC,OAAOP,IAAMC,EAAGI,UAAYL,EAAEK,UAAW,GAAIJ,IAPnF,GAAIG,GAAgBE,OAAOE,iBACpBC,uBAA2BC,QAAS,SAAUX,EAAGC,GAAKD,EAAEU,UAAYT,IACvE,SAAUD,EAAGC,GAAK,IAAK,GAAIW,KAAKX,GAAOA,EAAEY,eAAeD,KAAIZ,EAAEY,GAAKX,EAAEW,KCI5DE,EACT,GAAIC,GAAAA,eAAuC,6BCqB3CC,EAAe,EAONC,GACXC,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAW,WAAM,MAAAC,KAC9BC,OAAO,yJAmBT,IAAAC,GAAA,yBAzEA,MAAAA,MAkFAC,EAAA,WACE,QAAFA,GAAqBC,GAAAvB,KAArBuB,YAAqBA,EAnFrB,MAAAD,MAqFaE,EACXC,EAAAA,cAAcC,EAAAA,WAAWC,EAAAA,mBAAmBC,EAAAA,cAAcN,IAAmB,yBA+G7E,QAAFH,GAAcU,EACQC,EACAC,EACeC,EAEXC,GALxB,GAAFC,GAMIC,EANJC,KAAApC,KAMU6B,IANV7B,WACsBkC,GAAtBJ,mBAAsBA,EACAI,EAAtBH,cAAsBA,EAGIG,EAA1BD,aAA0BA,EA9E1BC,EAAAG,UAA2C,GAK3CH,EAAAI,eAA4D,KAE5DJ,EAAAK,UAA8B,mBAAkB1B,EAGhDqB,EAAAM,GAAwBN,EAAKK,UA2B7BL,EAAAO,cAA+C,QAG/CP,EAAAQ,KAAiC,KAIjCR,EAAAS,OAAM,GAAIC,GAAAA,aAGVV,EAAAW,oBAAkE,GAAID,GAAAA,aAetEV,EAAAY,WAA0B,aAE1BZ,EAAAa,uBAA2C,GAE3Cb,EAAAc,mBAAqDC,EAAqBC,KAE1EhB,EAAAiB,8BAAgE,aAqChEjB,EAAAkB,UAA8B,EAwB9BlB,EAAAmB,gBAAoC,EAhDhCnB,EAAKF,SAAWsB,SAAStB,IAAa,IAgC1C,MAxHiCuB,GAAjCpC,EAAAgB,GAoBE/B,OAAFoD,eAAMrC,EAANhB,UAAA,eAAE,WAAwB,OAAUH,KAAKwC,IAAMxC,KAAKuC,WAApD,0CAIAnC,OAAAoD,eAAMrC,EAANhB,UAAA,gBAAA,WAA4B,MAAOH,MAAKyD,eACtC,SAAaC,GAAkB1D,KAAKyD,UAAYE,EAAAA,sBAAsBD,oCASxEtD,OAAAoD,eAAMrC,EAANhB,UAAA,wBAGI,MAA6B,SAAtBH,KAAKyC,cAA2B,QAAU,WAEnD,SAAUiB,GACR1D,KAAKyC,cAA0B,SAATiB,EAAoB,QAAU,0CAmDtDvC,EAAFhB,UAAAyD,gBAAE,WAAA,GAAF1B,GAAAlC,IACIA,MAAK+B,cACF8B,QAAQ7D,KAAK8D,cAAcC,eAC3BC,UAAU,SAAAC,GAAe,MAAA/B,GAAKgC,oBAAoBD,MAGvD9C,EAAFhB,UAAAgE,YAAE,WACEnE,KAAK+B,cAAcqC,eAAepE,KAAK8D,cAAcC,gBAOzD3D,OAAAoD,eAAMrC,EAANhB,UAAA,eAAA,WAA2B,MAAOH,MAAKoD,cACrC,SAAYM,GACNA,GAAS1D,KAAKqE,UAChBrE,KAAKoD,SAAWM,EAChB1D,KAAK8B,mBAAmBwC,iDAY9BlE,OAAAoD,eAAMrC,EAANhB,UAAA,qBAAA,WAAiC,MAAOH,MAAKqD,oBAC3C,SAAkBK,GAChB,GAAMa,GAAUb,GAAS1D,KAAKqD,cAC9BrD,MAAKqD,eAAiBK,EAElBa,IACEvE,KAAKqD,eACPrD,KAAKwE,sBAAsBvB,EAAqBwB,eAEhDzE,KAAKwE,sBACHxE,KAAKqE,QAAUpB,EAAqByB,QAAUzB,EAAqB0B,WAEvE3E,KAAK6C,oBAAoB+B,KAAK5E,KAAKqD,kDAKvClC,EAAFhB,UAAA0E,kBAAE,WACE,MAAO7E,MAAK8E,eAAiB9E,KAAK+E,UAIpC5D,EAAFhB,UAAA6E,mBAAE,WAIEhF,KAAK8B,mBAAmBwC,gBAI1BnD,EAAFhB,UAAA8E,WAAE,SAAWvB,GACT1D,KAAKqE,UAAYX,GAInBvC,EAAFhB,UAAA+E,iBAAE,SAAiBC,GACfnF,KAAKmD,8BAAgCgC,GAIvChE,EAAFhB,UAAAiF,kBAAE,SAAkBD,GAChBnF,KAAK8C,WAAaqC,GAIpBhE,EAAFhB,UAAAkF,iBAAE,SAAiBC,GACftF,KAAK+E,SAAWO,EAChBtF,KAAK8B,mBAAmBwC,gBAG1BnD,EAAFhB,UAAAoF,gBAAE,WACE,MAAOvF,MAAKqE,QAAU,OAAUrE,KAAKwF,cAAgB,QAAU,SAGzDrE,EAAVhB,UAAAqE,sBAAA,SAAgCiB,GAC5B,GAAIC,GAAW1F,KAAKgD,mBAChB2C,EAAuB3F,KAAKuB,YAAYwC,aAExC2B,KAAaD,IAGbzF,KAAK+C,uBAAuB6C,OAAS,GACvCD,EAAQE,UAAUC,OAAO9F,KAAK+C,wBAGhC/C,KAAK+C,uBAAyB/C,KAAK+F,0CAC/BL,EAAUD,GACdzF,KAAKgD,mBAAqByC,EAEtBzF,KAAK+C,uBAAuB6C,OAAS,GACvCD,EAAQE,UAAUG,IAAIhG,KAAK+C,0BAIvB5B,EAAVhB,UAAA8F,4BACI,GAAIC,GAAQ,GAAI7E,EAChB6E,GAAMC,OAASnG,KACfkG,EAAM7B,QAAUrE,KAAKqE,QAErBrE,KAAKmD,8BAA8BnD,KAAKqE,SACxCrE,KAAK2C,OAAOiC,KAAKsB,IAIX/E,EAAVhB,UAAA+D,oBAAA,SAA8BD,GACrBjE,KAAKoG,cAAgC,aAAhBnC,EAEdA,IACVjE,KAAKqG,qBACLrG,KAAK8C,cAHL9C,KAAKoG,aAAepG,KAAKsG,OAAOC,OAAO,EAAG,GAAIC,YAAY,KAQ9DrF,EAAFhB,UAAAsG,OAAE,WACEzG,KAAKqE,SAAWrE,KAAKqE,SAUvBlD,EAAFhB,UAAAuG,cAAE,SAAcR,GAAd,GAAFhE,GAAAlC,IAQIkG,GAAMS,kBAGD3G,KAAK+E,UAAkC,SAAtB/E,KAAKiC,aAkBfjC,KAAK+E,UAAkC,SAAtB/E,KAAKiC,eAGhCjC,KAAK8D,cAAcC,cAAcM,QAAUrE,KAAKqE,QAChDrE,KAAK8D,cAAcC,cAAcyB,cAAgBxF,KAAKwF,gBApBlDxF,KAAKwF,eAAuC,UAAtBxF,KAAKiC,cAE7B2E,QAAQC,UAAUC,KAAK,WACrB5E,EAAKmB,gBAAiB,EACtBnB,EAAKW,oBAAoB+B,KAAK1C,EAAKmB,kBAIvCrD,KAAKyG,SACLzG,KAAKwE,sBACDxE,KAAKoD,SAAWH,EAAqByB,QAAUzB,EAAqB0B,WAKxE3E,KAAKiG,qBAUT9E,EAAFhB,UAAA4G,MAAE,WACE/G,KAAK+B,cAAciF,SAAShH,KAAK8D,cAAcC,cAAe,aAGhE5C,EAAFhB,UAAA8G,oBAAE,SAAoBf,GAIlBA,EAAMS,mBAGAxF,EAAVhB,UAAA4F,0CACA,SAAML,EAAgCD,GAClC,GAAIyB,GAAqB,EAEzB,QAAQxB,GACN,IAAKzC,GAAqBC,KAGxB,GAAIuC,IAAaxC,EAAqByB,QACpCwC,EAAa,wBACR,CAAA,GAAIzB,GAAYxC,EAAqBwB,cAG1C,MAAO,EAFPyC,GAAa,0BAIf,KACF,KAAKjE,GAAqB0B,UACxBuC,EAAazB,IAAaxC,EAAqByB,QAC3C,oBAAsB,yBAC1B,MACF,KAAKzB,GAAqByB,QACxBwC,EAAazB,IAAaxC,EAAqB0B,UAC3C,oBAAsB,uBAC1B,MACF,KAAK1B,GAAqBwB,cACxByC,EAAazB,IAAaxC,EAAqByB,QAC3C,wBAA0B,0BAIlC,MAAO,qBAAqBwC,GAItB/F,EAAVhB,UAAAkG,8BACQrG,KAAKoG,eACPpG,KAAKoG,aAAae,UAClBnH,KAAKoG,aAAe,sBA5U1BgB,KAACC,EAAAA,UAADC,OAAAC,SAAA,eACEC,SAAU,w2CACVC,QAAF,+1KACEC,SAAF,cACEC,MACFC,MAAA,eACMC,OAAN,KACIC,qCAAJ,gBACIC,+BAAJ,UACIC,gCAAJ,WACIC,oCAAJ,6BAEAC,WAAApH,GACAqH,QAAA,WAAA,gBAAA,QAAA,YACEC,cAAFC,EAAAA,kBAAAC,KACEC,qBAAqB,EACrBC,gBAAFC,EAAAA,wBAAAC,8FAjGAtB,KAAEuB,EAAAA,eAFFvB,SAAEwB,GAAFC,aAAAzB,KAAA0B,EAAAA,UAAAxB,MAAA,gBANAF,SAAQwB,GAARC,aAAAzB,KAAA2B,EAAAA,WAAA3B,KAAA4B,EAAAA,OAAA1B,MAAA3G,QAiMAQ,EAAA8H,wHA7EAzG,KAAA4E,KAAA8B,EAAAA,QAKAC,WAAA/B,KAAA8B,EAAAA,QAKAE,QAAAhC,KAAA8B,EAAAA,QAMAzG,gBAAA2E,KAAQ8B,EAAAA,QAURxG,OAAA0E,KAAA8B,EAAAA,QAWAvG,SAAAyE,KAAAiC,EAAAA,SAGAxG,sBAAAuE,KAAAiC,EAAAA,SAGA3F,QAAA0D,KAAA8B,EAAAA,QAIApF,gBAAAsD,KAAAkC,EAAAA,UAAAhC,MAAA,WAGAhB,SAAAc,KAAAkC,EAAAA,UAAAhC,MAAAiC,EAAAA,aAGAlF,UAAA+C,KAAA8B,EAAAA,QAGA1D,gBAAA4B,KAAA8B,EAAAA,SAyDA/H,GA7OAK,GCkBagI,GACXzI,QAAS0I,EAAAA,cACTxI,YAAaC,EAAAA,WAAW,WAAM,MAAAwI,KAC9BtI,OAAO,6EArBT,MAmCkDmC,GAAlDmG,EAAAvH,kBANAiF,KAACuC,EAAAA,UAADrC,OACEC,SAAU,8HAEVW,WAAYsB,GACZ7B,MAAOiC,kBAAmB,kEAjC5BF,GAmCkDG,EAAAA,2BC3BlDC,EAAA,yBARA,sBAgBA1C,KAAC2C,EAAAA,SAADzC,OACE0C,SAAUC,EAAAA,aAAcC,EAAAA,gBAAiBC,EAAAA,gBAAiBC,EAAAA,gBAAiBC,EAAAA,YAC3EC,SAAUnJ,EAAauI,EAA8BS,EAAAA,iBACrDI,cAAepJ,EAAauI,6CAnB9BI"}
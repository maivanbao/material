{"version":3,"file":"material-form-field.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../src/lib/form-field/form-field-errors.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/** @docs-private */\r\nexport function getMatFormFieldPlaceholderConflictError(): Error {\r\n  return Error('Placeholder attribute and child element were both specified.');\r\n}\r\n\r\n/** @docs-private */\r\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\r\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\r\n}\r\n\r\n/** @docs-private */\r\nexport function getMatFormFieldMissingControlError(): Error {\r\n  return Error('mat-form-field must contain a MatFormFieldControl.');\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, Input} from '@angular/core';\r\n\r\n\r\nlet nextUniqueId = 0;\r\n\r\n\r\n/** Single error message to be shown underneath the form field. */\r\n@Directive({\r\n  selector: 'mat-error',\r\n  host: {\r\n    'class': 'mat-error',\r\n    'role': 'alert',\r\n    '[attr.id]': 'id',\r\n  }\r\n})\r\nexport class MatError {\r\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {\r\n  animate,\r\n  state,\r\n  style,\r\n  transition,\r\n  trigger,\r\n  AnimationTriggerMetadata,\r\n} from '@angular/animations';\r\n\r\n/** Animations used by the MatFormField. */\r\nexport const matFormFieldAnimations: {\r\n  readonly transitionMessages: AnimationTriggerMetadata\r\n} = {\r\n  /** Animation that transitions the form field's error and hint messages. */\r\n  transitionMessages: trigger('transitionMessages', [\r\n    // TODO(mmalerba): Use angular animations for label animation as well.\r\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\r\n    transition('void => enter', [\r\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\r\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\r\n    ]),\r\n  ])\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {NgControl} from '@angular/forms';\r\n\r\n\r\n/** An interface which allows a control to work inside of a `MatFormField`. */\r\nexport abstract class MatFormFieldControl<T> {\r\n  /** The value of the control. */\r\n  value: T | null;\r\n\r\n  /**\r\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\r\n   * needs to run change detection.\r\n   */\r\n  readonly stateChanges: Observable<void>;\r\n\r\n  /** The element ID for this control. */\r\n  readonly id: string;\r\n\r\n  /** The placeholder for this control. */\r\n  readonly placeholder: string;\r\n\r\n  /** Gets the NgControl for this control. */\r\n  readonly ngControl: NgControl | null;\r\n\r\n  /** Whether the control is focused. */\r\n  readonly focused: boolean;\r\n\r\n  /** Whether the control is empty. */\r\n  readonly empty: boolean;\r\n\r\n  /** Whether the `MatFormField` label should try to float. */\r\n  readonly shouldLabelFloat?: boolean;\r\n\r\n  /**\r\n   * Whether the `MatFormField` placeholder should try to float.\r\n   * @deprecated Use `shouldLabelFloat` instead.\r\n   * @deletion-target 6.0.0\r\n   */\r\n  readonly shouldPlaceholderFloat?: boolean;\r\n\r\n  /** Whether the control is required. */\r\n  readonly required: boolean;\r\n\r\n  /** Whether the control is disabled. */\r\n  readonly disabled: boolean;\r\n\r\n  /** Whether the control is in an error state. */\r\n  readonly errorState: boolean;\r\n\r\n  /**\r\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\r\n   * based on their control type. The form field will add a class,\r\n   * `mat-form-field-type-{{controlType}}` to its root element.\r\n   */\r\n  readonly controlType?: string;\r\n\r\n  /** Sets the list of element IDs that currently describe this control. */\r\n  abstract setDescribedByIds(ids: string[]): void;\r\n\r\n  /** Handles a click on the control's container. */\r\n  abstract onContainerClick(event: MouseEvent): void;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, Input} from '@angular/core';\r\n\r\n\r\nlet nextUniqueId = 0;\r\n\r\n\r\n/** Hint text to be shown underneath the form field control. */\r\n@Directive({\r\n  selector: 'mat-hint',\r\n  host: {\r\n    'class': 'mat-hint',\r\n    '[class.mat-right]': 'align == \"end\"',\r\n    '[attr.id]': 'id',\r\n    // Remove align attribute to prevent it from interfering with layout.\r\n    '[attr.align]': 'null',\r\n  }\r\n})\r\nexport class MatHint {\r\n  /** Whether to align the hint label at the start or end of the line. */\r\n  @Input() align: 'start' | 'end' = 'start';\r\n\r\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\r\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive} from '@angular/core';\r\n\r\n\r\n/** The floating label for a `mat-form-field`. */\r\n@Directive({\r\n  selector: 'mat-label'\r\n})\r\nexport class MatLabel {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive} from '@angular/core';\r\n\r\n\r\n/** The placeholder text for an `MatFormField`. */\r\n@Directive({\r\n  selector: 'mat-placeholder'\r\n})\r\nexport class MatPlaceholder {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive} from '@angular/core';\r\n\r\n\r\n/** Prefix to be placed the the front of the form field. */\r\n@Directive({\r\n  selector: '[matPrefix]',\r\n})\r\nexport class MatPrefix {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive} from '@angular/core';\r\n\r\n\r\n/** Suffix to be placed at the end of the form field. */\r\n@Directive({\r\n  selector: '[matSuffix]',\r\n})\r\nexport class MatSuffix {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport {\r\n  AfterContentChecked,\r\n  AfterContentInit,\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  ElementRef,\r\n  Inject,\r\n  Input,\r\n  Optional,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {\r\n  CanColor,\r\n  FloatLabelType,\r\n  LabelOptions,\r\n  MAT_LABEL_GLOBAL_OPTIONS,\r\n  mixinColor,\r\n  ThemePalette\r\n} from '@angular/material/core';\r\nimport { fromEvent } from 'rxjs/observable/fromEvent';\r\nimport { startWith } from 'rxjs/operators/startWith';\r\nimport { take } from 'rxjs/operators/take';\r\nimport { MatError } from './error';\r\nimport { matFormFieldAnimations } from './form-field-animations';\r\nimport { MatFormFieldControl } from './form-field-control';\r\nimport {\r\n  getMatFormFieldDuplicatedHintError,\r\n  getMatFormFieldMissingControlError,\r\n  getMatFormFieldPlaceholderConflictError,\r\n} from './form-field-errors';\r\nimport { MatHint } from './hint';\r\nimport { MatLabel } from './label';\r\nimport { MatPlaceholder } from './placeholder';\r\nimport { MatPrefix } from './prefix';\r\nimport { MatSuffix } from './suffix';\r\n\r\n\r\n// Boilerplate for applying mixins to MatFormField.\r\n/** @docs-private */\r\nexport class MatFormFieldBase {\r\n  constructor(public _elementRef: ElementRef) { }\r\n}\r\n\r\nexport const _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\r\n\r\n\r\nlet nextUniqueId = 0;\r\n\r\n\r\n/** Container for form controls that applies Material Design styling and behavior. */\r\n@Component({\r\n  moduleId: module.id,\r\n  // TODO(mmalerba): the input-container selectors and classes are deprecated and will be removed.\r\n  selector: 'mat-input-container, mat-form-field',\r\n  exportAs: 'matFormField',\r\n  templateUrl: 'form-field.html',\r\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\r\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\r\n  // aren't using MatInput.\r\n  styleUrls: ['form-field.css', '../input/input.css'],\r\n  animations: [matFormFieldAnimations.transitionMessages],\r\n  host: {\r\n    'class': 'mat-input-container mat-form-field',\r\n    '[class.mat-input-invalid]': '_control.errorState',\r\n    '[class.mat-form-field-invalid]': '_control.errorState',\r\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\r\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\r\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\r\n    '[class.mat-form-field-disabled]': '_control.disabled',\r\n    '[class.mat-focused]': '_control.focused',\r\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\r\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\r\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\r\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\r\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\r\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\r\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\r\n    '[class.iap-form-field]': '!origin',\r\n  },\r\n  inputs: ['color'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\n\r\nexport class MatFormField extends _MatFormFieldMixinBase\r\n  implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\r\n  private _labelOptions: LabelOptions;\r\n\r\n  /**\r\n   * @deprecated Use `color` instead.\r\n   * @deletion-target 6.0.0\r\n   */\r\n  @Input()\r\n  get dividerColor(): ThemePalette { return this.color; }\r\n  set dividerColor(value: ThemePalette) { this.color = value; }\r\n\r\n  /** Whether the required marker should be hidden. */\r\n  @Input()\r\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\r\n  set hideRequiredMarker(value: boolean) {\r\n    this._hideRequiredMarker = coerceBooleanProperty(value);\r\n  }\r\n  private _hideRequiredMarker: boolean;\r\n\r\n  /** Override for the logic that disables the label animation in certain cases. */\r\n  private _showAlwaysAnimate = false;\r\n\r\n  /** Whether the floating label should always float or not. */\r\n  get _shouldAlwaysFloat(): boolean {\r\n    return this._floatLabel === 'always' && !this._showAlwaysAnimate;\r\n  }\r\n\r\n  /** Whether the label can float or not. */\r\n  get _canLabelFloat(): boolean { return this._floatLabel !== 'never'; }\r\n\r\n  /** State of the mat-hint and mat-error animations. */\r\n  _subscriptAnimationState: string = '';\r\n\r\n  /** Text for the form field hint. */\r\n  @Input()\r\n  get hintLabel(): string { return this._hintLabel; }\r\n  set hintLabel(value: string) {\r\n    this._hintLabel = value;\r\n    this._processHints();\r\n  }\r\n  private _hintLabel = '';\r\n\r\n  // Unique id for the hint label.\r\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\r\n\r\n  /**\r\n   * Whether the placeholder should always float, never float or float as the user types.\r\n   * @deprecated Use floatLabel instead.\r\n   * @deletion-target 6.0.0\r\n   */\r\n  @Input()\r\n  get floatPlaceholder(): FloatLabelType { return this._floatLabel; }\r\n  set floatPlaceholder(value: FloatLabelType) { this.floatLabel = value; }\r\n\r\n  /** Whether the label should always float, never float or float as the user types. */\r\n  @Input()\r\n  get floatLabel(): FloatLabelType { return this._floatLabel; }\r\n  set floatLabel(value: FloatLabelType) {\r\n    if (value !== this._floatLabel) {\r\n      this._floatLabel = value || this._labelOptions.float || 'auto';\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\r\n  private _floatLabel: FloatLabelType;\r\n  /** origin material and customize material*/\r\n  @Input()\r\n  get origin(): boolean { return this._origin; }\r\n  set origin(value: boolean) {\r\n    this._origin = coerceBooleanProperty(value);\r\n  }\r\n  private _origin: boolean;\r\n  /** Reference to the form field's underline element. */\r\n  @ViewChild('underline') underlineRef: ElementRef;\r\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\r\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\r\n  @ViewChild('label') private _label: ElementRef;\r\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\r\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\r\n  @ContentChild(MatLabel) _labelChild: MatLabel;\r\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\r\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\r\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\r\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\r\n\r\n  constructor(\r\n    public _elementRef: ElementRef,\r\n    private _changeDetectorRef: ChangeDetectorRef,\r\n    @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions) {\r\n    super(_elementRef);\r\n\r\n    this._labelOptions = labelOptions ? labelOptions : {};\r\n    this.floatLabel = this._labelOptions.float || 'auto';\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._validateControlChild();\r\n    if (this._control.controlType) {\r\n      this._elementRef.nativeElement.classList\r\n        .add(`mat-form-field-type-${this._control.controlType}`);\r\n    }\r\n\r\n    // Subscribe to changes in the child control state in order to update the form field UI.\r\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\r\n      this._validatePlaceholders();\r\n      this._syncDescribedByIds();\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n\r\n    let ngControl = this._control.ngControl;\r\n    if (ngControl && ngControl.valueChanges) {\r\n      ngControl.valueChanges.subscribe(() => {\r\n        this._changeDetectorRef.markForCheck();\r\n      });\r\n    }\r\n\r\n    // Re-validate when the number of hints changes.\r\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\r\n      this._processHints();\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n\r\n    // Update the aria-described by when the number of errors changes.\r\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\r\n      this._syncDescribedByIds();\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n  }\r\n\r\n  ngAfterContentChecked() {\r\n    this._validateControlChild();\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    // Avoid animations on load.\r\n    this._subscriptAnimationState = 'enter';\r\n    this._changeDetectorRef.detectChanges();\r\n  }\r\n\r\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\r\n  _shouldForward(prop: string): boolean {\r\n    let ngControl = this._control ? this._control.ngControl : null;\r\n    return ngControl && (ngControl as any)[prop];\r\n  }\r\n\r\n  _hasPlaceholder() {\r\n    return !!(this._control.placeholder || this._placeholderChild);\r\n  }\r\n\r\n  _hasLabel() {\r\n    return !!this._labelChild;\r\n  }\r\n\r\n  _shouldLabelFloat() {\r\n    return this._canLabelFloat && (this._control.shouldLabelFloat ||\r\n      this._control.shouldPlaceholderFloat || this._shouldAlwaysFloat);\r\n  }\r\n\r\n  _hideControlPlaceholder() {\r\n    return !this._hasLabel() || !this._shouldLabelFloat();\r\n  }\r\n\r\n  _hasFloatingLabel() {\r\n    return this._hasLabel() || this._hasPlaceholder();\r\n  }\r\n\r\n  /** Determines whether to display hints or errors. */\r\n  _getDisplayedMessages(): 'error' | 'hint' {\r\n    return (this._errorChildren && this._errorChildren.length > 0 &&\r\n      this._control.errorState) ? 'error' : 'hint';\r\n  }\r\n\r\n  /** Animates the placeholder up and locks it in position. */\r\n  _animateAndLockLabel(): void {\r\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\r\n      this._showAlwaysAnimate = true;\r\n      this._floatLabel = 'always';\r\n\r\n      fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\r\n        this._showAlwaysAnimate = false;\r\n      });\r\n\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\r\n   * or child element with the `mat-placeholder` directive).\r\n   */\r\n  private _validatePlaceholders() {\r\n    if (this._control.placeholder && this._placeholderChild) {\r\n      throw getMatFormFieldPlaceholderConflictError();\r\n    }\r\n  }\r\n\r\n  /** Does any extra processing that is required when handling the hints. */\r\n  private _processHints() {\r\n    this._validateHints();\r\n    this._syncDescribedByIds();\r\n  }\r\n\r\n  /**\r\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\r\n   * attribute being considered as `align=\"start\"`.\r\n   */\r\n  private _validateHints() {\r\n    if (this._hintChildren) {\r\n      let startHint: MatHint;\r\n      let endHint: MatHint;\r\n      this._hintChildren.forEach((hint: MatHint) => {\r\n        if (hint.align === 'start') {\r\n          if (startHint || this.hintLabel) {\r\n            throw getMatFormFieldDuplicatedHintError('start');\r\n          }\r\n          startHint = hint;\r\n        } else if (hint.align === 'end') {\r\n          if (endHint) {\r\n            throw getMatFormFieldDuplicatedHintError('end');\r\n          }\r\n          endHint = hint;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the list of element IDs that describe the child control. This allows the control to update\r\n   * its `aria-describedby` attribute accordingly.\r\n   */\r\n  private _syncDescribedByIds() {\r\n    if (this._control) {\r\n      let ids: string[] = [];\r\n\r\n      if (this._getDisplayedMessages() === 'hint') {\r\n        let startHint = this._hintChildren ?\r\n          this._hintChildren.find(hint => hint.align === 'start') : null;\r\n        let endHint = this._hintChildren ?\r\n          this._hintChildren.find(hint => hint.align === 'end') : null;\r\n\r\n        if (startHint) {\r\n          ids.push(startHint.id);\r\n        } else if (this._hintLabel) {\r\n          ids.push(this._hintLabelId);\r\n        }\r\n\r\n        if (endHint) {\r\n          ids.push(endHint.id);\r\n        }\r\n      } else if (this._errorChildren) {\r\n        ids = this._errorChildren.map(error => error.id);\r\n      }\r\n\r\n      this._control.setDescribedByIds(ids);\r\n    }\r\n  }\r\n\r\n  /** Throws an error if the form field's control is missing. */\r\n  protected _validateControlChild() {\r\n    if (!this._control) {\r\n      throw getMatFormFieldMissingControlError();\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {PlatformModule} from '@angular/cdk/platform';\r\nimport {MatError} from './error';\r\nimport {MatFormField} from './form-field';\r\nimport {MatHint} from './hint';\r\nimport {MatPlaceholder} from './placeholder';\r\nimport {MatPrefix} from './prefix';\r\nimport {MatSuffix} from './suffix';\r\nimport {MatLabel} from './label';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    MatError,\r\n    MatHint,\r\n    MatFormField,\r\n    MatPlaceholder,\r\n    MatPrefix,\r\n    MatSuffix,\r\n    MatLabel,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    PlatformModule,\r\n  ],\r\n  exports: [\r\n    MatError,\r\n    MatHint,\r\n    MatFormField,\r\n    MatPlaceholder,\r\n    MatPrefix,\r\n    MatSuffix,\r\n    MatLabel,\r\n  ],\r\n})\r\nexport class MatFormFieldModule {}\r\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","getMatFormFieldPlaceholderConflictError","Error","getMatFormFieldDuplicatedHintError","align","getMatFormFieldMissingControlError","setPrototypeOf","__proto__","Array","p","hasOwnProperty","nextUniqueId","id","type","Directive","args","selector","host","class","role","[attr.id]","Input","MatError","matFormFieldAnimations","transitionMessages","trigger","state","style","opacity","transform","transition","animate","MatFormFieldControl","[class.mat-right]","[attr.align]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_elementRef","_MatFormFieldMixinBase","mixinColor","MatFormField","_changeDetectorRef","labelOptions","_this","_super","call","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","floatLabel","float","tslib_1.__extends","defineProperty","color","value","_hideRequiredMarker","coerceBooleanProperty","_floatLabel","_processHints","markForCheck","_origin","ngAfterContentInit","_validateControlChild","_control","controlType","nativeElement","classList","add","stateChanges","pipe","startWith","subscribe","_validatePlaceholders","_syncDescribedByIds","ngControl","valueChanges","_hintChildren","changes","_errorChildren","ngAfterContentChecked","ngAfterViewInit","detectChanges","_shouldForward","prop","_hasPlaceholder","placeholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","shouldPlaceholderFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","length","errorState","_animateAndLockLabel","fromEvent","_label","take","_validateHints","startHint_1","endHint_1","forEach","hint","hintLabel","ids","startHint","find","endHint","push","map","error","setDescribedByIds","Component","template","[class.mat-input-invalid]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","[class.iap-form-field]","inputs","encapsulation","ViewEncapsulation","None","preserveWhitespaces","changeDetection","ChangeDetectionStrategy","OnPush","undefined","decorators","Optional","Inject","MAT_LABEL_GLOBAL_OPTIONS","propDecorators","floatPlaceholder","origin","underlineRef","ViewChild","_connectionContainerRef","_inputContainerRef","ContentChild","ContentChildren","_prefixChildren","_suffixChildren","MatFormFieldModule","NgModule","declarations","imports","CommonModule","PlatformModule","exports"],"mappings":"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"}
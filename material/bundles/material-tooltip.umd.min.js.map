{"version":3,"file":"material-tooltip.umd.min.js","sources":["../../src/lib/tooltip/tooltip.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {AnimationEvent} from '@angular/animations';\r\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {ESCAPE} from '@angular/cdk/keycodes';\r\nimport {\r\n  ConnectionPositionPair,\r\n  HorizontalConnectionPos,\r\n  OriginConnectionPosition,\r\n  Overlay,\r\n  OverlayConfig,\r\n  OverlayConnectionPosition,\r\n  OverlayRef,\r\n  RepositionScrollStrategy,\r\n  ScrollStrategy,\r\n  VerticalConnectionPos,\r\n} from '@angular/cdk/overlay';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {ComponentPortal} from '@angular/cdk/portal';\r\nimport {take} from 'rxjs/operators/take';\r\nimport {merge} from 'rxjs/observable/merge';\r\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Directive,\r\n  ElementRef,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Optional,\r\n  ViewContainerRef,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {matTooltipAnimations} from './tooltip-animations';\r\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\r\n\r\n\r\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\r\n\r\n/** Time in ms to throttle repositioning after scroll events. */\r\nexport const SCROLL_THROTTLE_MS = 20;\r\n\r\n/** CSS class that will be attached to the overlay panel. */\r\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\r\n\r\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\r\nexport function getMatTooltipInvalidPositionError(position: string) {\r\n  return Error(`Tooltip position \"${position}\" is invalid.`);\r\n}\r\n\r\n/** Injection token that determines the scroll handling while a tooltip is visible. */\r\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\r\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\r\n\r\n/** @docs-private */\r\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\r\n    () => RepositionScrollStrategy {\r\n  return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\r\n}\r\n\r\n/** @docs-private */\r\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER = {\r\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\r\n  deps: [Overlay],\r\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY\r\n};\r\n\r\n/** Default `matTooltip` options that can be overridden. */\r\nexport interface MatTooltipDefaultOptions {\r\n  showDelay: number;\r\n  hideDelay: number;\r\n  touchendHideDelay: number;\r\n}\r\n\r\n/** Injection token to be used to override the default options for `matTooltip`. */\r\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\r\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options');\r\n\r\n/**\r\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\r\n * hiding of a tooltip provided position (defaults to below the element).\r\n *\r\n * https://material.google.com/components/tooltips.html\r\n */\r\n@Directive({\r\n  selector: '[matTooltip]',\r\n  exportAs: 'matTooltip',\r\n  host: {\r\n    '(longpress)': 'show()',\r\n    '(keydown)': '_handleKeydown($event)',\r\n    '(touchend)': '_handleTouchend()',\r\n  },\r\n})\r\nexport class MatTooltip implements OnDestroy {\r\n  _overlayRef: OverlayRef | null;\r\n  _tooltipInstance: TooltipComponent | null;\r\n\r\n  private _position: TooltipPosition = 'below';\r\n  private _disabled: boolean = false;\r\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\r\n\r\n  /** Allows the user to define the position of the tooltip relative to the parent element */\r\n  @Input('matTooltipPosition')\r\n  get position(): TooltipPosition { return this._position; }\r\n  set position(value: TooltipPosition) {\r\n    if (value !== this._position) {\r\n      this._position = value;\r\n\r\n      // TODO(andrewjs): When the overlay's position can be dynamically changed, do not destroy\r\n      // the tooltip.\r\n      if (this._tooltipInstance) {\r\n        this._disposeTooltip();\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Disables the display of the tooltip. */\r\n  @Input('matTooltipDisabled')\r\n  get disabled(): boolean { return this._disabled; }\r\n  set disabled(value) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n\r\n    // If tooltip is disabled, hide immediately.\r\n    if (this._disabled) {\r\n      this.hide(0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @deprecated\r\n   * @deletion-target 6.0.0\r\n   */\r\n  @Input('tooltip-position')\r\n  get _positionDeprecated(): TooltipPosition { return this._position; }\r\n  set _positionDeprecated(value: TooltipPosition) { this._position = value; }\r\n\r\n  /** The default delay in ms before showing the tooltip after show is called */\r\n  @Input('matTooltipShowDelay') showDelay =\r\n      this._defaultOptions ? this._defaultOptions.showDelay : 0;\r\n\r\n  /** The default delay in ms before hiding the tooltip after hide is called */\r\n  @Input('matTooltipHideDelay') hideDelay =\r\n      this._defaultOptions ? this._defaultOptions.hideDelay : 0;\r\n\r\n  private _message = '';\r\n\r\n  /** The message to be displayed in the tooltip */\r\n  @Input('matTooltip')\r\n  get message() { return this._message; }\r\n  set message(value: string) {\r\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\r\n\r\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\r\n    this._message = value != null ? `${value}`.trim() : '';\r\n\r\n    if (!this._message && this._isTooltipVisible()) {\r\n      this.hide(0);\r\n    } else {\r\n      this._updateTooltipMessage();\r\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\r\n    }\r\n  }\r\n\r\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\r\n  @Input('matTooltipClass')\r\n  get tooltipClass() { return this._tooltipClass; }\r\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\r\n    this._tooltipClass = value;\r\n    if (this._tooltipInstance) {\r\n      this._setTooltipClass(this._tooltipClass);\r\n    }\r\n  }\r\n\r\n  private _manualListeners = new Map<string, Function>();\r\n\r\n  constructor(\r\n    private _overlay: Overlay,\r\n    private _elementRef: ElementRef,\r\n    private _scrollDispatcher: ScrollDispatcher,\r\n    private _viewContainerRef: ViewContainerRef,\r\n    private _ngZone: NgZone,\r\n    private _platform: Platform,\r\n    private _ariaDescriber: AriaDescriber,\r\n    private _focusMonitor: FocusMonitor,\r\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\r\n    @Optional() private _dir: Directionality,\r\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\r\n      private _defaultOptions?: MatTooltipDefaultOptions) {\r\n\r\n    // TODO(crisbeto): make the `_defaultOptions` a required param next time we do breaking changes.\r\n    // @deletion-target 6.0.0\r\n\r\n    const element: HTMLElement = _elementRef.nativeElement;\r\n\r\n    // The mouse events shouldn't be bound on iOS devices, because\r\n    // they can prevent the first tap from firing its click event.\r\n    if (!_platform.IOS) {\r\n      this._manualListeners.set('mouseenter', () => this.show());\r\n      this._manualListeners.set('mouseleave', () => this.hide());\r\n\r\n      this._manualListeners\r\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\r\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\r\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\r\n      // will add some inline styles by default, including `user-select: none`. This is\r\n      // problematic on iOS, because it will prevent users from typing in inputs. If\r\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\r\n      // the `user-select` to avoid these issues.\r\n      element.style.webkitUserSelect = element.style.userSelect = '';\r\n    }\r\n\r\n    _focusMonitor.monitor(element).subscribe(origin => {\r\n      // Note that the focus monitor runs outside the Angular zone.\r\n      if (!origin) {\r\n        _ngZone.run(() => this.hide(0));\r\n      } else if (origin !== 'program') {\r\n        _ngZone.run(() => this.show());\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Dispose the tooltip when destroyed.\r\n   */\r\n  ngOnDestroy() {\r\n    if (this._tooltipInstance) {\r\n      this._disposeTooltip();\r\n    }\r\n\r\n    // Clean up the event listeners set in the constructor\r\n    if (!this._platform.IOS) {\r\n      this._manualListeners.forEach((listener, event) => {\r\n        this._elementRef.nativeElement.removeEventListener(event, listener);\r\n      });\r\n\r\n      this._manualListeners.clear();\r\n    }\r\n\r\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\r\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\r\n  }\r\n\r\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\r\n  show(delay: number = this.showDelay): void {\r\n    if (this.disabled || !this.message) { return; }\r\n\r\n    if (!this._tooltipInstance) {\r\n      this._createTooltip();\r\n    }\r\n\r\n    this._setTooltipClass(this._tooltipClass);\r\n    this._updateTooltipMessage();\r\n    this._tooltipInstance!.show(this._position, delay);\r\n  }\r\n\r\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\r\n  hide(delay: number = this.hideDelay): void {\r\n    if (this._tooltipInstance) {\r\n      this._tooltipInstance.hide(delay);\r\n    }\r\n  }\r\n\r\n  /** Shows/hides the tooltip */\r\n  toggle(): void {\r\n    this._isTooltipVisible() ? this.hide() : this.show();\r\n  }\r\n\r\n  /** Returns true if the tooltip is currently visible to the user */\r\n  _isTooltipVisible(): boolean {\r\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\r\n  }\r\n\r\n  /** Handles the keydown events on the host element. */\r\n  _handleKeydown(e: KeyboardEvent) {\r\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\r\n      e.stopPropagation();\r\n      this.hide(0);\r\n    }\r\n  }\r\n\r\n  /** Handles the touchend events on the host element. */\r\n  _handleTouchend() {\r\n    this.hide(this._defaultOptions ? this._defaultOptions.touchendHideDelay : 1500);\r\n  }\r\n\r\n  /** Create the tooltip to display */\r\n  private _createTooltip(): void {\r\n    const overlayRef = this._createOverlay();\r\n    const portal = new ComponentPortal(TooltipComponent, this._viewContainerRef);\r\n\r\n    this._tooltipInstance = overlayRef.attach(portal).instance;\r\n\r\n    // Dispose of the tooltip when the overlay is detached.\r\n    merge(this._tooltipInstance!.afterHidden(), overlayRef.detachments()).subscribe(() => {\r\n      // Check first if the tooltip has already been removed through this components destroy.\r\n      if (this._tooltipInstance) {\r\n        this._disposeTooltip();\r\n      }\r\n    });\r\n  }\r\n\r\n  /** Create the overlay config and position strategy */\r\n  private _createOverlay(): OverlayRef {\r\n    const origin = this._getOrigin();\r\n    const overlay = this._getOverlayPosition();\r\n\r\n    // Create connected position strategy that listens for scroll events to reposition.\r\n    const strategy = this._overlay\r\n      .position()\r\n      .connectedTo(this._elementRef, origin.main, overlay.main)\r\n      .withFallbackPosition(origin.fallback, overlay.fallback);\r\n\r\n    const scrollableAncestors = this._scrollDispatcher\r\n      .getAncestorScrollContainers(this._elementRef);\r\n\r\n    strategy.withScrollableContainers(scrollableAncestors);\r\n\r\n    strategy.onPositionChange.subscribe(change => {\r\n      if (this._tooltipInstance) {\r\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\r\n          // After position changes occur and the overlay is clipped by\r\n          // a parent scrollable then close the tooltip.\r\n          this._ngZone.run(() => this.hide(0));\r\n        } else {\r\n          // Otherwise recalculate the origin based on the new position.\r\n          this._tooltipInstance._setTransformOrigin(change.connectionPair);\r\n        }\r\n      }\r\n    });\r\n\r\n    const config = new OverlayConfig({\r\n      direction: this._dir ? this._dir.value : 'ltr',\r\n      positionStrategy: strategy,\r\n      panelClass: TOOLTIP_PANEL_CLASS,\r\n      scrollStrategy: this._scrollStrategy()\r\n    });\r\n\r\n    this._overlayRef = this._overlay.create(config);\r\n\r\n    return this._overlayRef;\r\n  }\r\n\r\n  /** Disposes the current tooltip and the overlay it is attached to */\r\n  private _disposeTooltip(): void {\r\n    if (this._overlayRef) {\r\n      this._overlayRef.dispose();\r\n      this._overlayRef = null;\r\n    }\r\n\r\n    this._tooltipInstance = null;\r\n  }\r\n\r\n  /**\r\n   * Returns the origin position and a fallback position based on the user's position preference.\r\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\r\n   */\r\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\r\n    const isDirectionLtr = !this._dir || this._dir.value == 'ltr';\r\n    let position: OriginConnectionPosition;\r\n\r\n    if (this.position == 'above' || this.position == 'below') {\r\n      position = {originX: 'center', originY: this.position == 'above' ? 'top' : 'bottom'};\r\n    } else if (this.position == 'left' ||\r\n               this.position == 'before' && isDirectionLtr ||\r\n               this.position == 'after' && !isDirectionLtr) {\r\n      position = {originX: 'start', originY: 'center'};\r\n    } else if (this.position == 'right' ||\r\n               this.position == 'after' && isDirectionLtr ||\r\n               this.position == 'before' && !isDirectionLtr) {\r\n      position = {originX: 'end', originY: 'center'};\r\n    } else {\r\n      throw getMatTooltipInvalidPositionError(this.position);\r\n    }\r\n\r\n    const {x, y} = this._invertPosition(position.originX, position.originY);\r\n\r\n    return {\r\n      main: position,\r\n      fallback: {originX: x, originY: y}\r\n    };\r\n  }\r\n\r\n  /** Returns the overlay position and a fallback position based on the user's preference */\r\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\r\n    const isLtr = !this._dir || this._dir.value == 'ltr';\r\n    let position: OverlayConnectionPosition;\r\n\r\n    if (this.position == 'above') {\r\n      position = {overlayX: 'center', overlayY: 'bottom'};\r\n    } else if (this.position == 'below') {\r\n      position = {overlayX: 'center', overlayY: 'top'};\r\n    } else if (this.position == 'left' ||\r\n               this.position == 'before' && isLtr ||\r\n               this.position == 'after' && !isLtr) {\r\n      position = {overlayX: 'end', overlayY: 'center'};\r\n    } else if (this.position == 'right' ||\r\n               this.position == 'after' && isLtr ||\r\n               this.position == 'before' && !isLtr) {\r\n      position = {overlayX: 'start', overlayY: 'center'};\r\n    } else {\r\n      throw getMatTooltipInvalidPositionError(this.position);\r\n    }\r\n\r\n    const {x, y} = this._invertPosition(position.overlayX, position.overlayY);\r\n\r\n    return {\r\n      main: position,\r\n      fallback: {overlayX: x, overlayY: y}\r\n    };\r\n  }\r\n\r\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\r\n  private _updateTooltipMessage() {\r\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\r\n    // calculate the correct positioning based on the size of the text.\r\n    if (this._tooltipInstance) {\r\n      this._tooltipInstance.message = this.message;\r\n      this._tooltipInstance._markForCheck();\r\n\r\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\r\n        if (this._tooltipInstance) {\r\n          this._overlayRef!.updatePosition();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Updates the tooltip class */\r\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\r\n    if (this._tooltipInstance) {\r\n      this._tooltipInstance.tooltipClass = tooltipClass;\r\n      this._tooltipInstance._markForCheck();\r\n    }\r\n  }\r\n\r\n  /** Inverts an overlay position. */\r\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\r\n    if (this.position === 'above' || this.position === 'below') {\r\n      if (y === 'top') {\r\n        y = 'bottom';\r\n      } else if (y === 'bottom') {\r\n        y = 'top';\r\n      }\r\n    } else {\r\n      if (x === 'end') {\r\n        x = 'start';\r\n      } else if (x === 'start') {\r\n        x = 'end';\r\n      }\r\n    }\r\n\r\n    return {x, y};\r\n  }\r\n}\r\n\r\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\r\n\r\n/**\r\n * Internal component that wraps the tooltip's content.\r\n * @docs-private\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-tooltip-component',\r\n  templateUrl: 'tooltip.html',\r\n  styleUrls: ['tooltip.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [matTooltipAnimations.tooltipState],\r\n  host: {\r\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\r\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\r\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\r\n    '(body:click)': 'this._handleBodyInteraction()',\r\n    'aria-hidden': 'true',\r\n  }\r\n})\r\nexport class TooltipComponent {\r\n  /** Message to display in the tooltip */\r\n  message: string;\r\n\r\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\r\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\r\n\r\n  /** The timeout ID of any current timer set to show the tooltip */\r\n  _showTimeoutId: number;\r\n\r\n  /** The timeout ID of any current timer set to hide the tooltip */\r\n  _hideTimeoutId: number;\r\n\r\n  /** Property watched by the animation framework to show or hide the tooltip */\r\n  _visibility: TooltipVisibility = 'initial';\r\n\r\n  /** Whether interactions on the page should close the tooltip */\r\n  private _closeOnInteraction: boolean = false;\r\n\r\n  /** The transform origin used in the animation for showing and hiding the tooltip */\r\n  _transformOrigin: 'top' | 'bottom' | 'left' | 'right' = 'bottom';\r\n\r\n  /** Current position of the tooltip. */\r\n  private _position: TooltipPosition;\r\n\r\n  /** Subject for notifying that the tooltip has been hidden from the view */\r\n  private readonly _onHide: Subject<any> = new Subject();\r\n\r\n  /** Stream that emits whether the user has a handset-sized display.  */\r\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\r\n\r\n  constructor(\r\n    private _changeDetectorRef: ChangeDetectorRef,\r\n    private _breakpointObserver: BreakpointObserver) {}\r\n\r\n  /**\r\n   * Shows the tooltip with an animation originating from the provided origin\r\n   * @param position Position of the tooltip.\r\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\r\n   */\r\n  show(position: TooltipPosition, delay: number): void {\r\n    // Cancel the delayed hide if it is scheduled\r\n    if (this._hideTimeoutId) {\r\n      clearTimeout(this._hideTimeoutId);\r\n    }\r\n\r\n    // Body interactions should cancel the tooltip if there is a delay in showing.\r\n    this._closeOnInteraction = true;\r\n    this._position = position;\r\n    this._showTimeoutId = setTimeout(() => {\r\n      this._visibility = 'visible';\r\n\r\n      // Mark for check so if any parent component has set the\r\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\r\n      this._markForCheck();\r\n    }, delay);\r\n  }\r\n\r\n  /**\r\n   * Begins the animation to hide the tooltip after the provided delay in ms.\r\n   * @param delay Amount of milliseconds to delay showing the tooltip.\r\n   */\r\n  hide(delay: number): void {\r\n    // Cancel the delayed show if it is scheduled\r\n    if (this._showTimeoutId) {\r\n      clearTimeout(this._showTimeoutId);\r\n    }\r\n\r\n    this._hideTimeoutId = setTimeout(() => {\r\n      this._visibility = 'hidden';\r\n\r\n      // Mark for check so if any parent component has set the\r\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\r\n      this._markForCheck();\r\n    }, delay);\r\n  }\r\n\r\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\r\n  afterHidden(): Observable<void> {\r\n    return this._onHide.asObservable();\r\n  }\r\n\r\n  /** Whether the tooltip is being displayed. */\r\n  isVisible(): boolean {\r\n    return this._visibility === 'visible';\r\n  }\r\n\r\n  /** Sets the tooltip transform origin according to the position of the tooltip overlay. */\r\n  _setTransformOrigin(overlayPosition: ConnectionPositionPair) {\r\n    const axis = (this._position === 'above' || this._position === 'below') ? 'Y' : 'X';\r\n    const position = axis == 'X' ? overlayPosition.overlayX : overlayPosition.overlayY;\r\n\r\n    if (position === 'top' || position === 'bottom') {\r\n      this._transformOrigin = position;\r\n    } else if (position === 'start') {\r\n      this._transformOrigin = 'left';\r\n    } else if (position === 'end') {\r\n      this._transformOrigin = 'right';\r\n    } else {\r\n      throw getMatTooltipInvalidPositionError(this._position);\r\n    }\r\n  }\r\n\r\n  _animationStart() {\r\n    this._closeOnInteraction = false;\r\n  }\r\n\r\n  _animationDone(event: AnimationEvent): void {\r\n    const toState = event.toState as TooltipVisibility;\r\n\r\n    if (toState === 'hidden' && !this.isVisible()) {\r\n      this._onHide.next();\r\n    }\r\n\r\n    if (toState === 'visible' || toState === 'hidden') {\r\n      this._closeOnInteraction = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\r\n   * material design spec.\r\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\r\n   */\r\n  _handleBodyInteraction(): void {\r\n    if (this._closeOnInteraction) {\r\n      this.hide(0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Marks that the tooltip needs to be checked in the next change detection run.\r\n   * Mainly used for rendering the initial text before positioning a tooltip, which\r\n   * can be problematic in components with OnPush change detection.\r\n   */\r\n  _markForCheck(): void {\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {\r\n  animate,\r\n  state,\r\n  style,\r\n  transition,\r\n  trigger,\r\n  AnimationTriggerMetadata,\r\n} from '@angular/animations';\r\n\r\n/** Animations used by MatTooltip. */\r\nexport const matTooltipAnimations: {\r\n  readonly tooltipState: AnimationTriggerMetadata;\r\n} = {\r\n  /** Animation that transitions a tooltip in and out. */\r\n  tooltipState: trigger('state', [\r\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\r\n    state('visible', style({transform: 'scale(1)'})),\r\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\r\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\r\n  ])\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {A11yModule, ARIA_DESCRIBER_PROVIDER} from '@angular/cdk/a11y';\r\nimport {OverlayModule} from '@angular/cdk/overlay';\r\nimport {PlatformModule} from '@angular/cdk/platform';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {MatCommonModule} from '@angular/material/core';\r\nimport {LayoutModule} from '@angular/cdk/layout';\r\nimport {\r\n  MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\r\n  MAT_TOOLTIP_DEFAULT_OPTIONS,\r\n  MatTooltip,\r\n  TooltipComponent,\r\n} from './tooltip';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    OverlayModule,\r\n    MatCommonModule,\r\n    PlatformModule,\r\n    A11yModule,\r\n    LayoutModule,\r\n  ],\r\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\r\n  declarations: [MatTooltip, TooltipComponent],\r\n  entryComponents: [TooltipComponent],\r\n  providers: [\r\n    MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\r\n    ARIA_DESCRIBER_PROVIDER,\r\n    {\r\n      provide: MAT_TOOLTIP_DEFAULT_OPTIONS,\r\n      useValue: {\r\n        showDelay: 0,\r\n        hideDelay: 0,\r\n        touchendHideDelay: 1500\r\n      }\r\n    }\r\n  ],\r\n})\r\nexport class MatTooltipModule {}\r\n"],"names":["getMatTooltipInvalidPositionError","position","Error","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY","overlay","scrollStrategies","reposition","scrollThrottle","SCROLL_THROTTLE_MS","matTooltipAnimations","tooltipState","trigger","state","style","transform","transition","animate","MAT_TOOLTIP_SCROLL_STRATEGY","InjectionToken","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER","provide","deps","Overlay","useFactory","MAT_TOOLTIP_DEFAULT_OPTIONS","MatTooltip","_overlay","_elementRef","_scrollDispatcher","_viewContainerRef","_ngZone","_platform","_ariaDescriber","_focusMonitor","_scrollStrategy","_dir","_defaultOptions","_this","this","_position","_disabled","showDelay","hideDelay","_message","_manualListeners","Map","element","nativeElement","IOS","nodeName","webkitUserSelect","userSelect","set","show","hide","forEach","listener","event","addEventListener","monitor","subscribe","origin","run","Object","defineProperty","prototype","value","_tooltipInstance","_disposeTooltip","coerceBooleanProperty","removeDescription","trim","_isTooltipVisible","_updateTooltipMessage","describe","message","_tooltipClass","_setTooltipClass","ngOnDestroy","removeEventListener","clear","stopMonitoring","delay","disabled","_createTooltip","toggle","isVisible","_handleKeydown","e","keyCode","ESCAPE","stopPropagation","_handleTouchend","touchendHideDelay","overlayRef","_createOverlay","portal","ComponentPortal","TooltipComponent","attach","instance","merge","afterHidden","detachments","_getOrigin","_getOverlayPosition","strategy","connectedTo","main","withFallbackPosition","fallback","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","onPositionChange","change","scrollableViewProperties","isOverlayClipped","_setTransformOrigin","connectionPair","config","OverlayConfig","direction","positionStrategy","panelClass","scrollStrategy","_overlayRef","create","dispose","isDirectionLtr","originX","originY","_a","_invertPosition","x","y","isLtr","overlayX","overlayY","_markForCheck","onMicrotaskEmpty","asObservable","pipe","take","updatePosition","tooltipClass","type","Directive","args","selector","exportAs","host","(longpress)","(keydown)","(touchend)","ElementRef","ScrollDispatcher","ViewContainerRef","NgZone","Platform","AriaDescriber","FocusMonitor","undefined","decorators","Inject","Directionality","Optional","Input","_positionDeprecated","_changeDetectorRef","_breakpointObserver","_visibility","_closeOnInteraction","_transformOrigin","_onHide","Subject","_isHandset","observe","Breakpoints","Handset","_hideTimeoutId","clearTimeout","_showTimeoutId","setTimeout","overlayPosition","axis","_animationStart","_animationDone","toState","next","_handleBodyInteraction","markForCheck","Component","template","styles","encapsulation","ViewEncapsulation","None","preserveWhitespaces","changeDetection","ChangeDetectionStrategy","OnPush","animations","aria-hidden","ɵ0","NgModule","imports","CommonModule","OverlayModule","MatCommonModule","PlatformModule","A11yModule","LayoutModule","exports","declarations","entryComponents","providers","ARIA_DESCRIBER_PROVIDER","useValue","MatTooltipModule"],"mappings":"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"}
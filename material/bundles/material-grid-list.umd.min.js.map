{"version":3,"file":"material-grid-list.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Converts values into strings. Falsy values become empty strings.\r\n * @docs-private\r\n */\r\nexport function coerceToString(value: string | number): string {\r\n  return `${value || ''}`;\r\n}\r\n\r\n/**\r\n * Converts a value that might be a string into a number.\r\n * @docs-private\r\n */\r\nexport function coerceToNumber(value: string | number): number {\r\n  return typeof value === 'string' ? parseInt(value, 10) : value;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {MatGridList} from './grid-list';\r\nimport {MatGridTile} from './grid-tile';\r\nimport {TileCoordinator} from './tile-coordinator';\r\n\r\n/**\r\n * Sets the style properties for an individual tile, given the position calculated by the\r\n * Tile Coordinator.\r\n * @docs-private\r\n */\r\nexport abstract class TileStyler {\r\n  _gutterSize: string;\r\n  _rows: number = 0;\r\n  _rowspan: number = 0;\r\n  _cols: number;\r\n  _direction: string;\r\n\r\n  /**\r\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\r\n   * because these properties haven't been calculated by that point.\r\n   *\r\n   * @param gutterSize Size of the grid's gutter.\r\n   * @param tracker Instance of the TileCoordinator.\r\n   * @param cols Amount of columns in the grid.\r\n   * @param direction Layout direction of the grid.\r\n   */\r\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\r\n    this._gutterSize = normalizeUnits(gutterSize);\r\n    this._rows = tracker.rowCount;\r\n    this._rowspan = tracker.rowspan;\r\n    this._cols = cols;\r\n    this._direction = direction;\r\n  }\r\n\r\n  /**\r\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\r\n   * Used as a basis for other calculations.\r\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\r\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\r\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\r\n   */\r\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\r\n    // Take the base size percent (as would be if evenly dividing the size between cells),\r\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\r\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\r\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\r\n    // edge evenly among the cells).\r\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\r\n  }\r\n\r\n\r\n  /**\r\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\r\n   * @param offset Number of tiles that have already been rendered in the row/column.\r\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\r\n   * @return Position of the tile as a CSS calc() expression.\r\n   */\r\n  getTilePosition(baseSize: string, offset: number): string {\r\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\r\n    // row/column (offset).\r\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\r\n  }\r\n\r\n\r\n  /**\r\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\r\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\r\n   * @param span The tile's rowspan or colspan.\r\n   * @return Size of the tile as a CSS calc() expression.\r\n   */\r\n  getTileSize(baseSize: string, span: number): string {\r\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\r\n  }\r\n\r\n\r\n  /**\r\n   * Sets the style properties to be applied to a tile for the given row and column index.\r\n   * @param tile Tile to which to apply the styling.\r\n   * @param rowIndex Index of the tile's row.\r\n   * @param colIndex Index of the tile's column.\r\n   */\r\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\r\n    // Percent of the available horizontal space that one column takes up.\r\n    let percentWidthPerTile = 100 / this._cols;\r\n\r\n    // Fraction of the vertical gutter size that each column takes up.\r\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\r\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\r\n\r\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\r\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\r\n  }\r\n\r\n  /** Sets the horizontal placement of the tile in the list. */\r\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\r\n               gutterWidth: number) {\r\n    // Base horizontal size of a column.\r\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\r\n\r\n    // The width and horizontal position of each tile is always calculated the same way, but the\r\n    // height and vertical position depends on the rowMode.\r\n    let side = this._direction === 'rtl' ? 'right' : 'left';\r\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\r\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\r\n  }\r\n\r\n  /**\r\n   * Calculates the total size taken up by gutters across one axis of a list.\r\n   */\r\n  getGutterSpan(): string {\r\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\r\n  }\r\n\r\n  /**\r\n   * Calculates the total size taken up by tiles across one axis of a list.\r\n   * @param tileHeight Height of the tile.\r\n   */\r\n  getTileSpan(tileHeight: string): string {\r\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\r\n  }\r\n\r\n  /**\r\n   * Sets the vertical placement of the tile in the list.\r\n   * This method will be implemented by each type of TileStyler.\r\n   * @docs-private\r\n   */\r\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\r\n                        gutterWidth: number);\r\n\r\n  /**\r\n   * Calculates the computed height and returns the correct style property to set.\r\n   * This method can be implemented by each type of TileStyler.\r\n   * @docs-private\r\n   */\r\n  getComputedHeight(): [string, string] | null { return null; }\r\n\r\n  /**\r\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\r\n   * @param list Grid list that the styler was attached to.\r\n   * @docs-private\r\n   */\r\n  abstract reset(list: MatGridList);\r\n}\r\n\r\n\r\n/**\r\n * This type of styler is instantiated when the user passes in a fixed row height.\r\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\r\n * @docs-private\r\n */\r\nexport class FixedTileStyler extends TileStyler {\r\n\r\n  constructor(public fixedRowHeight: string) { super(); }\r\n\r\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\r\n    super.init(gutterSize, tracker, cols, direction);\r\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\r\n  }\r\n\r\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\r\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\r\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\r\n  }\r\n\r\n  getComputedHeight(): [string, string] {\r\n    return [\r\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\r\n    ];\r\n  }\r\n\r\n  reset(list: MatGridList) {\r\n    list._setListStyle(['height', null]);\r\n\r\n    list._tiles.forEach(tile => {\r\n      tile._setStyle('top', null);\r\n      tile._setStyle('height', null);\r\n    });\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * This type of styler is instantiated when the user passes in a width:height ratio\r\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\r\n * @docs-private\r\n */\r\nexport class RatioTileStyler extends TileStyler {\r\n\r\n  /** Ratio width:height given by user to determine row height. */\r\n  rowHeightRatio: number;\r\n  baseTileHeight: string;\r\n\r\n  constructor(value: string) {\r\n    super();\r\n    this._parseRatio(value);\r\n  }\r\n\r\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\r\n               gutterWidth: number): void {\r\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\r\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\r\n\r\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\r\n    // a percentage-based value for these properties is applied versus the *width* of the\r\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\r\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\r\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\r\n  }\r\n\r\n  getComputedHeight(): [string, string] {\r\n    return [\r\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\r\n    ];\r\n  }\r\n\r\n  reset(list: MatGridList) {\r\n    list._setListStyle(['paddingBottom', null]);\r\n\r\n    list._tiles.forEach(tile => {\r\n      tile._setStyle('marginTop', null);\r\n      tile._setStyle('paddingTop', null);\r\n    });\r\n  }\r\n\r\n  private _parseRatio(value: string): void {\r\n    const ratioParts = value.split(':');\r\n\r\n    if (ratioParts.length !== 2) {\r\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\r\n    }\r\n\r\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\r\n  }\r\n}\r\n\r\n/**\r\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\r\n * In other words, the row height will reflect the total height of the container divided\r\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\r\n *\r\n * @docs-private\r\n */\r\nexport class FitTileStyler extends TileStyler {\r\n\r\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\r\n    // Percent of the available vertical space that one row takes up.\r\n    let percentHeightPerTile = 100 / this._rowspan;\r\n\r\n    // Fraction of the horizontal gutter size that each column takes up.\r\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\r\n\r\n    // Base vertical size of a column.\r\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\r\n\r\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\r\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\r\n  }\r\n\r\n  reset(list: MatGridList) {\r\n    list._tiles.forEach(tile => {\r\n      tile._setStyle('top', null);\r\n      tile._setStyle('height', null);\r\n    });\r\n  }\r\n}\r\n\r\n\r\n/** Wraps a CSS string in a calc function */\r\nfunction calc(exp: string): string { return `calc(${exp})`; }\r\n\r\n\r\n/** Appends pixels to a CSS string if no units are given. */\r\nfunction normalizeUnits(value: string): string {\r\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\r\n}\r\n\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  Component,\r\n  ViewEncapsulation,\r\n  ElementRef,\r\n  Input,\r\n  ContentChildren,\r\n  QueryList,\r\n  AfterContentInit,\r\n  Directive,\r\n  ChangeDetectionStrategy,\r\n} from '@angular/core';\r\nimport {MatLine, MatLineSetter} from '@angular/material/core';\r\nimport {coerceToNumber} from './grid-list-measure';\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-grid-tile',\r\n  exportAs: 'matGridTile',\r\n  host: {\r\n    'class': 'mat-grid-tile',\r\n  },\r\n  templateUrl: 'grid-tile.html',\r\n  styleUrls: ['grid-list.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatGridTile {\r\n  _rowspan: number = 1;\r\n  _colspan: number = 1;\r\n\r\n  constructor(private _element: ElementRef) {}\r\n\r\n  /** Amount of rows that the grid tile takes up. */\r\n  @Input()\r\n  get rowspan(): number { return this._rowspan; }\r\n  set rowspan(value: number) { this._rowspan = coerceToNumber(value); }\r\n\r\n  /** Amount of columns that the grid tile takes up. */\r\n  @Input()\r\n  get colspan(): number { return this._colspan; }\r\n  set colspan(value: number) { this._colspan = coerceToNumber(value); }\r\n\r\n  /**\r\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\r\n   * \"Changed after checked\" errors that would occur with HostBinding.\r\n   */\r\n  _setStyle(property: string, value: any): void {\r\n    this._element.nativeElement.style[property] = value;\r\n  }\r\n}\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\r\n  templateUrl: 'grid-tile-text.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n})\r\nexport class MatGridTileText implements AfterContentInit {\r\n  /**\r\n   *  Helper that watches the number of lines in a text area and sets\r\n   * a class on the host element that matches the line count.\r\n   */\r\n  _lineSetter: MatLineSetter;\r\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\r\n\r\n  constructor(private _element: ElementRef) {}\r\n\r\n  ngAfterContentInit() {\r\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\r\n  }\r\n}\r\n\r\n/**\r\n * Directive whose purpose is to add the mat- CSS styling to this selector.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: '[mat-grid-avatar], [matGridAvatar]',\r\n  host: {'class': 'mat-grid-avatar'}\r\n})\r\nexport class MatGridAvatarCssMatStyler {}\r\n\r\n/**\r\n * Directive whose purpose is to add the mat- CSS styling to this selector.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: 'mat-grid-tile-header',\r\n  host: {'class': 'mat-grid-tile-header'}\r\n})\r\nexport class MatGridTileHeaderCssMatStyler {}\r\n\r\n/**\r\n * Directive whose purpose is to add the mat- CSS styling to this selector.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: 'mat-grid-tile-footer',\r\n  host: {'class': 'mat-grid-tile-footer'}\r\n})\r\nexport class MatGridTileFooterCssMatStyler {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {QueryList} from '@angular/core';\r\nimport {MatGridTile} from './grid-tile';\r\n\r\n/**\r\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\r\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\r\n * because the tiles can have a rowspan.\r\n *\r\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\r\n * large enough to accommodate it so that the tiles still render in the same order in which they\r\n * are given.\r\n *\r\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\r\n * element of the array corresponds to a column, and the value indicates how many cells in that\r\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\r\n * decrements each value in the tracking array (indicating that the column is one cell closer to\r\n * being free).\r\n *\r\n * @docs-private\r\n */\r\nexport class TileCoordinator {\r\n  /** Tracking array (see class description). */\r\n  tracker: number[];\r\n\r\n  /** Index at which the search for the next gap will start. */\r\n  columnIndex: number = 0;\r\n\r\n  /** The current row index. */\r\n  rowIndex: number = 0;\r\n\r\n  /** Gets the total number of rows occupied by tiles */\r\n  get rowCount(): number { return this.rowIndex + 1; }\r\n\r\n  /**\r\n   * Gets the total span of rows occupied by tiles.\r\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\r\n   */\r\n  get rowspan() {\r\n    let lastRowMax = Math.max(...this.tracker);\r\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\r\n    // add the difference to the rowcount\r\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\r\n  }\r\n\r\n  /** The computed (row, col) position of each tile (the output). */\r\n  positions: TilePosition[];\r\n\r\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\r\n    this.tracker = new Array(numColumns);\r\n    this.tracker.fill(0, 0, this.tracker.length);\r\n\r\n    this.positions = tiles.map(tile => this._trackTile(tile));\r\n  }\r\n\r\n  /** Calculates the row and col position of a tile. */\r\n  private _trackTile(tile: MatGridTile): TilePosition {\r\n    // Find a gap large enough for this tile.\r\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\r\n\r\n    // Place tile in the resulting gap.\r\n    this._markTilePosition(gapStartIndex, tile);\r\n\r\n    // The next time we look for a gap, the search will start at columnIndex, which should be\r\n    // immediately after the tile that has just been placed.\r\n    this.columnIndex = gapStartIndex + tile.colspan;\r\n\r\n    return new TilePosition(this.rowIndex, gapStartIndex);\r\n  }\r\n\r\n  /** Finds the next available space large enough to fit the tile. */\r\n  private _findMatchingGap(tileCols: number): number {\r\n    if (tileCols > this.tracker.length) {\r\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\r\n                      `grid with cols=\"${this.tracker.length}\".`);\r\n    }\r\n\r\n    // Start index is inclusive, end index is exclusive.\r\n    let gapStartIndex = -1;\r\n    let gapEndIndex = -1;\r\n\r\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\r\n    do {\r\n      // If we've reached the end of the row, go to the next row.\r\n      if (this.columnIndex + tileCols > this.tracker.length) {\r\n        this._nextRow();\r\n        continue;\r\n      }\r\n\r\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\r\n\r\n      // If there are no more empty spaces in this row at all, move on to the next row.\r\n      if (gapStartIndex == -1) {\r\n        this._nextRow();\r\n        continue;\r\n      }\r\n\r\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\r\n\r\n      // If a gap large enough isn't found, we want to start looking immediately after the current\r\n      // gap on the next iteration.\r\n      this.columnIndex = gapStartIndex + 1;\r\n\r\n      // Continue iterating until we find a gap wide enough for this tile.\r\n    } while (gapEndIndex - gapStartIndex < tileCols);\r\n\r\n    // If we still didn't manage to find a gap, ensure that the index is\r\n    // at least zero so the tile doesn't get pulled out of the grid.\r\n    return Math.max(gapStartIndex, 0);\r\n  }\r\n\r\n  /** Move \"down\" to the next row. */\r\n  private _nextRow(): void {\r\n    this.columnIndex = 0;\r\n    this.rowIndex++;\r\n\r\n    // Decrement all spaces by one to reflect moving down one row.\r\n    for (let i = 0; i < this.tracker.length; i++) {\r\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\r\n   * The gap ends when a non-zero value is found.\r\n   */\r\n  private _findGapEndIndex(gapStartIndex: number): number {\r\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\r\n      if (this.tracker[i] != 0) {\r\n        return i;\r\n      }\r\n    }\r\n\r\n    // The gap ends with the end of the row.\r\n    return this.tracker.length;\r\n  }\r\n\r\n  /** Update the tile tracker to account for the given tile in the given space. */\r\n  private _markTilePosition(start: number, tile: MatGridTile): void {\r\n    for (let i = 0; i < tile.colspan; i++) {\r\n      this.tracker[start + i] = tile.rowspan;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Simple data structure for tile position (row, col).\r\n * @docs-private\r\n */\r\nexport class TilePosition {\r\n  constructor(public row: number, public col: number) {}\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  Component,\r\n  ViewEncapsulation,\r\n  AfterContentChecked,\r\n  OnInit,\r\n  Input,\r\n  ContentChildren,\r\n  QueryList,\r\n  ElementRef,\r\n  Optional,\r\n  ChangeDetectionStrategy,\r\n} from '@angular/core';\r\nimport {MatGridTile} from './grid-tile';\r\nimport {TileCoordinator} from './tile-coordinator';\r\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {\r\n  coerceToString,\r\n  coerceToNumber,\r\n} from './grid-list-measure';\r\n\r\n\r\n// TODO(kara): Conditional (responsive) column count / row size.\r\n// TODO(kara): Re-layout on window resize / media change (debounced).\r\n// TODO(kara): gridTileHeader and gridTileFooter.\r\n\r\nconst MAT_FIT_MODE = 'fit';\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-grid-list',\r\n  exportAs: 'matGridList',\r\n  templateUrl: 'grid-list.html',\r\n  styleUrls: ['grid-list.css'],\r\n  host: {\r\n    'class': 'mat-grid-list',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n})\r\nexport class MatGridList implements OnInit, AfterContentChecked {\r\n  /** Number of columns being rendered. */\r\n  private _cols: number;\r\n\r\n  /**\r\n   * Row height value passed in by user. This can be one of three types:\r\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\r\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\r\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\r\n   */\r\n  private _rowHeight: string;\r\n\r\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\r\n  private _gutter: string = '1px';\r\n\r\n  /** Sets position and size styles for a tile */\r\n  private _tileStyler: TileStyler;\r\n\r\n  /** Query list of tiles that are being rendered. */\r\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\r\n\r\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\r\n\r\n  /** Amount of columns in the grid list. */\r\n  @Input()\r\n  get cols(): number { return this._cols; }\r\n  set cols(value: number) { this._cols = coerceToNumber(value); }\r\n\r\n  /** Size of the grid list's gutter in pixels. */\r\n  @Input()\r\n  get gutterSize(): string { return this._gutter; }\r\n  set gutterSize(value: string) { this._gutter = coerceToString(value); }\r\n\r\n  /** Set internal representation of row height from the user-provided value. */\r\n  @Input()\r\n  set rowHeight(value: string | number) {\r\n    const newValue = coerceToString(value);\r\n\r\n    if (newValue !== this._rowHeight) {\r\n      this._rowHeight = newValue;\r\n      this._setTileStyler(this._rowHeight);\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    this._checkCols();\r\n    this._checkRowHeight();\r\n  }\r\n\r\n  /**\r\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\r\n   * to run it frequently.\r\n   */\r\n  ngAfterContentChecked() {\r\n    this._layoutTiles();\r\n  }\r\n\r\n  /** Throw a friendly error if cols property is missing */\r\n  private _checkCols() {\r\n    if (!this.cols) {\r\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\r\n                  `Example: <mat-grid-list cols=\"3\">`);\r\n    }\r\n  }\r\n\r\n  /** Default to equal width:height if rowHeight property is missing */\r\n  private _checkRowHeight(): void {\r\n    if (!this._rowHeight) {\r\n      this._setTileStyler('1:1');\r\n    }\r\n  }\r\n\r\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\r\n  private _setTileStyler(rowHeight: string): void {\r\n    if (this._tileStyler) {\r\n      this._tileStyler.reset(this);\r\n    }\r\n\r\n    if (rowHeight === MAT_FIT_MODE) {\r\n      this._tileStyler = new FitTileStyler();\r\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\r\n      this._tileStyler = new RatioTileStyler(rowHeight);\r\n    } else {\r\n      this._tileStyler = new FixedTileStyler(rowHeight);\r\n    }\r\n  }\r\n\r\n  /** Computes and applies the size and position for all children grid tiles. */\r\n  private _layoutTiles(): void {\r\n    const tracker = new TileCoordinator(this.cols, this._tiles);\r\n    const direction = this._dir ? this._dir.value : 'ltr';\r\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\r\n\r\n    this._tiles.forEach((tile, index) => {\r\n      const pos = tracker.positions[index];\r\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\r\n    });\r\n\r\n    this._setListStyle(this._tileStyler.getComputedHeight());\r\n  }\r\n\r\n  /** Sets style on the main grid-list element, given the style name and value. */\r\n  _setListStyle(style: [string, string | null] | null): void {\r\n    if (style) {\r\n      this._element.nativeElement.style[style[0]] = style[1];\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\r\nimport {\r\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\r\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\r\n} from './grid-tile';\r\nimport {MatGridList} from './grid-list';\r\n\r\n\r\n@NgModule({\r\n  imports: [MatLineModule, MatCommonModule],\r\n  exports: [\r\n    MatGridList,\r\n    MatGridTile,\r\n    MatGridTileText,\r\n    MatLineModule,\r\n    MatCommonModule,\r\n    MatGridTileHeaderCssMatStyler,\r\n    MatGridTileFooterCssMatStyler,\r\n    MatGridAvatarCssMatStyler\r\n  ],\r\n  declarations: [\r\n    MatGridList,\r\n    MatGridTile,\r\n    MatGridTileText,\r\n    MatGridTileHeaderCssMatStyler,\r\n    MatGridTileFooterCssMatStyler,\r\n    MatGridAvatarCssMatStyler\r\n  ],\r\n})\r\nexport class MatGridListModule {}\r\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","coerceToString","value","coerceToNumber","parseInt","calc","exp","normalizeUnits","match","setPrototypeOf","__proto__","Array","p","hasOwnProperty","MatGridTile","_element","_rowspan","_colspan","defineProperty","_setStyle","property","nativeElement","style","type","Component","args","selector","exportAs","host","class","template","styles","encapsulation","ViewEncapsulation","None","preserveWhitespaces","changeDetection","ChangeDetectionStrategy","OnPush","propDecorators","MatGridTileText","decorators","ctorParameters","ElementRef","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","_this","columnIndex","rowIndex","tracker","fill","length","positions","map","tile","_trackTile","lastRowMax","Math","max","apply","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","Error","gapEndIndex","_nextRow","indexOf","_findGapEndIndex","i","start","rowspan","row","col","TileStyler","_rows","init","gutterSize","cols","direction","_gutterSize","_cols","_direction","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","offset","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","_super","fixedRowHeight","call","tslib_1.__extends","reset","list","_setListStyle","_tiles","forEach","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","split","parseFloat","FitTileStyler","gutterHeightPerTile","MatGridList","_dir","_gutter","newValue","_rowHeight","_setTileStyler","ngOnInit","_checkCols","_checkRowHeight","ngAfterContentChecked","_layoutTiles","rowHeight","_tileStyler","index","pos","Input","MatGridListModule","NgModule","imports","MatLineModule","MatCommonModule","exports","declarations"],"mappings":"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"}
{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-content.ts","../../src/lib/list/list.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {ViewportRuler} from '@angular/cdk/scrolling';\r\nimport {\r\n  AfterContentInit,\r\n  Attribute,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChildren,\r\n  Directive,\r\n  ElementRef,\r\n  forwardRef,\r\n  Inject,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Optional,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {\r\n  CanColor,\r\n  CanDisable,\r\n  CanDisableRipple,\r\n  HasTabIndex,\r\n  MAT_RIPPLE_GLOBAL_OPTIONS,\r\n  mixinColor,\r\n  mixinDisabled,\r\n  mixinDisableRipple,\r\n  mixinTabIndex, RippleConfig,\r\n  RippleGlobalOptions,\r\n  RippleRenderer,\r\n  RippleTarget,\r\n  ThemePalette,\r\n} from '@angular/material/core';\r\nimport {merge} from 'rxjs/observable/merge';\r\nimport {of as observableOf} from 'rxjs/observable/of';\r\nimport {takeUntil} from 'rxjs/operators/takeUntil';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {MatInkBar} from '../ink-bar';\r\n\r\n\r\n// Boilerplate for applying mixins to MatTabNav.\r\n/** @docs-private */\r\nexport class MatTabNavBase {\r\n  constructor(public _elementRef: ElementRef) {}\r\n}\r\nexport const _MatTabNavMixinBase = mixinColor(MatTabNavBase, 'primary');\r\n\r\n/**\r\n * Navigation component matching the styles of the tab group header.\r\n * Provides anchored navigation with animated ink bar.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: '[mat-tab-nav-bar]',\r\n  exportAs: 'matTabNavBar, matTabNav',\r\n  inputs: ['color'],\r\n  templateUrl: 'tab-nav-bar.html',\r\n  styleUrls: ['tab-nav-bar.css'],\r\n  host: {'class': 'mat-tab-nav-bar'},\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatTabNav extends _MatTabNavMixinBase implements AfterContentInit, CanColor,\r\n    OnDestroy {\r\n\r\n  /** Subject that emits when the component has been destroyed. */\r\n  private readonly _onDestroy = new Subject<void>();\r\n\r\n  _activeLinkChanged: boolean;\r\n  _activeLinkElement: ElementRef;\r\n\r\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\r\n\r\n  /** Query list of all tab links of the tab navigation. */\r\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\r\n  _tabLinks: QueryList<MatTabLink>;\r\n\r\n  /** Background color of the tab nav. */\r\n  @Input()\r\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\r\n  set backgroundColor(value: ThemePalette) {\r\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\r\n\r\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\r\n\r\n    if (value) {\r\n      nativeElement.classList.add(`mat-background-${value}`);\r\n    }\r\n\r\n    this._backgroundColor = value;\r\n  }\r\n  private _backgroundColor: ThemePalette;\r\n\r\n  /** Whether ripples should be disabled for all links or not. */\r\n  @Input()\r\n  get disableRipple() { return this._disableRipple; }\r\n  set disableRipple(value: boolean) {\r\n    this._disableRipple = coerceBooleanProperty(value);\r\n    this._setLinkDisableRipple();\r\n  }\r\n  private _disableRipple: boolean = false;\r\n\r\n  constructor(elementRef: ElementRef,\r\n              @Optional() private _dir: Directionality,\r\n              private _ngZone: NgZone,\r\n              private _changeDetectorRef: ChangeDetectorRef,\r\n              private _viewportRuler: ViewportRuler) {\r\n    super(elementRef);\r\n  }\r\n\r\n  /** Notifies the component that the active link has been changed. */\r\n  updateActiveLink(element: ElementRef) {\r\n    this._activeLinkChanged = this._activeLinkElement != element;\r\n    this._activeLinkElement = element;\r\n\r\n    if (this._activeLinkChanged) {\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\r\n\r\n  ngAfterContentInit(): void {\r\n    this._ngZone.runOutsideAngular(() => {\r\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\r\n\r\n      return merge(dirChange, this._viewportRuler.change(10)).pipe(takeUntil(this._onDestroy))\r\n          .subscribe(() => this._alignInkBar());\r\n    });\r\n\r\n    this._setLinkDisableRipple();\r\n  }\r\n\r\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\r\n  ngAfterContentChecked(): void {\r\n    if (this._activeLinkChanged) {\r\n      this._alignInkBar();\r\n      this._activeLinkChanged = false;\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._onDestroy.next();\r\n    this._onDestroy.complete();\r\n  }\r\n\r\n  /** Aligns the ink bar to the active link. */\r\n  _alignInkBar(): void {\r\n    if (this._activeLinkElement) {\r\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\r\n    }\r\n  }\r\n\r\n  /** Sets the `disableRipple` property on each link of the navigation bar. */\r\n  private _setLinkDisableRipple() {\r\n    if (this._tabLinks) {\r\n      this._tabLinks.forEach(link => link.disableRipple = this.disableRipple);\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// Boilerplate for applying mixins to MatTabLink.\r\nexport class MatTabLinkBase {}\r\nexport const _MatTabLinkMixinBase =\r\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\r\n\r\n/**\r\n * Link inside of a `mat-tab-nav-bar`.\r\n */\r\n@Directive({\r\n  selector: '[mat-tab-link], [matTabLink]',\r\n  exportAs: 'matTabLink',\r\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\r\n  host: {\r\n    'class': 'mat-tab-link',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n    '[attr.tabIndex]': 'tabIndex',\r\n    '[class.mat-tab-disabled]': 'disabled',\r\n    '[class.mat-tab-label-active]': 'active',\r\n    '(click)': '_handleClick($event)'\r\n  }\r\n})\r\nexport class MatTabLink extends _MatTabLinkMixinBase\r\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\r\n\r\n  /** Whether the tab link is active or not. */\r\n  private _isActive: boolean = false;\r\n\r\n  /** Reference to the RippleRenderer for the tab-link. */\r\n  private _tabLinkRipple: RippleRenderer;\r\n\r\n  /** Whether the link is active. */\r\n  @Input()\r\n  get active(): boolean { return this._isActive; }\r\n  set active(value: boolean) {\r\n    this._isActive = value;\r\n    if (value) {\r\n      this._tabNavBar.updateActiveLink(this._elementRef);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ripple configuration for ripples that are launched on pointer down.\r\n   * @docs-private\r\n   */\r\n  rippleConfig: RippleConfig = {};\r\n\r\n  /**\r\n   * Whether ripples are disabled on interaction\r\n   * @docs-private\r\n   */\r\n  get rippleDisabled(): boolean {\r\n    return this.disabled || this.disableRipple;\r\n  }\r\n\r\n  constructor(private _tabNavBar: MatTabNav,\r\n              private _elementRef: ElementRef,\r\n              ngZone: NgZone,\r\n              platform: Platform,\r\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\r\n              @Attribute('tabindex') tabIndex: string) {\r\n    super();\r\n\r\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\r\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\r\n\r\n    this.tabIndex = parseInt(tabIndex) || 0;\r\n\r\n    if (globalOptions) {\r\n      this.rippleConfig = {\r\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\r\n        speedFactor: globalOptions.baseSpeedFactor,\r\n        animation: globalOptions.animation,\r\n      };\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._tabLinkRipple._removeTriggerEvents();\r\n  }\r\n\r\n  /**\r\n   * Handles the click event, preventing default navigation if the tab link is disabled.\r\n   */\r\n  _handleClick(event: MouseEvent) {\r\n    if (this.disabled) {\r\n      event.preventDefault();\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ObserversModule} from '@angular/cdk/observers';\r\nimport {PortalModule} from '@angular/cdk/portal';\r\nimport {ScrollDispatchModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\r\nimport {MatInkBar} from './ink-bar';\r\nimport {MatTab} from './tab';\r\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\r\nimport {MatTabGroup} from './tab-group';\r\nimport {MatTabHeader} from './tab-header';\r\nimport {MatTabLabel} from './tab-label';\r\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\r\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatCommonModule,\r\n    PortalModule,\r\n    MatRippleModule,\r\n    ObserversModule,\r\n    ScrollDispatchModule,\r\n  ],\r\n  // Don't export all components because some are only to be used internally.\r\n  exports: [\r\n    MatCommonModule,\r\n    MatTabGroup,\r\n    MatTabLabel,\r\n    MatTab,\r\n    MatTabNav,\r\n    MatTabLink,\r\n  ],\r\n  declarations: [\r\n    MatTabGroup,\r\n    MatTabLabel,\r\n    MatTab,\r\n    MatInkBar,\r\n    MatTabLabelWrapper,\r\n    MatTabNav,\r\n    MatTabLink,\r\n    MatTabBody,\r\n    MatTabBodyPortal,\r\n    MatTabHeader\r\n  ],\r\n  providers: [VIEWPORT_RULER_PROVIDER],\r\n})\r\nexport class MatTabsModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ContentChildren,\r\n  Directive,\r\n  ElementRef,\r\n  isDevMode,\r\n  QueryList,\r\n  ViewEncapsulation,\r\n  Inject,\r\n} from '@angular/core';\r\nimport {CanColor, mixinColor} from '@angular/material/core';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {DOCUMENT} from '@angular/common';\r\n\r\n// Boilerplate for applying mixins to MatToolbar.\r\n/** @docs-private */\r\nexport class MatToolbarBase {\r\n  constructor(public _elementRef: ElementRef) {}\r\n}\r\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\r\n\r\n@Directive({\r\n  selector: 'mat-toolbar-row',\r\n  exportAs: 'matToolbarRow',\r\n  host: {'class': 'mat-toolbar-row'},\r\n})\r\nexport class MatToolbarRow {}\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-toolbar',\r\n  exportAs: 'matToolbar',\r\n  templateUrl: 'toolbar.html',\r\n  styleUrls: ['toolbar.css'],\r\n  inputs: ['color'],\r\n  host: {\r\n    'class': 'mat-toolbar',\r\n    '[class.mat-toolbar-multiple-rows]': 'this._toolbarRows.length',\r\n    '[class.mat-toolbar-single-row]': '!this._toolbarRows.length'\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n})\r\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\r\n  private _document: Document;\r\n\r\n  /** Reference to all toolbar row elements that have been projected. */\r\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\r\n\r\n  constructor(\r\n    elementRef: ElementRef,\r\n    private _platform: Platform,\r\n    @Inject(DOCUMENT) document?: any) {\r\n    super(elementRef);\r\n\r\n    // TODO: make the document a required param when doing breaking changes.\r\n    this._document = document;\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    if (!isDevMode() || !this._platform.isBrowser) {\r\n      return;\r\n    }\r\n\r\n    this._checkToolbarMixedModes();\r\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\r\n  }\r\n\r\n  /**\r\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\r\n   */\r\n  private _checkToolbarMixedModes() {\r\n    if (!this._toolbarRows.length) {\r\n      return;\r\n    }\r\n\r\n    // Check if there are any other DOM nodes that can display content but aren't inside of\r\n    // a <mat-toolbar-row> element.\r\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\r\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\r\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\r\n      .some(node => node.textContent.trim());\r\n\r\n    if (isCombinedUsage) {\r\n      throwToolbarMixedModesError();\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Throws an exception when attempting to combine the different toolbar row modes.\r\n * @docs-private\r\n */\r\nexport function throwToolbarMixedModesError() {\r\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\r\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\r\n    'inside of a `<mat-toolbar>` for a single row.');\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {MatCommonModule} from '@angular/material/core';\r\nimport {PlatformModule} from '@angular/cdk/platform';\r\nimport {MatToolbar, MatToolbarRow} from './toolbar';\r\n\r\n@NgModule({\r\n  imports: [MatCommonModule, PlatformModule],\r\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\r\n  declarations: [MatToolbar, MatToolbarRow],\r\n})\r\nexport class MatToolbarModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Version} from '@angular/core';\r\n\r\n/** Current version of Angular Material. */\r\nexport const VERSION = new Version('5.2.5');\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {DOWN_ARROW, ENTER, ESCAPE, UP_ARROW, TAB} from '@angular/cdk/keycodes';\r\nimport {\r\n  ConnectedPositionStrategy,\r\n  Overlay,\r\n  OverlayRef,\r\n  OverlayConfig,\r\n  PositionStrategy,\r\n  ScrollStrategy,\r\n} from '@angular/cdk/overlay';\r\nimport {TemplatePortal} from '@angular/cdk/portal';\r\nimport {filter} from 'rxjs/operators/filter';\r\nimport {take} from 'rxjs/operators/take';\r\nimport {switchMap} from 'rxjs/operators/switchMap';\r\nimport {tap} from 'rxjs/operators/tap';\r\nimport {delay} from 'rxjs/operators/delay';\r\nimport {\r\n  ChangeDetectorRef,\r\n  Directive,\r\n  ElementRef,\r\n  forwardRef,\r\n  Host,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Optional,\r\n  ViewContainerRef,\r\n} from '@angular/core';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {\r\n  MatOption,\r\n  MatOptionSelectionChange,\r\n  _getOptionScrollPosition,\r\n  _countGroupLabelsBeforeOption,\r\n} from '@angular/material/core';\r\nimport {MatFormField} from '@angular/material/form-field';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {defer} from 'rxjs/observable/defer';\r\nimport {fromEvent} from 'rxjs/observable/fromEvent';\r\nimport {merge} from 'rxjs/observable/merge';\r\nimport {of as observableOf} from 'rxjs/observable/of';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {MatAutocomplete} from './autocomplete';\r\n\r\n\r\n/**\r\n * The following style constants are necessary to save here in order\r\n * to properly calculate the scrollTop of the panel. Because we are not\r\n * actually focusing the active item, scroll must be handled manually.\r\n */\r\n\r\n/** The height of each autocomplete option. */\r\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\r\n\r\n/** The total height of the autocomplete panel. */\r\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\r\n\r\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\r\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\r\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\r\n\r\n/** @docs-private */\r\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\r\n    () => ScrollStrategy {\r\n  return () => overlay.scrollStrategies.reposition();\r\n}\r\n\r\n/** @docs-private */\r\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER = {\r\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\r\n  deps: [Overlay],\r\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,\r\n};\r\n\r\n/**\r\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\r\n * @docs-private\r\n */\r\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\r\n  multi: true\r\n};\r\n\r\n/**\r\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\r\n */\r\nexport function getMatAutocompleteMissingPanelError(): Error {\r\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\r\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\r\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\r\n}\r\n\r\n@Directive({\r\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\r\n  host: {\r\n    'role': 'combobox',\r\n    'autocomplete': 'off',\r\n    'aria-autocomplete': 'list',\r\n    '[attr.aria-activedescendant]': 'activeOption?.id',\r\n    '[attr.aria-expanded]': 'panelOpen.toString()',\r\n    '[attr.aria-owns]': 'autocomplete?.id',\r\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\r\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\r\n    '(focusin)': '_handleFocus()',\r\n    '(blur)': '_onTouched()',\r\n    '(input)': '_handleInput($event)',\r\n    '(keydown)': '_handleKeydown($event)',\r\n  },\r\n  exportAs: 'matAutocompleteTrigger',\r\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\r\n})\r\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\r\n  private _overlayRef: OverlayRef | null;\r\n  private _portal: TemplatePortal;\r\n  private _componentDestroyed = false;\r\n\r\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\r\n  private _previousValue: string | number | null;\r\n\r\n  /** Strategy that is used to position the panel. */\r\n  private _positionStrategy: ConnectedPositionStrategy;\r\n\r\n  /** Whether or not the label state is being overridden. */\r\n  private _manuallyFloatingLabel = false;\r\n\r\n  /** The subscription for closing actions (some are bound to document). */\r\n  private _closingActionsSubscription: Subscription;\r\n\r\n  /** Stream of keyboard events that can close the panel. */\r\n  private readonly _closeKeyEventStream = new Subject<void>();\r\n\r\n  /** `View -> model callback called when value changes` */\r\n  _onChange: (value: any) => void = () => {};\r\n\r\n  /** `View -> model callback called when autocomplete has been touched` */\r\n  _onTouched = () => {};\r\n\r\n  /** The autocomplete panel to be attached to this trigger. */\r\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\r\n\r\n  constructor(private _element: ElementRef, private _overlay: Overlay,\r\n              private _viewContainerRef: ViewContainerRef,\r\n              private _zone: NgZone,\r\n              private _changeDetectorRef: ChangeDetectorRef,\r\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\r\n              @Optional() private _dir: Directionality,\r\n              @Optional() @Host() private _formField: MatFormField,\r\n              @Optional() @Inject(DOCUMENT) private _document: any) {}\r\n\r\n  ngOnDestroy() {\r\n    this._componentDestroyed = true;\r\n    this._destroyPanel();\r\n    this._closeKeyEventStream.complete();\r\n  }\r\n\r\n  /** Whether or not the autocomplete panel is open. */\r\n  get panelOpen(): boolean { return this._panelOpen && this.autocomplete.showPanel; }\r\n  private _panelOpen: boolean = false;\r\n\r\n  /** Opens the autocomplete suggestion panel. */\r\n  openPanel(): void {\r\n    this._attachOverlay();\r\n    this._floatLabel();\r\n  }\r\n\r\n  /** Closes the autocomplete suggestion panel. */\r\n  closePanel(): void {\r\n    this._resetLabel();\r\n\r\n    if (this._panelOpen) {\r\n      this.autocomplete._isOpen = this._panelOpen = false;\r\n\r\n      if (this._overlayRef && this._overlayRef.hasAttached()) {\r\n        this._overlayRef.detach();\r\n        this._closingActionsSubscription.unsubscribe();\r\n      }\r\n\r\n      // Note that in some cases this can end up being called after the component is destroyed.\r\n      // Add a check to ensure that we don't try to run change detection on a destroyed view.\r\n      if (!this._componentDestroyed) {\r\n        // We need to trigger change detection manually, because\r\n        // `fromEvent` doesn't seem to do it at the proper time.\r\n        // This ensures that the label is reset when the\r\n        // user clicks outside.\r\n        this._changeDetectorRef.detectChanges();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A stream of actions that should close the autocomplete panel, including\r\n   * when an option is selected, on blur, and when TAB is pressed.\r\n   */\r\n  get panelClosingActions(): Observable<MatOptionSelectionChange> {\r\n    return merge(\r\n      this.optionSelections,\r\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._panelOpen)),\r\n      this._closeKeyEventStream,\r\n      this._outsideClickStream,\r\n      this._overlayRef ?\r\n          this._overlayRef.detachments().pipe(filter(() => this._panelOpen)) :\r\n          observableOf()\r\n    );\r\n  }\r\n\r\n  /** Stream of autocomplete option selections. */\r\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\r\n    if (this.autocomplete && this.autocomplete.options) {\r\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\r\n    }\r\n\r\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\r\n    // Return a stream that we'll replace with the real one once everything is in place.\r\n    return this._zone.onStable\r\n        .asObservable()\r\n        .pipe(take(1), switchMap(() => this.optionSelections));\r\n  });\r\n\r\n  /** The currently active option, coerced to MatOption type. */\r\n  get activeOption(): MatOption | null {\r\n    if (this.autocomplete && this.autocomplete._keyManager) {\r\n      return this.autocomplete._keyManager.activeItem;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /** Stream of clicks outside of the autocomplete panel. */\r\n  private get _outsideClickStream(): Observable<any> {\r\n    if (!this._document) {\r\n      return observableOf(null);\r\n    }\r\n\r\n    return merge(\r\n      fromEvent(this._document, 'click'),\r\n      fromEvent(this._document, 'touchend')\r\n    )\r\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\r\n      const clickTarget = event.target as HTMLElement;\r\n      const formField = this._formField ?\r\n          this._formField._elementRef.nativeElement : null;\r\n\r\n      return this._panelOpen &&\r\n              clickTarget !== this._element.nativeElement &&\r\n              (!formField || !formField.contains(clickTarget)) &&\r\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\r\n    }));\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  writeValue(value: any): void {\r\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnChange(fn: (value: any) => {}): void {\r\n    this._onChange = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnTouched(fn: () => {}) {\r\n    this._onTouched = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  setDisabledState(isDisabled: boolean) {\r\n    this._element.nativeElement.disabled = isDisabled;\r\n  }\r\n\r\n  _handleKeydown(event: KeyboardEvent): void {\r\n    const keyCode = event.keyCode;\r\n\r\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\r\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\r\n    // the input value to the one that it had on focus, however it won't dispatch any events\r\n    // which means that the model value will be out of sync with the view.\r\n    if (keyCode === ESCAPE) {\r\n      event.preventDefault();\r\n    }\r\n\r\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\r\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\r\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\r\n      this._resetActiveItem();\r\n      this._closeKeyEventStream.next();\r\n      event.stopPropagation();\r\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\r\n      this.activeOption._selectViaInteraction();\r\n      this._resetActiveItem();\r\n      event.preventDefault();\r\n    } else {\r\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\r\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\r\n\r\n      if (this.panelOpen || keyCode === TAB) {\r\n        this.autocomplete._keyManager.onKeydown(event);\r\n      } else if (isArrowKey && this._canOpen()) {\r\n        this.openPanel();\r\n      }\r\n\r\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\r\n        this._scrollToOption();\r\n      }\r\n    }\r\n  }\r\n\r\n  _handleInput(event: KeyboardEvent): void {\r\n    let target = event.target as HTMLInputElement;\r\n    let value: number | string | null = target.value;\r\n\r\n    // Based on `NumberValueAccessor` from forms.\r\n    if (target.type === 'number') {\r\n      value = value == '' ? null : parseFloat(value);\r\n    }\r\n\r\n    // If the input has a placeholder, IE will fire the `input` event on page load,\r\n    // focus and blur, in addition to when the user actually changed the value. To\r\n    // filter out all of the extra events, we save the value on focus and between\r\n    // `input` events, and we check whether it changed.\r\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\r\n    if (this._canOpen() && this._previousValue !== value &&\r\n      document.activeElement === event.target) {\r\n      this._previousValue = value;\r\n      this._onChange(value);\r\n      this.openPanel();\r\n    }\r\n  }\r\n\r\n  _handleFocus(): void {\r\n    if (this._canOpen()) {\r\n      this._previousValue = this._element.nativeElement.value;\r\n      this._attachOverlay();\r\n      this._floatLabel(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\r\n   * This causes the value to jump when selecting an option with the mouse.\r\n   * This method manually floats the label until the panel can be closed.\r\n   * @param shouldAnimate Whether the label should be animated when it is floated.\r\n   */\r\n  private _floatLabel(shouldAnimate = false): void {\r\n    if (this._formField && this._formField.floatLabel === 'auto') {\r\n      if (shouldAnimate) {\r\n        this._formField._animateAndLockLabel();\r\n      } else {\r\n        this._formField.floatLabel = 'always';\r\n      }\r\n\r\n      this._manuallyFloatingLabel = true;\r\n    }\r\n  }\r\n\r\n  /** If the label has been manually elevated, return it to its normal state. */\r\n  private _resetLabel(): void  {\r\n    if (this._manuallyFloatingLabel) {\r\n      this._formField.floatLabel = 'auto';\r\n      this._manuallyFloatingLabel = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Given that we are not actually focusing active options, we must manually adjust scroll\r\n   * to reveal options below the fold. First, we find the offset of the option from the top\r\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\r\n   * the panel height + the option height, so the active option will be just visible at the\r\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\r\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\r\n   * not adjusted.\r\n   */\r\n  private _scrollToOption(): void {\r\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\r\n    const labelCount = _countGroupLabelsBeforeOption(index,\r\n        this.autocomplete.options, this.autocomplete.optionGroups);\r\n\r\n    const newScrollPosition = _getOptionScrollPosition(\r\n      index + labelCount,\r\n      AUTOCOMPLETE_OPTION_HEIGHT,\r\n      this.autocomplete._getScrollTop(),\r\n      AUTOCOMPLETE_PANEL_HEIGHT\r\n    );\r\n\r\n    this.autocomplete._setScrollTop(newScrollPosition);\r\n  }\r\n\r\n  /**\r\n   * This method listens to a stream of panel closing actions and resets the\r\n   * stream every time the option list changes.\r\n   */\r\n  private _subscribeToClosingActions(): Subscription {\r\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\r\n    const optionChanges = this.autocomplete.options.changes.pipe(\r\n      tap(() => this._positionStrategy.recalculateLastPosition()),\r\n      // Defer emitting to the stream until the next tick, because changing\r\n      // bindings in here will cause \"changed after checked\" errors.\r\n      delay(0)\r\n    );\r\n\r\n    // When the zone is stable initially, and when the option list changes...\r\n    return merge(firstStable, optionChanges)\r\n      .pipe(\r\n        // create a new stream of panelClosingActions, replacing any previous streams\r\n        // that were created, and flatten it so our stream only emits closing events...\r\n        switchMap(() => {\r\n          this._resetActiveItem();\r\n          this.autocomplete._setVisibility();\r\n          return this.panelClosingActions;\r\n        }),\r\n        // when the first closing event occurs...\r\n        take(1)\r\n      )\r\n      // set the value, close the panel, and complete.\r\n      .subscribe(event => this._setValueAndClose(event));\r\n  }\r\n\r\n  /** Destroys the autocomplete suggestion panel. */\r\n  private _destroyPanel(): void {\r\n    if (this._overlayRef) {\r\n      this.closePanel();\r\n      this._overlayRef.dispose();\r\n      this._overlayRef = null;\r\n    }\r\n  }\r\n\r\n  private _setTriggerValue(value: any): void {\r\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\r\n      this.autocomplete.displayWith(value) :\r\n      value;\r\n\r\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\r\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\r\n    const inputValue = toDisplay != null ? toDisplay : '';\r\n\r\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\r\n    // through change detection.\r\n    if (this._formField) {\r\n      this._formField._control.value = inputValue;\r\n    } else {\r\n      this._element.nativeElement.value = inputValue;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This method closes the panel, and if a value is specified, also sets the associated\r\n   * control to that value. It will also mark the control as dirty if this interaction\r\n   * stemmed from the user.\r\n   */\r\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\r\n    if (event && event.source) {\r\n      this._clearPreviousSelectedOption(event.source);\r\n      this._setTriggerValue(event.source.value);\r\n      this._onChange(event.source.value);\r\n      this._element.nativeElement.focus();\r\n      this.autocomplete._emitSelectEvent(event.source);\r\n    }\r\n\r\n    this.closePanel();\r\n  }\r\n\r\n  /**\r\n   * Clear any previous selected option and emit a selection change event for this option\r\n   */\r\n  private _clearPreviousSelectedOption(skip: MatOption) {\r\n    this.autocomplete.options.forEach(option => {\r\n      if (option != skip && option.selected) {\r\n        option.deselect();\r\n      }\r\n    });\r\n  }\r\n\r\n  private _attachOverlay(): void {\r\n    if (!this.autocomplete) {\r\n      throw getMatAutocompleteMissingPanelError();\r\n    }\r\n\r\n    if (!this._overlayRef) {\r\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\r\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\r\n    } else {\r\n      /** Update the panel width, in case the host width has changed */\r\n      this._overlayRef.updateSize({width: this._getHostWidth()});\r\n    }\r\n\r\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\r\n      this._overlayRef.attach(this._portal);\r\n      this._closingActionsSubscription = this._subscribeToClosingActions();\r\n    }\r\n\r\n    this.autocomplete._setVisibility();\r\n    this.autocomplete._isOpen = this._panelOpen = true;\r\n  }\r\n\r\n  private _getOverlayConfig(): OverlayConfig {\r\n    return new OverlayConfig({\r\n      positionStrategy: this._getOverlayPosition(),\r\n      scrollStrategy: this._scrollStrategy(),\r\n      width: this._getHostWidth(),\r\n      direction: this._dir ? this._dir.value : 'ltr'\r\n    });\r\n  }\r\n\r\n  private _getOverlayPosition(): PositionStrategy {\r\n    this._positionStrategy = this._overlay.position().connectedTo(\r\n        this._getConnectedElement(),\r\n        {originX: 'start', originY: 'bottom'}, {overlayX: 'start', overlayY: 'top'})\r\n        .withFallbackPosition(\r\n            {originX: 'start', originY: 'top'}, {overlayX: 'start', overlayY: 'bottom'}\r\n        );\r\n    return this._positionStrategy;\r\n  }\r\n\r\n  private _getConnectedElement(): ElementRef {\r\n    return this._formField ? this._formField._connectionContainerRef : this._element;\r\n  }\r\n\r\n  /** Returns the width of the input element, so the panel width can match it. */\r\n  private _getHostWidth(): number {\r\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\r\n  }\r\n\r\n  /**\r\n   * Resets the active item to -1 so arrow events will activate the\r\n   * correct options, or to 0 if the consumer opted into it.\r\n   */\r\n  private _resetActiveItem(): void {\r\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\r\n  }\r\n\r\n  /** Determines whether the panel can be opened. */\r\n  private _canOpen(): boolean {\r\n    const element: HTMLInputElement = this._element.nativeElement;\r\n    return !element.readOnly && !element.disabled;\r\n  }\r\n\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\r\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\r\n */\r\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\r\n    OCT = 9, NOV = 10, DEC = 11;\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {\r\n  animate,\r\n  state,\r\n  style,\r\n  transition,\r\n  trigger,\r\n  AnimationTriggerMetadata,\r\n} from '@angular/animations';\r\n\r\n/** Time and timing curve for expansion panel animations. */\r\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\r\n\r\n/** Animations used by the Material expansion panel. */\r\nexport const matExpansionAnimations: {\r\n  readonly indicatorRotate: AnimationTriggerMetadata;\r\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\r\n  readonly bodyExpansion: AnimationTriggerMetadata;\r\n} = {\r\n  /** Animation that rotates the indicator arrow. */\r\n  indicatorRotate: trigger('indicatorRotate', [\r\n    state('collapsed', style({transform: 'rotate(0deg)'})),\r\n    state('expanded', style({transform: 'rotate(180deg)'})),\r\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\r\n  ]),\r\n\r\n  /** Animation that expands and collapses the panel header height. */\r\n  expansionHeaderHeight: trigger('expansionHeight', [\r\n    state('collapsed', style({\r\n      height: '{{collapsedHeight}}',\r\n    }), {\r\n      params: {collapsedHeight: '48px'},\r\n    }),\r\n    state('expanded', style({\r\n      height: '{{expandedHeight}}'\r\n    }), {\r\n      params: {expandedHeight: '64px'}\r\n    }),\r\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\r\n  ]),\r\n\r\n  /** Animation that expands and collapses the panel content. */\r\n  bodyExpansion: trigger('bodyExpansion', [\r\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\r\n    state('expanded', style({height: '*', visibility: 'visible'})),\r\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\r\n  ])\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {SelectionModel} from '@angular/cdk/collections';\r\nimport {\r\n  DOWN_ARROW,\r\n  END,\r\n  ENTER,\r\n  HOME,\r\n  SPACE,\r\n  UP_ARROW,\r\n  LEFT_ARROW,\r\n  RIGHT_ARROW,\r\n} from '@angular/cdk/keycodes';\r\nimport {\r\n  CdkConnectedOverlay,\r\n  Overlay,\r\n  RepositionScrollStrategy,\r\n  ScrollStrategy,\r\n  ViewportRuler,\r\n} from '@angular/cdk/overlay';\r\nimport {filter} from 'rxjs/operators/filter';\r\nimport {take} from 'rxjs/operators/take';\r\nimport {map} from 'rxjs/operators/map';\r\nimport {switchMap} from 'rxjs/operators/switchMap';\r\nimport {startWith} from 'rxjs/operators/startWith';\r\nimport {takeUntil} from 'rxjs/operators/takeUntil';\r\nimport {\r\n  AfterContentInit,\r\n  Attribute,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  Directive,\r\n  DoCheck,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  isDevMode,\r\n  NgZone,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  Self,\r\n  SimpleChanges,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {\r\n  ControlValueAccessor,\r\n  FormGroupDirective,\r\n  NgControl,\r\n  NgForm\r\n} from '@angular/forms';\r\nimport {\r\n  CanDisable,\r\n  ErrorStateMatcher,\r\n  CanUpdateErrorState,\r\n  mixinErrorState,\r\n  HasTabIndex,\r\n  MatOptgroup,\r\n  MatOption,\r\n  MatOptionSelectionChange,\r\n  mixinDisabled,\r\n  mixinTabIndex,\r\n  MAT_OPTION_PARENT_COMPONENT,\r\n  mixinDisableRipple,\r\n  CanDisableRipple,\r\n  _countGroupLabelsBeforeOption,\r\n  _getOptionScrollPosition,\r\n} from '@angular/material/core';\r\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {merge} from 'rxjs/observable/merge';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {defer} from 'rxjs/observable/defer';\r\nimport {matSelectAnimations} from './select-animations';\r\nimport {\r\n  getMatSelectDynamicMultipleError,\r\n  getMatSelectNonArrayValueError,\r\n  getMatSelectNonFunctionValueError,\r\n} from './select-errors';\r\n\r\n\r\nlet nextUniqueId = 0;\r\n\r\n/**\r\n * The following style constants are necessary to save here in order\r\n * to properly calculate the alignment of the selected option over\r\n * the trigger element.\r\n */\r\n\r\n/** The max height of the select's overlay panel */\r\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\r\n\r\n/** The panel's padding on the x-axis */\r\nexport const SELECT_PANEL_PADDING_X = 16;\r\n\r\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\r\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\r\n\r\n/** The height of the select items in `em` units. */\r\nexport const SELECT_ITEM_HEIGHT_EM = 3;\r\n\r\n/**\r\n * Distance between the panel edge and the option text in\r\n * multi-selection mode.\r\n *\r\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\r\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\r\n * The checkbox width is 20px.\r\n */\r\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\r\n\r\n/**\r\n * The select panel will only \"fit\" inside the viewport if it is positioned at\r\n * this value or more away from the viewport boundary.\r\n */\r\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\r\n\r\n/** Injection token that determines the scroll handling while a select is open. */\r\nexport const MAT_SELECT_SCROLL_STRATEGY =\r\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\r\n\r\n/** @docs-private */\r\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\r\n    () => RepositionScrollStrategy {\r\n  return () => overlay.scrollStrategies.reposition();\r\n}\r\n\r\n/** @docs-private */\r\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\r\n  provide: MAT_SELECT_SCROLL_STRATEGY,\r\n  deps: [Overlay],\r\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\r\n};\r\n\r\n/** Change event object that is emitted when the select value has changed. */\r\nexport class MatSelectChange {\r\n  constructor(\r\n    /** Reference to the select that emitted the change event. */\r\n    public source: MatSelect,\r\n    /** Current value of the select that emitted the event. */\r\n    public value: any) { }\r\n}\r\n\r\n// Boilerplate for applying mixins to MatSelect.\r\n/** @docs-private */\r\nexport class MatSelectBase {\r\n  constructor(public _elementRef: ElementRef,\r\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\r\n              public _parentForm: NgForm,\r\n              public _parentFormGroup: FormGroupDirective,\r\n              public ngControl: NgControl) {}\r\n}\r\nexport const _MatSelectMixinBase = mixinDisableRipple(\r\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\r\n\r\n\r\n/**\r\n * Allows the user to customize the trigger that is displayed when the select has a value.\r\n */\r\n@Directive({\r\n  selector: 'mat-select-trigger'\r\n})\r\nexport class MatSelectTrigger {}\r\n\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-select',\r\n  exportAs: 'matSelect',\r\n  templateUrl: 'select.html',\r\n  styleUrls: ['select.css'],\r\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  host: {\r\n    'role': 'listbox',\r\n    '[attr.id]': 'id',\r\n    '[attr.tabindex]': 'tabIndex',\r\n    '[attr.aria-label]': '_ariaLabel',\r\n    '[attr.aria-labelledby]': 'ariaLabelledby',\r\n    '[attr.aria-required]': 'required.toString()',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n    '[attr.aria-invalid]': 'errorState',\r\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\r\n    '[attr.aria-multiselectable]': 'multiple',\r\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\r\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\r\n    '[class.mat-select-disabled]': 'disabled',\r\n    '[class.mat-select-invalid]': 'errorState',\r\n    '[class.mat-select-required]': 'required',\r\n    'class': 'mat-select',\r\n    '(keydown)': '_handleKeydown($event)',\r\n    '(focus)': '_onFocus()',\r\n    '(blur)': '_onBlur()',\r\n  },\r\n  animations: [\r\n    matSelectAnimations.transformPanel,\r\n    matSelectAnimations.fadeInContent\r\n  ],\r\n  providers: [\r\n    {provide: MatFormFieldControl, useExisting: MatSelect},\r\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\r\n  ],\r\n})\r\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\r\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\r\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\r\n  /** Whether or not the overlay panel is open. */\r\n  private _panelOpen = false;\r\n\r\n  /** Whether filling out the select is required in the form. */\r\n  private _required: boolean = false;\r\n\r\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\r\n  private _scrollTop = 0;\r\n\r\n  /** The placeholder displayed in the trigger of the select. */\r\n  private _placeholder: string;\r\n\r\n  /** Whether the component is in multiple selection mode. */\r\n  private _multiple: boolean = false;\r\n\r\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\r\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\r\n\r\n  /** Unique id for this input. */\r\n  private _uid = `mat-select-${nextUniqueId++}`;\r\n\r\n  /** Emits whenever the component is destroyed. */\r\n  private readonly _destroy = new Subject<void>();\r\n\r\n  /** The last measured value for the trigger's client bounding rect. */\r\n  _triggerRect: ClientRect;\r\n\r\n  /** The aria-describedby attribute on the select for improved a11y. */\r\n  _ariaDescribedby: string;\r\n\r\n  /** The cached font-size of the trigger element. */\r\n  _triggerFontSize = 0;\r\n\r\n  /** Deals with the selection logic. */\r\n  _selectionModel: SelectionModel<MatOption>;\r\n\r\n  /** Manages keyboard events for options in the panel. */\r\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\r\n\r\n  /** `View -> model callback called when value changes` */\r\n  _onChange: (value: any) => void = () => {};\r\n\r\n  /** `View -> model callback called when select has been touched` */\r\n  _onTouched = () => {};\r\n\r\n  /** The IDs of child options to be passed to the aria-owns attribute. */\r\n  _optionIds: string = '';\r\n\r\n  /** The value of the select panel's transform-origin property. */\r\n  _transformOrigin: string = 'top';\r\n\r\n  /** Whether the panel's animation is done. */\r\n  _panelDoneAnimating: boolean = false;\r\n\r\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\r\n  _scrollStrategy = this._scrollStrategyFactory();\r\n\r\n  /**\r\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\r\n   * This must be adjusted to align the selected option text over the trigger text.\r\n   * when the panel opens. Will change based on the y-position of the selected option.\r\n   */\r\n  _offsetY = 0;\r\n\r\n  /**\r\n   * This position config ensures that the top \"start\" corner of the overlay\r\n   * is aligned with with the top \"start\" of the origin by default (overlapping\r\n   * the trigger completely). If the panel cannot fit below the trigger, it\r\n   * will fall back to a position above the trigger.\r\n   */\r\n  _positions = [\r\n    {\r\n      originX: 'start',\r\n      originY: 'top',\r\n      overlayX: 'start',\r\n      overlayY: 'top',\r\n    },\r\n    {\r\n      originX: 'start',\r\n      originY: 'bottom',\r\n      overlayX: 'start',\r\n      overlayY: 'bottom',\r\n    },\r\n  ];\r\n\r\n  /** Whether the select is focused. */\r\n  focused: boolean = false;\r\n\r\n  /** A name for this control that can be used by `mat-form-field`. */\r\n  controlType = 'mat-select';\r\n\r\n  /** Trigger that opens the select. */\r\n  @ViewChild('trigger') trigger: ElementRef;\r\n\r\n  /** Panel containing the select options. */\r\n  @ViewChild('panel') panel: ElementRef;\r\n\r\n  /** Overlay pane containing the options. */\r\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\r\n\r\n  /** All of the defined select options. */\r\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\r\n\r\n  /** All of the defined groups of options. */\r\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\r\n\r\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\r\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\r\n\r\n  /** User-supplied override of the trigger element. */\r\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\r\n\r\n  /** Placeholder to be shown if no value has been selected. */\r\n  @Input()\r\n  get placeholder(): string { return this._placeholder; }\r\n  set placeholder(value: string) {\r\n    this._placeholder = value;\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  /** Whether the component is required. */\r\n  @Input()\r\n  get required(): boolean { return this._required; }\r\n  set required(value: boolean) {\r\n    this._required = coerceBooleanProperty(value);\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  /** Whether the user should be allowed to select multiple options. */\r\n  @Input()\r\n  get multiple(): boolean { return this._multiple; }\r\n  set multiple(value: boolean) {\r\n    if (this._selectionModel) {\r\n      throw getMatSelectDynamicMultipleError();\r\n    }\r\n\r\n    this._multiple = coerceBooleanProperty(value);\r\n  }\r\n\r\n  /**\r\n   * A function to compare the option values with the selected values. The first argument\r\n   * is a value from an option. The second is a value from the selection. A boolean\r\n   * should be returned.\r\n   */\r\n  @Input()\r\n  get compareWith() { return this._compareWith; }\r\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\r\n    if (typeof fn !== 'function') {\r\n      throw getMatSelectNonFunctionValueError();\r\n    }\r\n    this._compareWith = fn;\r\n    if (this._selectionModel) {\r\n      // A different comparator means the selection could change.\r\n      this._initializeSelection();\r\n    }\r\n  }\r\n\r\n  /** Value of the select control. */\r\n  @Input()\r\n  get value(): any { return this._value; }\r\n  set value(newValue: any) {\r\n    if (newValue !== this._value) {\r\n      this.writeValue(newValue);\r\n      this._value = newValue;\r\n    }\r\n  }\r\n  private _value: any;\r\n\r\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\r\n  @Input('aria-label') ariaLabel: string = '';\r\n\r\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\r\n  @Input('aria-labelledby') ariaLabelledby: string;\r\n\r\n  /** An object used to control when error messages are shown. */\r\n  @Input() errorStateMatcher: ErrorStateMatcher;\r\n\r\n  /** Unique id of the element. */\r\n  @Input()\r\n  get id(): string { return this._id; }\r\n  set id(value: string) {\r\n    this._id = value || this._uid;\r\n    this.stateChanges.next();\r\n  }\r\n  private _id: string;\r\n\r\n  /** Combined stream of all of the child options' change events. */\r\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\r\n    if (this.options) {\r\n      return merge(...this.options.map(option => option.onSelectionChange));\r\n    }\r\n\r\n    return this._ngZone.onStable\r\n      .asObservable()\r\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\r\n  });\r\n\r\n   /** Event emitted when the select panel has been toggled. */\r\n   @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n\r\n   /** Event emitted when the select has been opened. */\r\n   @Output('opened')\r\n   get _openedStream(): Observable<void> {\r\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\r\n  }\r\n\r\n  /** Event emitted when the select has been closed. */\r\n  @Output('closed')\r\n  get _closedStream(): Observable<void> {\r\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\r\n  }\r\n\r\n  /**\r\n   * Event emitted when the select has been opened.\r\n   * @deprecated Use `openedChange` instead.\r\n   * @deletion-target 6.0.0\r\n   */\r\n  @Output() readonly onOpen: Observable<void> = this._openedStream;\r\n\r\n  /**\r\n   * Event emitted when the select has been closed.\r\n   * @deprecated Use `openedChange` instead.\r\n   * @deletion-target 6.0.0\r\n   */\r\n  @Output() readonly onClose: Observable<void> = this._closedStream;\r\n\r\n   /** Event emitted when the selected value has been changed by the user. */\r\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\r\n      new EventEmitter<MatSelectChange>();\r\n\r\n  /**\r\n   * Event emitted when the selected value has been changed by the user.\r\n   * @deprecated Use `selectionChange` instead.\r\n   * @deletion-target 6.0.0\r\n   */\r\n  @Output() readonly change: EventEmitter<MatSelectChange> = this.selectionChange;\r\n\r\n  /**\r\n   * Event that emits whenever the raw value of the select changes. This is here primarily\r\n   * to facilitate the two-way binding for the `value` input.\r\n   * @docs-private\r\n   */\r\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  constructor(\r\n    private _viewportRuler: ViewportRuler,\r\n    private _changeDetectorRef: ChangeDetectorRef,\r\n    private _ngZone: NgZone,\r\n    _defaultErrorStateMatcher: ErrorStateMatcher,\r\n    elementRef: ElementRef,\r\n    @Optional() private _dir: Directionality,\r\n    @Optional() _parentForm: NgForm,\r\n    @Optional() _parentFormGroup: FormGroupDirective,\r\n    @Optional() private _parentFormField: MatFormField,\r\n    @Self() @Optional() public ngControl: NgControl,\r\n    @Attribute('tabindex') tabIndex: string,\r\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\r\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\r\n          _parentFormGroup, ngControl);\r\n\r\n    if (this.ngControl) {\r\n      // Note: we provide the value accessor through here, instead of\r\n      // the `providers` to avoid running into a circular import.\r\n      this.ngControl.valueAccessor = this;\r\n    }\r\n\r\n    this.tabIndex = parseInt(tabIndex) || 0;\r\n\r\n    // Force setter to be called in case id was not specified.\r\n    this.id = this.id;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple, undefined, false);\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._initKeyManager();\r\n\r\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\r\n      this._resetOptions();\r\n      this._initializeSelection();\r\n    });\r\n  }\r\n\r\n  ngDoCheck() {\r\n    if (this.ngControl) {\r\n      this.updateErrorState();\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\r\n    // the parent form field know to run change detection when the disabled state changes.\r\n    if (changes.disabled) {\r\n      this.stateChanges.next();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._destroy.next();\r\n    this._destroy.complete();\r\n    this.stateChanges.complete();\r\n  }\r\n\r\n  /** Toggles the overlay panel open or closed. */\r\n  toggle(): void {\r\n    this.panelOpen ? this.close() : this.open();\r\n  }\r\n\r\n  /** Opens the overlay panel. */\r\n  open(): void {\r\n    if (this.disabled || !this.options || !this.options.length) {\r\n      return;\r\n    }\r\n\r\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\r\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\r\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\r\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\r\n\r\n    this._panelOpen = true;\r\n    this._keyManager.withHorizontalOrientation(null);\r\n    this._calculateOverlayPosition();\r\n    this._highlightCorrectOption();\r\n    this._changeDetectorRef.markForCheck();\r\n\r\n    // Set the font size on the panel element once it exists.\r\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\r\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\r\n          this.overlayDir.overlayRef.overlayElement) {\r\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\r\n      }\r\n    });\r\n  }\r\n\r\n  /** Closes the overlay panel and focuses the host element. */\r\n  close(): void {\r\n    if (this._panelOpen) {\r\n      this._panelOpen = false;\r\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\r\n      this._changeDetectorRef.markForCheck();\r\n      this._onTouched();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the select's value. Part of the ControlValueAccessor interface\r\n   * required to integrate with Angular's core forms API.\r\n   *\r\n   * @param value New value to be written to the model.\r\n   */\r\n  writeValue(value: any): void {\r\n    if (this.options) {\r\n      this._setSelectionByValue(value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Saves a callback function to be invoked when the select's value\r\n   * changes from user input. Part of the ControlValueAccessor interface\r\n   * required to integrate with Angular's core forms API.\r\n   *\r\n   * @param fn Callback to be triggered when the value changes.\r\n   */\r\n  registerOnChange(fn: (value: any) => void): void {\r\n    this._onChange = fn;\r\n  }\r\n\r\n  /**\r\n   * Saves a callback function to be invoked when the select is blurred\r\n   * by the user. Part of the ControlValueAccessor interface required\r\n   * to integrate with Angular's core forms API.\r\n   *\r\n   * @param fn Callback to be triggered when the component has been touched.\r\n   */\r\n  registerOnTouched(fn: () => {}): void {\r\n    this._onTouched = fn;\r\n  }\r\n\r\n  /**\r\n   * Disables the select. Part of the ControlValueAccessor interface required\r\n   * to integrate with Angular's core forms API.\r\n   *\r\n   * @param isDisabled Sets whether the component is disabled.\r\n   */\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n    this._changeDetectorRef.markForCheck();\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  /** Whether or not the overlay panel is open. */\r\n  get panelOpen(): boolean {\r\n    return this._panelOpen;\r\n  }\r\n\r\n  /** The currently selected option. */\r\n  get selected(): MatOption | MatOption[] {\r\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\r\n  }\r\n\r\n  /** The value displayed in the trigger. */\r\n  get triggerValue(): string {\r\n    if (this.empty) {\r\n      return '';\r\n    }\r\n\r\n    if (this._multiple) {\r\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\r\n\r\n      if (this._isRtl()) {\r\n        selectedOptions.reverse();\r\n      }\r\n\r\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\r\n      return selectedOptions.join(', ');\r\n    }\r\n\r\n    return this._selectionModel.selected[0].viewValue;\r\n  }\r\n\r\n  /** Whether the element is in RTL mode. */\r\n  _isRtl(): boolean {\r\n    return this._dir ? this._dir.value === 'rtl' : false;\r\n  }\r\n\r\n  /** Handles all keydown events on the select. */\r\n  _handleKeydown(event: KeyboardEvent): void {\r\n    if (!this.disabled) {\r\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\r\n    }\r\n  }\r\n\r\n  /** Handles keyboard events while the select is closed. */\r\n  private _handleClosedKeydown(event: KeyboardEvent): void {\r\n    const keyCode = event.keyCode;\r\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\r\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\r\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\r\n\r\n    // Open the select on ALT + arrow key to match the native <select>\r\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\r\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\r\n      this.open();\r\n    } else if (!this.multiple) {\r\n      this._keyManager.onKeydown(event);\r\n    }\r\n  }\r\n\r\n  /** Handles keyboard events when the selected is open. */\r\n  private _handleOpenKeydown(event: KeyboardEvent): void {\r\n    const keyCode = event.keyCode;\r\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\r\n    const manager = this._keyManager;\r\n\r\n    if (keyCode === HOME || keyCode === END) {\r\n      event.preventDefault();\r\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\r\n    } else if (isArrowKey && event.altKey) {\r\n      // Close the select on ALT + arrow key to match the native <select>\r\n      event.preventDefault();\r\n      this.close();\r\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\r\n      event.preventDefault();\r\n      manager.activeItem._selectViaInteraction();\r\n    } else {\r\n      const previouslyFocusedIndex = manager.activeItemIndex;\r\n\r\n      manager.onKeydown(event);\r\n\r\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\r\n          manager.activeItemIndex !== previouslyFocusedIndex) {\r\n        manager.activeItem._selectViaInteraction();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * When the panel element is finished transforming in (though not fading in), it\r\n   * emits an event and focuses an option if the panel is open.\r\n   */\r\n  _onPanelDone(): void {\r\n    if (this.panelOpen) {\r\n      this._scrollTop = 0;\r\n      this.openedChange.emit(true);\r\n    } else {\r\n      this.openedChange.emit(false);\r\n      this._panelDoneAnimating = false;\r\n      this.overlayDir.offsetX = 0;\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * When the panel content is done fading in, the _panelDoneAnimating property is\r\n   * set so the proper class can be added to the panel.\r\n   */\r\n  _onFadeInDone(): void {\r\n    this._panelDoneAnimating = this.panelOpen;\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  _onFocus() {\r\n    if (!this.disabled) {\r\n      this.focused = true;\r\n      this.stateChanges.next();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\r\n   * \"blur\" to the panel when it opens, causing a false positive.\r\n   */\r\n  _onBlur() {\r\n    this.focused = false;\r\n\r\n    if (!this.disabled && !this.panelOpen) {\r\n      this._onTouched();\r\n      this._changeDetectorRef.markForCheck();\r\n      this.stateChanges.next();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Callback that is invoked when the overlay panel has been attached.\r\n   */\r\n  _onAttached(): void {\r\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\r\n      this._changeDetectorRef.detectChanges();\r\n      this._calculateOverlayOffsetX();\r\n      this.panel.nativeElement.scrollTop = this._scrollTop;\r\n    });\r\n  }\r\n\r\n  /** Returns the theme to be used on the panel. */\r\n  _getPanelTheme(): string {\r\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\r\n  }\r\n\r\n  /** Whether the select has a value. */\r\n  get empty(): boolean {\r\n    return !this._selectionModel || this._selectionModel.isEmpty();\r\n  }\r\n\r\n  private _initializeSelection(): void {\r\n    // Defer setting the value in order to avoid the \"Expression\r\n    // has changed after it was checked\" errors from Angular.\r\n    Promise.resolve().then(() => {\r\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Sets the selected option based on a value. If no option can be\r\n   * found with the designated value, the select trigger is cleared.\r\n   */\r\n  private _setSelectionByValue(value: any | any[], isUserInput = false): void {\r\n    if (this.multiple && value) {\r\n      if (!Array.isArray(value)) {\r\n        throw getMatSelectNonArrayValueError();\r\n      }\r\n\r\n      this._clearSelection();\r\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\r\n      this._sortValues();\r\n    } else {\r\n      this._clearSelection();\r\n\r\n      const correspondingOption = this._selectValue(value, isUserInput);\r\n\r\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\r\n      // mode, because we don't know what option the user interacted with last.\r\n      if (correspondingOption) {\r\n        this._keyManager.setActiveItem(this.options.toArray().indexOf(correspondingOption));\r\n      }\r\n    }\r\n\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /**\r\n   * Finds and selects and option based on its value.\r\n   * @returns Option that has the corresponding value.\r\n   */\r\n  private _selectValue(value: any, isUserInput = false): MatOption | undefined {\r\n    const correspondingOption = this.options.find((option: MatOption) => {\r\n      try {\r\n        // Treat null as a special reset value.\r\n        return option.value != null && this._compareWith(option.value,  value);\r\n      } catch (error) {\r\n        if (isDevMode()) {\r\n          // Notify developers of errors in their comparator.\r\n          console.warn(error);\r\n        }\r\n        return false;\r\n      }\r\n    });\r\n\r\n    if (correspondingOption) {\r\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\r\n      this._selectionModel.select(correspondingOption);\r\n      this.stateChanges.next();\r\n    }\r\n\r\n    return correspondingOption;\r\n  }\r\n\r\n\r\n  /**\r\n   * Clears the select trigger and deselects every option in the list.\r\n   * @param skip Option that should not be deselected.\r\n   */\r\n  private _clearSelection(skip?: MatOption): void {\r\n    this._selectionModel.clear();\r\n    this.options.forEach(option => {\r\n      if (option !== skip) {\r\n        option.deselect();\r\n      }\r\n    });\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\r\n  private _initKeyManager() {\r\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\r\n      .withTypeAhead()\r\n      .withVerticalOrientation()\r\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\r\n\r\n      this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => this.close());\r\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\r\n      if (this._panelOpen && this.panel) {\r\n        this._scrollActiveOptionIntoView();\r\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\r\n        this._keyManager.activeItem._selectViaInteraction();\r\n      }\r\n    });\r\n  }\r\n\r\n  /** Drops current option subscriptions and IDs and resets from scratch. */\r\n  private _resetOptions(): void {\r\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\r\n\r\n    this.optionSelectionChanges\r\n      .pipe(takeUntil(changedOrDestroyed), filter(event => event.isUserInput))\r\n      .subscribe(event => {\r\n        this._onSelect(event.source);\r\n\r\n        if (!this.multiple && this._panelOpen) {\r\n          this.close();\r\n          this.focus();\r\n        }\r\n      });\r\n\r\n    // Listen to changes in the internal state of the options and react accordingly.\r\n    // Handles cases like the labels of the selected options changing.\r\n    merge(...this.options.map(option => option._stateChanges))\r\n      .pipe(takeUntil(changedOrDestroyed))\r\n      .subscribe(() => {\r\n        this._changeDetectorRef.markForCheck();\r\n        this.stateChanges.next();\r\n      });\r\n\r\n    this._setOptionIds();\r\n  }\r\n\r\n  /** Invoked when an option is clicked. */\r\n  private _onSelect(option: MatOption): void {\r\n    const wasSelected = this._selectionModel.isSelected(option);\r\n\r\n    // TODO(crisbeto): handle blank/null options inside multi-select.\r\n    if (this.multiple) {\r\n      this._selectionModel.toggle(option);\r\n      this.stateChanges.next();\r\n      wasSelected ? option.deselect() : option.select();\r\n      this._keyManager.setActiveItem(this._getOptionIndex(option)!);\r\n      this._sortValues();\r\n    } else {\r\n      this._clearSelection(option.value == null ? undefined : option);\r\n\r\n      if (option.value == null) {\r\n        this._propagateChanges(option.value);\r\n      } else {\r\n        this._selectionModel.select(option);\r\n        this.stateChanges.next();\r\n      }\r\n    }\r\n\r\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\r\n      this._propagateChanges();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sorts the model values, ensuring that they keep the same\r\n   * order that they have in the panel.\r\n   */\r\n  private _sortValues(): void {\r\n    if (this._multiple) {\r\n      this._selectionModel.clear();\r\n\r\n      this.options.forEach(option => {\r\n        if (option.selected) {\r\n          this._selectionModel.select(option);\r\n        }\r\n      });\r\n      this.stateChanges.next();\r\n    }\r\n  }\r\n\r\n  /** Emits change event to set the model value. */\r\n  private _propagateChanges(fallbackValue?: any): void {\r\n    let valueToEmit: any = null;\r\n\r\n    if (this.multiple) {\r\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\r\n    } else {\r\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\r\n    }\r\n\r\n    this._value = valueToEmit;\r\n    this.valueChange.emit(valueToEmit);\r\n    this._onChange(valueToEmit);\r\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /** Records option IDs to pass to the aria-owns property. */\r\n  private _setOptionIds() {\r\n    this._optionIds = this.options.map(option => option.id).join(' ');\r\n  }\r\n\r\n  /**\r\n   * Highlights the selected item. If no option is selected, it will highlight\r\n   * the first item instead.\r\n   */\r\n  private _highlightCorrectOption(): void {\r\n    if (this._keyManager) {\r\n      if (this.empty) {\r\n        this._keyManager.setFirstItemActive();\r\n      } else {\r\n        this._keyManager.setActiveItem(this._getOptionIndex(this._selectionModel.selected[0])!);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Scrolls the active option into view. */\r\n  private _scrollActiveOptionIntoView(): void {\r\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\r\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\r\n        this.optionGroups);\r\n\r\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\r\n      activeOptionIndex + labelCount,\r\n      this._getItemHeight(),\r\n      this.panel.nativeElement.scrollTop,\r\n      SELECT_PANEL_MAX_HEIGHT\r\n    );\r\n  }\r\n\r\n  /** Focuses the select element. */\r\n  focus(): void {\r\n    this._elementRef.nativeElement.focus();\r\n  }\r\n\r\n  /** Gets the index of the provided option in the option list. */\r\n  private _getOptionIndex(option: MatOption): number | undefined {\r\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\r\n      return result === undefined ? (option === current ? index : undefined) : result;\r\n    }, undefined);\r\n  }\r\n\r\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\r\n  private _calculateOverlayPosition(): void {\r\n    const itemHeight = this._getItemHeight();\r\n    const items = this._getItemCount();\r\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\r\n    const scrollContainerHeight = items * itemHeight;\r\n\r\n    // The farthest the panel can be scrolled before it hits the bottom\r\n    const maxScroll = scrollContainerHeight - panelHeight;\r\n\r\n    // If no value is selected we open the popup to the first item.\r\n    let selectedOptionOffset =\r\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\r\n\r\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\r\n        this.optionGroups);\r\n\r\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\r\n    // center of the overlay panel rather than the top.\r\n    const scrollBuffer = panelHeight / 2;\r\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\r\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\r\n\r\n    this._checkOverlayWithinViewport(maxScroll);\r\n  }\r\n\r\n  /**\r\n   * Calculates the scroll position of the select's overlay panel.\r\n   *\r\n   * Attempts to center the selected option in the panel. If the option is\r\n   * too high or too low in the panel to be scrolled to the center, it clamps the\r\n   * scroll position to the min or max scroll positions respectively.\r\n   */\r\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\r\n                          maxScroll: number): number {\r\n    const itemHeight = this._getItemHeight();\r\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\r\n    const halfOptionHeight = itemHeight / 2;\r\n\r\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\r\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\r\n    // the center of the overlay panel. Half the option height must be re-added to the\r\n    // scrollTop so the option is centered based on its middle, not its top edge.\r\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\r\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\r\n  }\r\n\r\n  /** Returns the aria-label of the select component. */\r\n  get _ariaLabel(): string | null {\r\n    // If an ariaLabelledby value has been set, the select should not overwrite the\r\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\r\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\r\n  }\r\n\r\n  /** Determines the `aria-activedescendant` to be set on the host. */\r\n  _getAriaActiveDescendant(): string | null {\r\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\r\n      return this._keyManager.activeItem.id;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\r\n   * This must be adjusted to align the selected option text over the trigger text when\r\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\r\n   * can't be calculated until the panel has been attached, because we need to know the\r\n   * content width in order to constrain the panel within the viewport.\r\n   */\r\n  private _calculateOverlayOffsetX(): void {\r\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\r\n    const viewportSize = this._viewportRuler.getViewportSize();\r\n    const isRtl = this._isRtl();\r\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\r\n                                         SELECT_PANEL_PADDING_X * 2;\r\n    let offsetX: number;\r\n\r\n    // Adjust the offset, depending on the option padding.\r\n    if (this.multiple) {\r\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\r\n    } else {\r\n      let selected = this._selectionModel.selected[0] || this.options.first;\r\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\r\n    }\r\n\r\n    // Invert the offset in LTR.\r\n    if (!isRtl) {\r\n      offsetX *= -1;\r\n    }\r\n\r\n    // Determine how much the select overflows on each side.\r\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\r\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\r\n                          + (isRtl ? 0 : paddingWidth);\r\n\r\n    // If the element overflows on either side, reduce the offset to allow it to fit.\r\n    if (leftOverflow > 0) {\r\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\r\n    } else if (rightOverflow > 0) {\r\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\r\n    }\r\n\r\n    // Set the offset directly in order to avoid having to go through change detection and\r\n    // potentially triggering \"changed after it was checked\" errors.\r\n    this.overlayDir.offsetX = offsetX;\r\n    this.overlayDir.overlayRef.updatePosition();\r\n  }\r\n\r\n  /**\r\n   * Calculates the y-offset of the select's overlay panel in relation to the\r\n   * top start corner of the trigger. It has to be adjusted in order for the\r\n   * selected option to be aligned over the trigger when the panel opens.\r\n   */\r\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\r\n                                  maxScroll: number): number {\r\n    const itemHeight = this._getItemHeight();\r\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\r\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\r\n    let optionOffsetFromPanelTop: number;\r\n\r\n    if (this._scrollTop === 0) {\r\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\r\n    } else if (this._scrollTop === maxScroll) {\r\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\r\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\r\n\r\n      // The first item is partially out of the viewport. Therefore we need to calculate what\r\n      // portion of it is shown in the viewport and account for it in our offset.\r\n      let partialItemHeight =\r\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\r\n\r\n      // Because the panel height is longer than the height of the options alone,\r\n      // there is always extra padding at the top or bottom of the panel. When\r\n      // scrolled to the very bottom, this padding is at the top of the panel and\r\n      // must be added to the offset.\r\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\r\n    } else {\r\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\r\n      // its offset will be the scroll buffer minus the half height that was added to\r\n      // center it.\r\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\r\n    }\r\n\r\n    // The final offset is the option's offset from the top, adjusted for the height\r\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\r\n    // direction up the page.\r\n    return optionOffsetFromPanelTop * -1 - optionHeightAdjustment;\r\n  }\r\n\r\n  /**\r\n   * Checks that the attempted overlay position will fit within the viewport.\r\n   * If it will not fit, tries to adjust the scroll position and the associated\r\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\r\n   * sets the offset back to 0 to allow the fallback position to take over.\r\n   */\r\n  private _checkOverlayWithinViewport(maxScroll: number): void {\r\n    const itemHeight = this._getItemHeight();\r\n    const viewportSize = this._viewportRuler.getViewportSize();\r\n\r\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\r\n    const bottomSpaceAvailable =\r\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\r\n\r\n    const panelHeightTop = Math.abs(this._offsetY);\r\n    const totalPanelHeight =\r\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\r\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\r\n\r\n    if (panelHeightBottom > bottomSpaceAvailable) {\r\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\r\n    } else if (panelHeightTop > topSpaceAvailable) {\r\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\r\n    } else {\r\n      this._transformOrigin = this._getOriginBasedOnOption();\r\n    }\r\n  }\r\n\r\n  /** Adjusts the overlay panel up to fit in the viewport. */\r\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\r\n    // Browsers ignore fractional scroll offsets, so we need to round.\r\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\r\n\r\n    // Scrolls the panel up by the distance it was extending past the boundary, then\r\n    // adjusts the offset by that amount to move the panel up into the viewport.\r\n    this._scrollTop -= distanceBelowViewport;\r\n    this._offsetY -= distanceBelowViewport;\r\n    this._transformOrigin = this._getOriginBasedOnOption();\r\n\r\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\r\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\r\n    // effect.\r\n    if (this._scrollTop <= 0) {\r\n      this._scrollTop = 0;\r\n      this._offsetY = 0;\r\n      this._transformOrigin = `50% bottom 0px`;\r\n    }\r\n  }\r\n\r\n  /** Adjusts the overlay panel down to fit in the viewport. */\r\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\r\n                           maxScroll: number) {\r\n    // Browsers ignore fractional scroll offsets, so we need to round.\r\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\r\n\r\n    // Scrolls the panel down by the distance it was extending past the boundary, then\r\n    // adjusts the offset by that amount to move the panel down into the viewport.\r\n    this._scrollTop += distanceAboveViewport;\r\n    this._offsetY += distanceAboveViewport;\r\n    this._transformOrigin = this._getOriginBasedOnOption();\r\n\r\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\r\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\r\n    // to take effect.\r\n    if (this._scrollTop >= maxScroll) {\r\n      this._scrollTop = maxScroll;\r\n      this._offsetY = 0;\r\n      this._transformOrigin = `50% top 0px`;\r\n      return;\r\n    }\r\n  }\r\n\r\n  /** Sets the transform origin point based on the selected option. */\r\n  private _getOriginBasedOnOption(): string {\r\n    const itemHeight = this._getItemHeight();\r\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\r\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\r\n    return `50% ${originY}px 0px`;\r\n  }\r\n\r\n  /** Calculates the amount of items in the select. This includes options and group labels. */\r\n  private _getItemCount(): number {\r\n    return this.options.length + this.optionGroups.length;\r\n  }\r\n\r\n  /** Calculates the height of the select's options. */\r\n  private _getItemHeight(): number {\r\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\r\n  }\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  setDescribedByIds(ids: string[]) {\r\n    this._ariaDescribedby = ids.join(' ');\r\n  }\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  onContainerClick() {\r\n    this.focus();\r\n    this.open();\r\n  }\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  get shouldPlaceholderFloat(): boolean {\r\n    return this._panelOpen || !this.empty;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {AnimationEvent} from '@angular/animations';\r\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {ESCAPE} from '@angular/cdk/keycodes';\r\nimport {\r\n  ConnectionPositionPair,\r\n  HorizontalConnectionPos,\r\n  OriginConnectionPosition,\r\n  Overlay,\r\n  OverlayConfig,\r\n  OverlayConnectionPosition,\r\n  OverlayRef,\r\n  RepositionScrollStrategy,\r\n  ScrollStrategy,\r\n  VerticalConnectionPos,\r\n} from '@angular/cdk/overlay';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {ComponentPortal} from '@angular/cdk/portal';\r\nimport {take} from 'rxjs/operators/take';\r\nimport {merge} from 'rxjs/observable/merge';\r\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Directive,\r\n  ElementRef,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Optional,\r\n  ViewContainerRef,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {matTooltipAnimations} from './tooltip-animations';\r\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\r\n\r\n\r\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\r\n\r\n/** Time in ms to throttle repositioning after scroll events. */\r\nexport const SCROLL_THROTTLE_MS = 20;\r\n\r\n/** CSS class that will be attached to the overlay panel. */\r\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\r\n\r\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\r\nexport function getMatTooltipInvalidPositionError(position: string) {\r\n  return Error(`Tooltip position \"${position}\" is invalid.`);\r\n}\r\n\r\n/** Injection token that determines the scroll handling while a tooltip is visible. */\r\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\r\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\r\n\r\n/** @docs-private */\r\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\r\n    () => RepositionScrollStrategy {\r\n  return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\r\n}\r\n\r\n/** @docs-private */\r\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER = {\r\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\r\n  deps: [Overlay],\r\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY\r\n};\r\n\r\n/** Default `matTooltip` options that can be overridden. */\r\nexport interface MatTooltipDefaultOptions {\r\n  showDelay: number;\r\n  hideDelay: number;\r\n  touchendHideDelay: number;\r\n}\r\n\r\n/** Injection token to be used to override the default options for `matTooltip`. */\r\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\r\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options');\r\n\r\n/**\r\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\r\n * hiding of a tooltip provided position (defaults to below the element).\r\n *\r\n * https://material.google.com/components/tooltips.html\r\n */\r\n@Directive({\r\n  selector: '[matTooltip]',\r\n  exportAs: 'matTooltip',\r\n  host: {\r\n    '(longpress)': 'show()',\r\n    '(keydown)': '_handleKeydown($event)',\r\n    '(touchend)': '_handleTouchend()',\r\n  },\r\n})\r\nexport class MatTooltip implements OnDestroy {\r\n  _overlayRef: OverlayRef | null;\r\n  _tooltipInstance: TooltipComponent | null;\r\n\r\n  private _position: TooltipPosition = 'below';\r\n  private _disabled: boolean = false;\r\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\r\n\r\n  /** Allows the user to define the position of the tooltip relative to the parent element */\r\n  @Input('matTooltipPosition')\r\n  get position(): TooltipPosition { return this._position; }\r\n  set position(value: TooltipPosition) {\r\n    if (value !== this._position) {\r\n      this._position = value;\r\n\r\n      // TODO(andrewjs): When the overlay's position can be dynamically changed, do not destroy\r\n      // the tooltip.\r\n      if (this._tooltipInstance) {\r\n        this._disposeTooltip();\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Disables the display of the tooltip. */\r\n  @Input('matTooltipDisabled')\r\n  get disabled(): boolean { return this._disabled; }\r\n  set disabled(value) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n\r\n    // If tooltip is disabled, hide immediately.\r\n    if (this._disabled) {\r\n      this.hide(0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @deprecated\r\n   * @deletion-target 6.0.0\r\n   */\r\n  @Input('tooltip-position')\r\n  get _positionDeprecated(): TooltipPosition { return this._position; }\r\n  set _positionDeprecated(value: TooltipPosition) { this._position = value; }\r\n\r\n  /** The default delay in ms before showing the tooltip after show is called */\r\n  @Input('matTooltipShowDelay') showDelay =\r\n      this._defaultOptions ? this._defaultOptions.showDelay : 0;\r\n\r\n  /** The default delay in ms before hiding the tooltip after hide is called */\r\n  @Input('matTooltipHideDelay') hideDelay =\r\n      this._defaultOptions ? this._defaultOptions.hideDelay : 0;\r\n\r\n  private _message = '';\r\n\r\n  /** The message to be displayed in the tooltip */\r\n  @Input('matTooltip')\r\n  get message() { return this._message; }\r\n  set message(value: string) {\r\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\r\n\r\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\r\n    this._message = value != null ? `${value}`.trim() : '';\r\n\r\n    if (!this._message && this._isTooltipVisible()) {\r\n      this.hide(0);\r\n    } else {\r\n      this._updateTooltipMessage();\r\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\r\n    }\r\n  }\r\n\r\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\r\n  @Input('matTooltipClass')\r\n  get tooltipClass() { return this._tooltipClass; }\r\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\r\n    this._tooltipClass = value;\r\n    if (this._tooltipInstance) {\r\n      this._setTooltipClass(this._tooltipClass);\r\n    }\r\n  }\r\n\r\n  private _manualListeners = new Map<string, Function>();\r\n\r\n  constructor(\r\n    private _overlay: Overlay,\r\n    private _elementRef: ElementRef,\r\n    private _scrollDispatcher: ScrollDispatcher,\r\n    private _viewContainerRef: ViewContainerRef,\r\n    private _ngZone: NgZone,\r\n    private _platform: Platform,\r\n    private _ariaDescriber: AriaDescriber,\r\n    private _focusMonitor: FocusMonitor,\r\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\r\n    @Optional() private _dir: Directionality,\r\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\r\n      private _defaultOptions?: MatTooltipDefaultOptions) {\r\n\r\n    // TODO(crisbeto): make the `_defaultOptions` a required param next time we do breaking changes.\r\n    // @deletion-target 6.0.0\r\n\r\n    const element: HTMLElement = _elementRef.nativeElement;\r\n\r\n    // The mouse events shouldn't be bound on iOS devices, because\r\n    // they can prevent the first tap from firing its click event.\r\n    if (!_platform.IOS) {\r\n      this._manualListeners.set('mouseenter', () => this.show());\r\n      this._manualListeners.set('mouseleave', () => this.hide());\r\n\r\n      this._manualListeners\r\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\r\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\r\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\r\n      // will add some inline styles by default, including `user-select: none`. This is\r\n      // problematic on iOS, because it will prevent users from typing in inputs. If\r\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\r\n      // the `user-select` to avoid these issues.\r\n      element.style.webkitUserSelect = element.style.userSelect = '';\r\n    }\r\n\r\n    _focusMonitor.monitor(element).subscribe(origin => {\r\n      // Note that the focus monitor runs outside the Angular zone.\r\n      if (!origin) {\r\n        _ngZone.run(() => this.hide(0));\r\n      } else if (origin !== 'program') {\r\n        _ngZone.run(() => this.show());\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Dispose the tooltip when destroyed.\r\n   */\r\n  ngOnDestroy() {\r\n    if (this._tooltipInstance) {\r\n      this._disposeTooltip();\r\n    }\r\n\r\n    // Clean up the event listeners set in the constructor\r\n    if (!this._platform.IOS) {\r\n      this._manualListeners.forEach((listener, event) => {\r\n        this._elementRef.nativeElement.removeEventListener(event, listener);\r\n      });\r\n\r\n      this._manualListeners.clear();\r\n    }\r\n\r\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\r\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\r\n  }\r\n\r\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\r\n  show(delay: number = this.showDelay): void {\r\n    if (this.disabled || !this.message) { return; }\r\n\r\n    if (!this._tooltipInstance) {\r\n      this._createTooltip();\r\n    }\r\n\r\n    this._setTooltipClass(this._tooltipClass);\r\n    this._updateTooltipMessage();\r\n    this._tooltipInstance!.show(this._position, delay);\r\n  }\r\n\r\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\r\n  hide(delay: number = this.hideDelay): void {\r\n    if (this._tooltipInstance) {\r\n      this._tooltipInstance.hide(delay);\r\n    }\r\n  }\r\n\r\n  /** Shows/hides the tooltip */\r\n  toggle(): void {\r\n    this._isTooltipVisible() ? this.hide() : this.show();\r\n  }\r\n\r\n  /** Returns true if the tooltip is currently visible to the user */\r\n  _isTooltipVisible(): boolean {\r\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\r\n  }\r\n\r\n  /** Handles the keydown events on the host element. */\r\n  _handleKeydown(e: KeyboardEvent) {\r\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\r\n      e.stopPropagation();\r\n      this.hide(0);\r\n    }\r\n  }\r\n\r\n  /** Handles the touchend events on the host element. */\r\n  _handleTouchend() {\r\n    this.hide(this._defaultOptions ? this._defaultOptions.touchendHideDelay : 1500);\r\n  }\r\n\r\n  /** Create the tooltip to display */\r\n  private _createTooltip(): void {\r\n    const overlayRef = this._createOverlay();\r\n    const portal = new ComponentPortal(TooltipComponent, this._viewContainerRef);\r\n\r\n    this._tooltipInstance = overlayRef.attach(portal).instance;\r\n\r\n    // Dispose of the tooltip when the overlay is detached.\r\n    merge(this._tooltipInstance!.afterHidden(), overlayRef.detachments()).subscribe(() => {\r\n      // Check first if the tooltip has already been removed through this components destroy.\r\n      if (this._tooltipInstance) {\r\n        this._disposeTooltip();\r\n      }\r\n    });\r\n  }\r\n\r\n  /** Create the overlay config and position strategy */\r\n  private _createOverlay(): OverlayRef {\r\n    const origin = this._getOrigin();\r\n    const overlay = this._getOverlayPosition();\r\n\r\n    // Create connected position strategy that listens for scroll events to reposition.\r\n    const strategy = this._overlay\r\n      .position()\r\n      .connectedTo(this._elementRef, origin.main, overlay.main)\r\n      .withFallbackPosition(origin.fallback, overlay.fallback);\r\n\r\n    const scrollableAncestors = this._scrollDispatcher\r\n      .getAncestorScrollContainers(this._elementRef);\r\n\r\n    strategy.withScrollableContainers(scrollableAncestors);\r\n\r\n    strategy.onPositionChange.subscribe(change => {\r\n      if (this._tooltipInstance) {\r\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\r\n          // After position changes occur and the overlay is clipped by\r\n          // a parent scrollable then close the tooltip.\r\n          this._ngZone.run(() => this.hide(0));\r\n        } else {\r\n          // Otherwise recalculate the origin based on the new position.\r\n          this._tooltipInstance._setTransformOrigin(change.connectionPair);\r\n        }\r\n      }\r\n    });\r\n\r\n    const config = new OverlayConfig({\r\n      direction: this._dir ? this._dir.value : 'ltr',\r\n      positionStrategy: strategy,\r\n      panelClass: TOOLTIP_PANEL_CLASS,\r\n      scrollStrategy: this._scrollStrategy()\r\n    });\r\n\r\n    this._overlayRef = this._overlay.create(config);\r\n\r\n    return this._overlayRef;\r\n  }\r\n\r\n  /** Disposes the current tooltip and the overlay it is attached to */\r\n  private _disposeTooltip(): void {\r\n    if (this._overlayRef) {\r\n      this._overlayRef.dispose();\r\n      this._overlayRef = null;\r\n    }\r\n\r\n    this._tooltipInstance = null;\r\n  }\r\n\r\n  /**\r\n   * Returns the origin position and a fallback position based on the user's position preference.\r\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\r\n   */\r\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\r\n    const isDirectionLtr = !this._dir || this._dir.value == 'ltr';\r\n    let position: OriginConnectionPosition;\r\n\r\n    if (this.position == 'above' || this.position == 'below') {\r\n      position = {originX: 'center', originY: this.position == 'above' ? 'top' : 'bottom'};\r\n    } else if (this.position == 'left' ||\r\n               this.position == 'before' && isDirectionLtr ||\r\n               this.position == 'after' && !isDirectionLtr) {\r\n      position = {originX: 'start', originY: 'center'};\r\n    } else if (this.position == 'right' ||\r\n               this.position == 'after' && isDirectionLtr ||\r\n               this.position == 'before' && !isDirectionLtr) {\r\n      position = {originX: 'end', originY: 'center'};\r\n    } else {\r\n      throw getMatTooltipInvalidPositionError(this.position);\r\n    }\r\n\r\n    const {x, y} = this._invertPosition(position.originX, position.originY);\r\n\r\n    return {\r\n      main: position,\r\n      fallback: {originX: x, originY: y}\r\n    };\r\n  }\r\n\r\n  /** Returns the overlay position and a fallback position based on the user's preference */\r\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\r\n    const isLtr = !this._dir || this._dir.value == 'ltr';\r\n    let position: OverlayConnectionPosition;\r\n\r\n    if (this.position == 'above') {\r\n      position = {overlayX: 'center', overlayY: 'bottom'};\r\n    } else if (this.position == 'below') {\r\n      position = {overlayX: 'center', overlayY: 'top'};\r\n    } else if (this.position == 'left' ||\r\n               this.position == 'before' && isLtr ||\r\n               this.position == 'after' && !isLtr) {\r\n      position = {overlayX: 'end', overlayY: 'center'};\r\n    } else if (this.position == 'right' ||\r\n               this.position == 'after' && isLtr ||\r\n               this.position == 'before' && !isLtr) {\r\n      position = {overlayX: 'start', overlayY: 'center'};\r\n    } else {\r\n      throw getMatTooltipInvalidPositionError(this.position);\r\n    }\r\n\r\n    const {x, y} = this._invertPosition(position.overlayX, position.overlayY);\r\n\r\n    return {\r\n      main: position,\r\n      fallback: {overlayX: x, overlayY: y}\r\n    };\r\n  }\r\n\r\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\r\n  private _updateTooltipMessage() {\r\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\r\n    // calculate the correct positioning based on the size of the text.\r\n    if (this._tooltipInstance) {\r\n      this._tooltipInstance.message = this.message;\r\n      this._tooltipInstance._markForCheck();\r\n\r\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\r\n        if (this._tooltipInstance) {\r\n          this._overlayRef!.updatePosition();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Updates the tooltip class */\r\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\r\n    if (this._tooltipInstance) {\r\n      this._tooltipInstance.tooltipClass = tooltipClass;\r\n      this._tooltipInstance._markForCheck();\r\n    }\r\n  }\r\n\r\n  /** Inverts an overlay position. */\r\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\r\n    if (this.position === 'above' || this.position === 'below') {\r\n      if (y === 'top') {\r\n        y = 'bottom';\r\n      } else if (y === 'bottom') {\r\n        y = 'top';\r\n      }\r\n    } else {\r\n      if (x === 'end') {\r\n        x = 'start';\r\n      } else if (x === 'start') {\r\n        x = 'end';\r\n      }\r\n    }\r\n\r\n    return {x, y};\r\n  }\r\n}\r\n\r\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\r\n\r\n/**\r\n * Internal component that wraps the tooltip's content.\r\n * @docs-private\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-tooltip-component',\r\n  templateUrl: 'tooltip.html',\r\n  styleUrls: ['tooltip.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [matTooltipAnimations.tooltipState],\r\n  host: {\r\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\r\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\r\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\r\n    '(body:click)': 'this._handleBodyInteraction()',\r\n    'aria-hidden': 'true',\r\n  }\r\n})\r\nexport class TooltipComponent {\r\n  /** Message to display in the tooltip */\r\n  message: string;\r\n\r\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\r\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\r\n\r\n  /** The timeout ID of any current timer set to show the tooltip */\r\n  _showTimeoutId: number;\r\n\r\n  /** The timeout ID of any current timer set to hide the tooltip */\r\n  _hideTimeoutId: number;\r\n\r\n  /** Property watched by the animation framework to show or hide the tooltip */\r\n  _visibility: TooltipVisibility = 'initial';\r\n\r\n  /** Whether interactions on the page should close the tooltip */\r\n  private _closeOnInteraction: boolean = false;\r\n\r\n  /** The transform origin used in the animation for showing and hiding the tooltip */\r\n  _transformOrigin: 'top' | 'bottom' | 'left' | 'right' = 'bottom';\r\n\r\n  /** Current position of the tooltip. */\r\n  private _position: TooltipPosition;\r\n\r\n  /** Subject for notifying that the tooltip has been hidden from the view */\r\n  private readonly _onHide: Subject<any> = new Subject();\r\n\r\n  /** Stream that emits whether the user has a handset-sized display.  */\r\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\r\n\r\n  constructor(\r\n    private _changeDetectorRef: ChangeDetectorRef,\r\n    private _breakpointObserver: BreakpointObserver) {}\r\n\r\n  /**\r\n   * Shows the tooltip with an animation originating from the provided origin\r\n   * @param position Position of the tooltip.\r\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\r\n   */\r\n  show(position: TooltipPosition, delay: number): void {\r\n    // Cancel the delayed hide if it is scheduled\r\n    if (this._hideTimeoutId) {\r\n      clearTimeout(this._hideTimeoutId);\r\n    }\r\n\r\n    // Body interactions should cancel the tooltip if there is a delay in showing.\r\n    this._closeOnInteraction = true;\r\n    this._position = position;\r\n    this._showTimeoutId = setTimeout(() => {\r\n      this._visibility = 'visible';\r\n\r\n      // Mark for check so if any parent component has set the\r\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\r\n      this._markForCheck();\r\n    }, delay);\r\n  }\r\n\r\n  /**\r\n   * Begins the animation to hide the tooltip after the provided delay in ms.\r\n   * @param delay Amount of milliseconds to delay showing the tooltip.\r\n   */\r\n  hide(delay: number): void {\r\n    // Cancel the delayed show if it is scheduled\r\n    if (this._showTimeoutId) {\r\n      clearTimeout(this._showTimeoutId);\r\n    }\r\n\r\n    this._hideTimeoutId = setTimeout(() => {\r\n      this._visibility = 'hidden';\r\n\r\n      // Mark for check so if any parent component has set the\r\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\r\n      this._markForCheck();\r\n    }, delay);\r\n  }\r\n\r\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\r\n  afterHidden(): Observable<void> {\r\n    return this._onHide.asObservable();\r\n  }\r\n\r\n  /** Whether the tooltip is being displayed. */\r\n  isVisible(): boolean {\r\n    return this._visibility === 'visible';\r\n  }\r\n\r\n  /** Sets the tooltip transform origin according to the position of the tooltip overlay. */\r\n  _setTransformOrigin(overlayPosition: ConnectionPositionPair) {\r\n    const axis = (this._position === 'above' || this._position === 'below') ? 'Y' : 'X';\r\n    const position = axis == 'X' ? overlayPosition.overlayX : overlayPosition.overlayY;\r\n\r\n    if (position === 'top' || position === 'bottom') {\r\n      this._transformOrigin = position;\r\n    } else if (position === 'start') {\r\n      this._transformOrigin = 'left';\r\n    } else if (position === 'end') {\r\n      this._transformOrigin = 'right';\r\n    } else {\r\n      throw getMatTooltipInvalidPositionError(this._position);\r\n    }\r\n  }\r\n\r\n  _animationStart() {\r\n    this._closeOnInteraction = false;\r\n  }\r\n\r\n  _animationDone(event: AnimationEvent): void {\r\n    const toState = event.toState as TooltipVisibility;\r\n\r\n    if (toState === 'hidden' && !this.isVisible()) {\r\n      this._onHide.next();\r\n    }\r\n\r\n    if (toState === 'visible' || toState === 'hidden') {\r\n      this._closeOnInteraction = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\r\n   * material design spec.\r\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\r\n   */\r\n  _handleBodyInteraction(): void {\r\n    if (this._closeOnInteraction) {\r\n      this.hide(0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Marks that the tooltip needs to be checked in the next change detection run.\r\n   * Mainly used for rendering the initial text before positioning a tooltip, which\r\n   * can be problematic in components with OnPush change detection.\r\n   */\r\n  _markForCheck(): void {\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {CdkStep, CdkStepper} from '@angular/cdk/stepper';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {\r\n  AfterContentInit,\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  Directive,\r\n  ElementRef,\r\n  forwardRef,\r\n  Inject,\r\n  QueryList,\r\n  SkipSelf,\r\n  ViewChildren,\r\n  ViewEncapsulation,\r\n  ChangeDetectorRef,\r\n  ChangeDetectionStrategy,\r\n  Optional,\r\n  TemplateRef,\r\n} from '@angular/core';\r\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\r\nimport {ErrorStateMatcher} from '@angular/material/core';\r\nimport {MatStepHeader} from './step-header';\r\nimport {MatStepLabel} from './step-label';\r\nimport {takeUntil} from 'rxjs/operators/takeUntil';\r\nimport {matStepperAnimations} from './stepper-animations';\r\nimport {MatStepperIcon} from './stepper-icon';\r\n\r\n/** Workaround for https://github.com/angular/angular/issues/17849 */\r\nexport const _MatStep = CdkStep;\r\nexport const _MatStepper = CdkStepper;\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-step',\r\n  templateUrl: 'step.html',\r\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\r\n  encapsulation: ViewEncapsulation.None,\r\n  exportAs: 'matStep',\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\r\n  /** Content for step label given by `<ng-template matStepLabel>`. */\r\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\r\n\r\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\r\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\r\n    super(stepper);\r\n  }\r\n\r\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\r\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\r\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\r\n\r\n    // Custom error state checks for the validity of form that is not submitted or touched\r\n    // since user can trigger a form change by calling for another step without directly\r\n    // interacting with the current form.\r\n    const customErrorState = !!(control && control.invalid && this.interacted);\r\n\r\n    return originalErrorState || customErrorState;\r\n  }\r\n}\r\n\r\n\r\n@Directive({\r\n  selector: '[matStepper]'\r\n})\r\nexport class MatStepper extends CdkStepper implements AfterContentInit {\r\n  /** The list of step headers of the steps in the stepper. */\r\n  @ViewChildren(MatStepHeader, {read: ElementRef}) _stepHeader: QueryList<ElementRef>;\r\n\r\n  /** Steps that the stepper holds. */\r\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\r\n\r\n  /** Custom icon overrides passed in by the consumer. */\r\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\r\n\r\n  /** Consumer-specified template-refs to be used to override the header icons. */\r\n  _iconOverrides: {[key: string]: TemplateRef<any>} = {};\r\n\r\n  ngAfterContentInit() {\r\n    const icons = this._icons.toArray();\r\n    const editOverride = icons.find(icon => icon.name === 'edit');\r\n    const doneOverride = icons.find(icon => icon.name === 'done');\r\n\r\n    if (editOverride) {\r\n      this._iconOverrides.edit = editOverride.templateRef;\r\n    }\r\n\r\n    if (doneOverride) {\r\n      this._iconOverrides.done = doneOverride.templateRef;\r\n    }\r\n\r\n    // Mark the component for change detection whenever the content children query changes\r\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\r\n  }\r\n}\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-horizontal-stepper',\r\n  exportAs: 'matHorizontalStepper',\r\n  templateUrl: 'stepper-horizontal.html',\r\n  styleUrls: ['stepper.css'],\r\n  inputs: ['selectedIndex'],\r\n  host: {\r\n    'class': 'mat-stepper-horizontal',\r\n    'aria-orientation': 'horizontal',\r\n    'role': 'tablist',\r\n  },\r\n  animations: [matStepperAnimations.horizontalStepTransition],\r\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatHorizontalStepper extends MatStepper { }\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-vertical-stepper',\r\n  exportAs: 'matVerticalStepper',\r\n  templateUrl: 'stepper-vertical.html',\r\n  styleUrls: ['stepper.css'],\r\n  inputs: ['selectedIndex'],\r\n  host: {\r\n    'class': 'mat-stepper-vertical',\r\n    'aria-orientation': 'vertical',\r\n    'role': 'tablist',\r\n  },\r\n  animations: [matStepperAnimations.verticalStepTransition],\r\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatVerticalStepper extends MatStepper {\r\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\r\n    super(dir, changeDetectorRef);\r\n    this._orientation = 'vertical';\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive} from '@angular/core';\r\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\r\nimport {MatStepper} from './stepper';\r\n\r\n/** Button that moves to the next step in a stepper workflow. */\r\n@Directive({\r\n  selector: 'button[matStepperNext]',\r\n  host: {\r\n    '(click)': '_stepper.next()',\r\n    '[type]': 'type',\r\n  },\r\n  inputs: ['type'],\r\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\r\n})\r\nexport class MatStepperNext extends CdkStepperNext {}\r\n\r\n/** Button that moves to the previous step in a stepper workflow. */\r\n@Directive({\r\n  selector: 'button[matStepperPrevious]',\r\n  host: {\r\n    '(click)': '_stepper.previous()',\r\n    '[type]': 'type',\r\n  },\r\n  inputs: ['type'],\r\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\r\n})\r\nexport class MatStepperPrevious extends CdkStepperPrevious {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {A11yModule} from '@angular/cdk/a11y';\r\nimport {PortalModule} from '@angular/cdk/portal';\r\nimport {CdkStepperModule} from '@angular/cdk/stepper';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {MatButtonModule} from '@angular/material/button';\r\nimport {MatCommonModule, MatRippleModule, ErrorStateMatcher} from '@angular/material/core';\r\nimport {MatIconModule} from '@angular/material/icon';\r\nimport {MatStepHeader} from './step-header';\r\nimport {MatStepLabel} from './step-label';\r\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\r\nimport {MatStepperIntl} from './stepper-intl';\r\nimport {MatStepperIcon} from './stepper-icon';\r\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    MatCommonModule,\r\n    CommonModule,\r\n    PortalModule,\r\n    MatButtonModule,\r\n    CdkStepperModule,\r\n    MatIconModule,\r\n    A11yModule,\r\n    MatRippleModule,\r\n  ],\r\n  exports: [\r\n    MatCommonModule,\r\n    MatHorizontalStepper,\r\n    MatVerticalStepper,\r\n    MatStep,\r\n    MatStepLabel,\r\n    MatStepper,\r\n    MatStepperNext,\r\n    MatStepperPrevious,\r\n    MatStepHeader,\r\n    MatStepperIcon,\r\n  ],\r\n  declarations: [\r\n    MatHorizontalStepper,\r\n    MatVerticalStepper,\r\n    MatStep,\r\n    MatStepLabel,\r\n    MatStepper,\r\n    MatStepperNext,\r\n    MatStepperPrevious,\r\n    MatStepHeader,\r\n    MatStepperIcon,\r\n  ],\r\n  providers: [MatStepperIntl, ErrorStateMatcher],\r\n})\r\nexport class MatStepperModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\r\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\r\n\r\n/**\r\n * Wrapper for the CdkTable with Material design styles.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-table',\r\n  exportAs: 'matTable',\r\n  template: CDK_TABLE_TEMPLATE,\r\n  styleUrls: ['table.css'],\r\n  host: {\r\n    'class': 'mat-table',\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatTable<T> extends CdkTable<T> { }\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, ElementRef, Input} from '@angular/core';\r\nimport {\r\n  CdkCell,\r\n  CdkCellDef,\r\n  CdkColumnDef,\r\n  CdkHeaderCell,\r\n  CdkHeaderCellDef,\r\n} from '@angular/cdk/table';\r\n\r\n/**\r\n * Cell definition for the mat-table.\r\n * Captures the template of a column's data row cell as well as cell-specific properties.\r\n */\r\n@Directive({\r\n  selector: '[matCellDef]',\r\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\r\n})\r\nexport class MatCellDef extends CdkCellDef { }\r\n\r\n/**\r\n * Header cell definition for the mat-table.\r\n * Captures the template of a column's header cell and as well as cell-specific properties.\r\n */\r\n@Directive({\r\n  selector: '[matHeaderCellDef]',\r\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\r\n})\r\nexport class MatHeaderCellDef extends CdkHeaderCellDef { }\r\n\r\n/**\r\n * Column definition for the mat-table.\r\n * Defines a set of cells available for a table column.\r\n */\r\n@Directive({\r\n  selector: '[matColumnDef]',\r\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\r\n})\r\nexport class MatColumnDef extends CdkColumnDef {\r\n  /** Unique name for this column. */\r\n  @Input('matColumnDef') name: string;\r\n}\r\n\r\n/** Header cell template container that adds the right classes and role. */\r\n@Directive({\r\n  selector: 'mat-header-cell',\r\n  host: {\r\n    'class': 'mat-header-cell',\r\n    'role': 'columnheader',\r\n  },\r\n})\r\nexport class MatHeaderCell extends CdkHeaderCell {\r\n  constructor(columnDef: CdkColumnDef,\r\n              elementRef: ElementRef) {\r\n    super(columnDef, elementRef);\r\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\r\n  }\r\n}\r\n\r\n/** Cell template container that adds the right classes and role. */\r\n@Directive({\r\n  selector: 'mat-cell',\r\n  host: {\r\n    'class': 'mat-cell',\r\n    'role': 'gridcell',\r\n  },\r\n})\r\nexport class MatCell extends CdkCell {\r\n  constructor(columnDef: CdkColumnDef,\r\n              elementRef: ElementRef) {\r\n    super(columnDef, elementRef);\r\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\r\nimport {\r\n  CDK_ROW_TEMPLATE,\r\n  CdkHeaderRow,\r\n  CdkHeaderRowDef,\r\n  CdkRow,\r\n  CdkRowDef,\r\n} from '@angular/cdk/table';\r\n\r\n/**\r\n * Header row definition for the mat-table.\r\n * Captures the header row's template and other header properties such as the columns to display.\r\n */\r\n@Directive({\r\n  selector: '[matHeaderRowDef]',\r\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\r\n  inputs: ['columns: matHeaderRowDef'],\r\n})\r\nexport class MatHeaderRowDef extends CdkHeaderRowDef { }\r\n\r\n/**\r\n * Data row definition for the mat-table.\r\n * Captures the header row's template and other row properties such as the columns to display and\r\n * a when predicate that describes when this row should be used.\r\n */\r\n@Directive({\r\n  selector: '[matRowDef]',\r\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\r\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\r\n})\r\nexport class MatRowDef<T> extends CdkRowDef<T> {\r\n}\r\n\r\n/** Header template container that contains the cell outlet. Adds the right class and role. */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-header-row',\r\n  template: CDK_ROW_TEMPLATE,\r\n  host: {\r\n    'class': 'mat-header-row',\r\n    'role': 'row',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  exportAs: 'matHeaderRow',\r\n  preserveWhitespaces: false,\r\n})\r\nexport class MatHeaderRow extends CdkHeaderRow { }\r\n\r\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-row',\r\n  template: CDK_ROW_TEMPLATE,\r\n  host: {\r\n    'class': 'mat-row',\r\n    'role': 'row',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  exportAs: 'matRow',\r\n  preserveWhitespaces: false,\r\n})\r\nexport class MatRow extends CdkRow { }\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {MatTable} from './table';\r\nimport {CdkTableModule} from '@angular/cdk/table';\r\nimport {MatCell, MatCellDef, MatColumnDef, MatHeaderCell, MatHeaderCellDef} from './cell';\r\nimport {MatHeaderRow, MatHeaderRowDef, MatRow, MatRowDef} from './row';\r\nimport {CommonModule} from '@angular/common';\r\nimport {MatCommonModule} from '@angular/material/core';\r\n\r\n@NgModule({\r\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\r\n  exports: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\r\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\r\n    MatHeaderRowDef, MatRowDef],\r\n  declarations: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\r\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\r\n    MatHeaderRowDef, MatRowDef],\r\n})\r\nexport class MatTableModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {DataSource} from '@angular/cdk/table';\r\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\r\nimport {MatPaginator} from '@angular/material/paginator';\r\nimport {MatSort} from '@angular/material/sort';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {combineLatest} from 'rxjs/operators/combineLatest';\r\nimport {map} from 'rxjs/operators/map';\r\nimport {startWith} from 'rxjs/operators/startWith';\r\nimport {empty} from 'rxjs/observable/empty';\r\nimport {_isNumberValue} from '@angular/cdk/coercion';\r\n\r\n/**\r\n * Data source that accepts a client-side data array and includes native support of filtering,\r\n * sorting (using MatSort), and pagination (using MatPaginator).\r\n *\r\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\r\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\r\n * which defines how row data is converted to a string for filter matching.\r\n */\r\nexport class MatTableDataSource<T> extends DataSource<T> {\r\n  /** Stream that emits when a new data array is set on the data source. */\r\n  private readonly _data: BehaviorSubject<T[]>;\r\n\r\n  /** Stream emitting render data to the table (depends on ordered data changes). */\r\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\r\n\r\n  /** Stream that emits when a new filter string is set on the data source. */\r\n  private readonly _filter = new BehaviorSubject<string>('');\r\n\r\n  /**\r\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\r\n   * as filtering, sorting, pagination, or base data changes.\r\n   */\r\n  _renderChangesSubscription: Subscription;\r\n\r\n  /**\r\n   * The filtered set of data that has been matched by the filter string, or all the data if there\r\n   * is no filter. Useful for knowing the set of data the table represents.\r\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\r\n   * shown to the user rather than all the data.\r\n   */\r\n  filteredData: T[];\r\n\r\n  /** Array of data that should be rendered by the table, where each object represents one row. */\r\n  get data() { return this._data.value; }\r\n  set data(data: T[]) { this._data.next(data); }\r\n\r\n  /**\r\n   * Filter term that should be used to filter out objects from the data array. To override how\r\n   * data objects match to this filter string, provide a custom function for filterPredicate.\r\n   */\r\n  get filter(): string { return this._filter.value; }\r\n  set filter(filter: string) { this._filter.next(filter); }\r\n\r\n  /**\r\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\r\n   * emitted by the MatSort will trigger an update to the table's rendered data.\r\n   */\r\n  get sort(): MatSort | null { return this._sort; }\r\n  set sort(sort: MatSort|null) {\r\n    this._sort = sort;\r\n    this._updateChangeSubscription();\r\n  }\r\n  private _sort: MatSort|null;\r\n\r\n  /**\r\n   * Instance of the MatPaginator component used by the table to control what page of the data is\r\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\r\n   * table's rendered data.\r\n   *\r\n   * Note that the data source uses the paginator's properties to calculate which page of data\r\n   * should be displayed. If the paginator receives its properties as template inputs,\r\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\r\n   * initialized before assigning it to this data source.\r\n   */\r\n  get paginator(): MatPaginator | null { return this._paginator; }\r\n  set paginator(paginator: MatPaginator|null) {\r\n    this._paginator = paginator;\r\n    this._updateChangeSubscription();\r\n  }\r\n  private _paginator: MatPaginator|null;\r\n\r\n  /**\r\n   * Data accessor function that is used for accessing data properties for sorting through\r\n   * the default sortData function.\r\n   * This default function assumes that the sort header IDs (which defaults to the column name)\r\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\r\n   * May be set to a custom function for different behavior.\r\n   * @param data Data object that is being accessed.\r\n   * @param sortHeaderId The name of the column that represents the data.\r\n   */\r\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\r\n      (data: T, sortHeaderId: string): string|number => {\r\n    const value: any = data[sortHeaderId];\r\n    return _isNumberValue(value) ? Number(value) : value;\r\n  }\r\n\r\n  /**\r\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\r\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\r\n   * By default, the function retrieves the active sort and its direction and compares data\r\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\r\n   * of data ordering.\r\n   * @param data The array of data that should be sorted.\r\n   * @param sort The connected MatSort that holds the current sort state.\r\n   */\r\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\r\n    const active = sort.active;\r\n    const direction = sort.direction;\r\n    if (!active || direction == '') { return data; }\r\n\r\n    return data.sort((a, b) => {\r\n      let valueA = this.sortingDataAccessor(a, active);\r\n      let valueB = this.sortingDataAccessor(b, active);\r\n\r\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\r\n      // one value exists while the other doesn't. In this case, existing value should come first.\r\n      // This avoids inconsistent results when comparing values to undefined/null.\r\n      // If neither value exists, return 0 (equal).\r\n      let comparatorResult = 0;\r\n      if (valueA && valueB) {\r\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\r\n        if (valueA > valueB) {\r\n          comparatorResult = 1;\r\n        } else if (valueA < valueB) {\r\n          comparatorResult = -1;\r\n        }\r\n      } else if (valueA) {\r\n        comparatorResult = 1;\r\n      } else if (valueB) {\r\n        comparatorResult = -1;\r\n      }\r\n\r\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Checks if a data object matches the data source's filter string. By default, each data object\r\n   * is converted to a string of its properties and returns true if the filter has\r\n   * at least one occurrence in that string. By default, the filter string has its whitespace\r\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\r\n   * filter matching.\r\n   * @param data Data object used to check against the filter.\r\n   * @param filter Filter string that has been set on the data source.\r\n   * @returns Whether the filter matches against the data\r\n   */\r\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\r\n    // Transform the data into a lowercase string of all property values.\r\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\r\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\r\n\r\n    // Transform the filter by converting it to lowercase and removing whitespace.\r\n    const transformedFilter = filter.trim().toLowerCase();\r\n\r\n    return dataStr.indexOf(transformedFilter) != -1;\r\n  }\r\n\r\n  constructor(initialData: T[] = []) {\r\n    super();\r\n    this._data = new BehaviorSubject<T[]>(initialData);\r\n    this._updateChangeSubscription();\r\n  }\r\n\r\n  /**\r\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\r\n   * changes occur, process the current state of the filter, sort, and pagination along with\r\n   * the provided base data and send it to the table for rendering.\r\n   */\r\n  _updateChangeSubscription() {\r\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\r\n    // Otherwise, use an empty observable stream to take their place.\r\n    const sortChange = this._sort ? this._sort.sortChange : empty();\r\n    const pageChange = this._paginator ? this._paginator.page : empty();\r\n\r\n    if (this._renderChangesSubscription) {\r\n      this._renderChangesSubscription.unsubscribe();\r\n    }\r\n\r\n    // Watch for base data or filter changes to provide a filtered set of data.\r\n    this._renderChangesSubscription = this._data.pipe(\r\n      combineLatest(this._filter),\r\n      map(([data]) => this._filterData(data)),\r\n      // Watch for filtered data or sort changes to provide an ordered set of data.\r\n      combineLatest(sortChange.pipe(startWith(null!))),\r\n      map(([data]) => this._orderData(data)),\r\n      // Watch for ordered data or page changes to provide a paged set of data.\r\n      combineLatest(pageChange.pipe(startWith(null!))),\r\n      map(([data]) => this._pageData(data))\r\n    )\r\n    // Watched for paged data changes and send the result to the table to render.\r\n    .subscribe(data => this._renderData.next(data));\r\n  }\r\n\r\n  /**\r\n   * Returns a filtered data array where each filter object contains the filter string within\r\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\r\n   * as provided.\r\n   */\r\n  _filterData(data: T[]) {\r\n    // If there is a filter string, filter out data that does not contain it.\r\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\r\n    // May be overridden for customization.\r\n    this.filteredData =\r\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\r\n\r\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\r\n\r\n    return this.filteredData;\r\n  }\r\n\r\n  /**\r\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\r\n   * data array as provided. Uses the default data accessor for data lookup, unless a\r\n   * sortDataAccessor function is defined.\r\n   */\r\n  _orderData(data: T[]): T[] {\r\n    // If there is no active sort or direction, return the data without trying to sort.\r\n    if (!this.sort) { return data; }\r\n\r\n    return this.sortData(data.slice(), this.sort);\r\n  }\r\n\r\n  /**\r\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\r\n   * index and length. If there is no paginator provided, returns the data array as provided.\r\n   */\r\n  _pageData(data: T[]): T[] {\r\n    if (!this.paginator) { return data; }\r\n\r\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\r\n    return data.slice().splice(startIndex, this.paginator.pageSize);\r\n  }\r\n\r\n  /**\r\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\r\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\r\n   * guard against making property changes within a round of change detection.\r\n   */\r\n  _updatePaginator(filteredDataLength: number) {\r\n    Promise.resolve().then(() => {\r\n      if (!this.paginator) { return; }\r\n\r\n      this.paginator.length = filteredDataLength;\r\n\r\n      // If the page index is set beyond the page, reduce it to the last page.\r\n      if (this.paginator.pageIndex > 0) {\r\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\r\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Used by the MatTable. Called when it connects to the data source.\r\n   * @docs-private\r\n   */\r\n  connect() { return this._renderData; }\r\n\r\n  /**\r\n   * Used by the MatTable. Called when it is destroyed. No-op.\r\n   * @docs-private\r\n   */\r\n  disconnect() { }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, ElementRef, NgZone} from '@angular/core';\r\n\r\n\r\n/**\r\n * The ink-bar is used to display and animate the line underneath the current active tab label.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: 'mat-ink-bar',\r\n  host: {\r\n    'class': 'mat-ink-bar',\r\n  },\r\n})\r\nexport class MatInkBar {\r\n  constructor(\r\n    private _elementRef: ElementRef,\r\n    private _ngZone: NgZone) {}\r\n\r\n  /**\r\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\r\n   * Shows the ink bar if previously set as hidden.\r\n   * @param element\r\n   */\r\n  alignToElement(element: HTMLElement) {\r\n    this.show();\r\n\r\n    if (typeof requestAnimationFrame !== 'undefined') {\r\n      this._ngZone.runOutsideAngular(() => {\r\n        requestAnimationFrame(() => this._setStyles(element));\r\n      });\r\n    } else {\r\n      this._setStyles(element);\r\n    }\r\n  }\r\n\r\n  /** Shows the ink bar. */\r\n  show(): void {\r\n    this._elementRef.nativeElement.style.visibility = 'visible';\r\n  }\r\n\r\n  /** Hides the ink bar. */\r\n  hide(): void {\r\n    this._elementRef.nativeElement.style.visibility = 'hidden';\r\n  }\r\n\r\n  /**\r\n   * Sets the proper styles to the ink bar element.\r\n   * @param element\r\n   */\r\n  private _setStyles(element: HTMLElement) {\r\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\r\n\r\n    inkBar.style.left = element ? (element.offsetLeft || 0) + 'px' : '0';\r\n    inkBar.style.width = element ? (element.offsetWidth || 0) + 'px' : '0';\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\r\nimport {CdkPortal} from '@angular/cdk/portal';\r\n\r\n/** Used to flag tab labels for use with the portal directive */\r\n@Directive({\r\n  selector: '[mat-tab-label], [matTabLabel]',\r\n})\r\nexport class MatTabLabel extends CdkPortal {\r\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\r\n    super(templateRef, viewContainerRef);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {TemplatePortal} from '@angular/cdk/portal';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ContentChild,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  SimpleChanges,\r\n  TemplateRef,\r\n  ViewChild,\r\n  ViewContainerRef,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {MatTabLabel} from './tab-label';\r\n\r\n\r\n// Boilerplate for applying mixins to MatTab.\r\n/** @docs-private */\r\nexport class MatTabBase {}\r\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-tab',\r\n  templateUrl: 'tab.html',\r\n  inputs: ['disabled'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  exportAs: 'matTab',\r\n})\r\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\r\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\r\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\r\n\r\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\r\n  @ViewChild(TemplateRef) _content: TemplateRef<any>;\r\n\r\n  /** The plain text label for the tab, used when there is no template label. */\r\n  @Input('label') textLabel: string = '';\r\n\r\n  /** The portal that will be the hosted content of the tab */\r\n  private _contentPortal: TemplatePortal | null = null;\r\n\r\n  /** @docs-private */\r\n  get content(): TemplatePortal | null {\r\n    return this._contentPortal;\r\n  }\r\n\r\n  /** Emits whenever the label changes. */\r\n  readonly _labelChange = new Subject<void>();\r\n\r\n  /** Emits whenever the disable changes */\r\n  readonly _disableChange = new Subject<void>();\r\n\r\n  /**\r\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\r\n   * represents the right.\r\n   */\r\n  position: number | null = null;\r\n\r\n  /**\r\n   * The initial relatively index origin of the tab if it was created and selected after there\r\n   * was already a selected tab. Provides context of what position the tab should originate from.\r\n   */\r\n  origin: number | null = null;\r\n\r\n  /**\r\n   * Whether the tab is currently active.\r\n   */\r\n  isActive = false;\r\n\r\n  constructor(private _viewContainerRef: ViewContainerRef) {\r\n    super();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.hasOwnProperty('textLabel')) {\r\n      this._labelChange.next();\r\n    }\r\n\r\n    if (changes.hasOwnProperty('disabled')) {\r\n      this._disableChange.next();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this._disableChange.complete();\r\n    this._labelChange.complete();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this._contentPortal = new TemplatePortal(this._content, this._viewContainerRef);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {\r\n  animate,\r\n  state,\r\n  style,\r\n  transition,\r\n  trigger,\r\n  AnimationTriggerMetadata,\r\n} from '@angular/animations';\r\n\r\n/** Animations used by the Material tabs. */\r\nexport const matTabsAnimations: {\r\n  readonly translateTab: AnimationTriggerMetadata;\r\n} = {\r\n  /** Animation translates a tab along the X axis. */\r\n  translateTab: trigger('translateTab', [\r\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\r\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\r\n    state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\r\n    state('right', style({transform: 'translate3d(100%, 0, 0)'})),\r\n    transition('* => left, * => right, left => center, right => center',\r\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\r\n    transition('void => left-origin-center', [\r\n      style({transform: 'translate3d(-100%, 0, 0)'}),\r\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\r\n    ]),\r\n    transition('void => right-origin-center', [\r\n      style({transform: 'translate3d(100%, 0, 0)'}),\r\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\r\n    ])\r\n  ])\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  Component,\r\n  Input,\r\n  Inject,\r\n  Output,\r\n  EventEmitter,\r\n  OnDestroy,\r\n  OnInit,\r\n  ElementRef,\r\n  Directive,\r\n  Optional,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  ComponentFactoryResolver,\r\n  ViewContainerRef,\r\n  forwardRef,\r\n} from '@angular/core';\r\nimport {AnimationEvent} from '@angular/animations';\r\nimport {TemplatePortal, CdkPortalOutlet} from '@angular/cdk/portal';\r\nimport {Directionality, Direction} from '@angular/cdk/bidi';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {matTabsAnimations} from './tabs-animations';\r\n\r\n/**\r\n * These position states are used internally as animation states for the tab body. Setting the\r\n * position state to left, right, or center will transition the tab body from its current\r\n * position to its respective state. If there is not current position (void, in the case of a new\r\n * tab body), then there will be no transition animation to its state.\r\n *\r\n * In the case of a new tab body that should immediately be centered with an animating transition,\r\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\r\n * psuedo-prior state.\r\n */\r\nexport type MatTabBodyPositionState =\r\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\r\n\r\n/**\r\n * The origin state is an internally used state that is set on a new tab body indicating if it\r\n * began to the left or right of the prior selected index. For example, if the selected index was\r\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\r\n * origin of right because its index was greater than the prior selected index.\r\n */\r\nexport type MatTabBodyOriginState = 'left' | 'right';\r\n\r\n/**\r\n * The portal host directive for the contents of the tab.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: '[matTabBodyHost]'\r\n})\r\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\r\n  /** A subscription to events for when the tab body begins centering. */\r\n  private _centeringSub: Subscription;\r\n  /** A subscription to events for when the tab body finishes leaving from center position. */\r\n  private _leavingSub: Subscription;\r\n\r\n  constructor(\r\n    _componentFactoryResolver: ComponentFactoryResolver,\r\n    _viewContainerRef: ViewContainerRef,\r\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\r\n      super(_componentFactoryResolver, _viewContainerRef);\r\n  }\r\n\r\n  /** Set initial visibility or set up subscription for changing visibility. */\r\n  ngOnInit(): void {\r\n    if (this._host._isCenterPosition(this._host._position)) {\r\n      this.attach(this._host._content);\r\n    }\r\n    this._centeringSub = this._host._beforeCentering.subscribe((isCentering: boolean) => {\r\n      if (isCentering) {\r\n        if (!this.hasAttached()) {\r\n          this.attach(this._host._content);\r\n        }\r\n      }\r\n    });\r\n\r\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\r\n      this.detach();\r\n    });\r\n  }\r\n\r\n  /** Clean up centering subscription. */\r\n  ngOnDestroy(): void {\r\n    if (this._centeringSub && !this._centeringSub.closed) {\r\n      this._centeringSub.unsubscribe();\r\n    }\r\n\r\n    if (this._leavingSub && !this._leavingSub.closed) {\r\n      this._leavingSub.unsubscribe();\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Wrapper for the contents of a tab.\r\n * @docs-private\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-tab-body',\r\n  templateUrl: 'tab-body.html',\r\n  styleUrls: ['tab-body.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [matTabsAnimations.translateTab],\r\n  host: {\r\n    'class': 'mat-tab-body',\r\n  },\r\n})\r\nexport class MatTabBody implements OnInit {\r\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\r\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\r\n\r\n  /** Event emitted before the centering of the tab begins. */\r\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n\r\n  /** Event emitted before the centering of the tab begins. */\r\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n\r\n  /** Event emitted when the tab completes its animation towards the center. */\r\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\r\n\r\n  /** The tab body content to display. */\r\n  @Input('content') _content: TemplatePortal;\r\n\r\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\r\n  @Input()\r\n  set position(position: number) {\r\n    if (position < 0) {\r\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\r\n    } else if (position > 0) {\r\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\r\n    } else {\r\n      this._position = 'center';\r\n    }\r\n  }\r\n  _position: MatTabBodyPositionState;\r\n\r\n  /** The origin position from which this tab should appear when it is centered into view. */\r\n  @Input()\r\n  set origin(origin: number) {\r\n    if (origin == null) { return; }\r\n\r\n    const dir = this._getLayoutDirection();\r\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\r\n      this._origin = 'left';\r\n    } else {\r\n      this._origin = 'right';\r\n    }\r\n  }\r\n  _origin: MatTabBodyOriginState;\r\n\r\n  constructor(private _elementRef: ElementRef,\r\n              @Optional() private _dir: Directionality) { }\r\n\r\n  /**\r\n   * After initialized, check if the content is centered and has an origin. If so, set the\r\n   * special position states that transition the tab from the left or right before centering.\r\n   */\r\n  ngOnInit() {\r\n    if (this._position == 'center' && this._origin) {\r\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\r\n    }\r\n  }\r\n\r\n  _onTranslateTabStarted(e: AnimationEvent): void {\r\n    const isCentering = this._isCenterPosition(e.toState);\r\n    this._beforeCentering.emit(isCentering);\r\n    if (isCentering) {\r\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\r\n    }\r\n  }\r\n\r\n  _onTranslateTabComplete(e: AnimationEvent): void {\r\n    // If the transition to the center is complete, emit an event.\r\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\r\n      this._onCentered.emit();\r\n    }\r\n\r\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\r\n      this._afterLeavingCenter.emit();\r\n    }\r\n  }\r\n\r\n  /** The text direction of the containing app. */\r\n  _getLayoutDirection(): Direction {\r\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\r\n  }\r\n\r\n  /** Whether the provided position state is considered center, regardless of origin. */\r\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\r\n    return position == 'center' ||\r\n        position == 'left-origin-center' ||\r\n        position == 'right-origin-center';\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  AfterContentChecked,\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnDestroy,\r\n  Output,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {MatTab} from './tab';\r\nimport {MatTabHeader} from './tab-header';\r\nimport {merge} from 'rxjs/observable/merge';\r\nimport {\r\n  CanColor,\r\n  CanDisableRipple,\r\n  mixinColor,\r\n  mixinDisableRipple,\r\n  ThemePalette\r\n} from '@angular/material/core';\r\n\r\n\r\n/** Used to generate unique ID's for each tab component */\r\nlet nextId = 0;\r\n\r\n/** A simple change event emitted on focus or selection changes. */\r\nexport class MatTabChangeEvent {\r\n  /** Index of the currently-selected tab. */\r\n  index: number;\r\n  /** Reference to the currently-selected tab. */\r\n  tab: MatTab;\r\n}\r\n\r\n/** Possible positions for the tab header. */\r\nexport type MatTabHeaderPosition = 'above' | 'below';\r\n\r\n// Boilerplate for applying mixins to MatTabGroup.\r\n/** @docs-private */\r\nexport class MatTabGroupBase {\r\n  constructor(public _elementRef: ElementRef) {}\r\n}\r\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\r\n\r\n/**\r\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\r\n * animated ink-bar, keyboard navigation, and screen reader.\r\n * See: https://www.google.com/design/spec/components/tabs.html\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-tab-group',\r\n  exportAs: 'matTabGroup',\r\n  templateUrl: 'tab-group.html',\r\n  styleUrls: ['tab-group.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  inputs: ['color', 'disableRipple'],\r\n  host: {\r\n    'class': 'mat-tab-group',\r\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\r\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\r\n  },\r\n})\r\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\r\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\r\n\r\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\r\n\r\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\r\n\r\n  /** The tab index that should be selected after the content has been checked. */\r\n  private _indexToSelect: number | null = 0;\r\n\r\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\r\n  private _tabBodyWrapperHeight: number = 0;\r\n\r\n  /** Subscription to tabs being added/removed. */\r\n  private _tabsSubscription = Subscription.EMPTY;\r\n\r\n  /** Subscription to changes in the tab labels. */\r\n  private _tabLabelSubscription = Subscription.EMPTY;\r\n\r\n  /** Whether the tab group should grow to the size of the active tab. */\r\n  @Input()\r\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\r\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\r\n  private _dynamicHeight: boolean = false;\r\n\r\n  /**\r\n   * @deprecated\r\n   * @deletion-target 6.0.0\r\n   */\r\n  @Input('mat-dynamic-height')\r\n  get _dynamicHeightDeprecated(): boolean { return this._dynamicHeight; }\r\n  set _dynamicHeightDeprecated(value: boolean) { this._dynamicHeight = value; }\r\n\r\n  /** The index of the active tab. */\r\n  @Input()\r\n  get selectedIndex(): number | null { return this._selectedIndex; }\r\n  set selectedIndex(value: number | null) {\r\n    this._indexToSelect = coerceNumberProperty(value, null);\r\n  }\r\n  private _selectedIndex: number | null = null;\r\n\r\n  /** Position of the tab header. */\r\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\r\n\r\n  /** Background color of the tab group. */\r\n  @Input()\r\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\r\n  set backgroundColor(value: ThemePalette) {\r\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\r\n\r\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\r\n\r\n    if (value) {\r\n      nativeElement.classList.add(`mat-background-${value}`);\r\n    }\r\n\r\n    this._backgroundColor = value;\r\n  }\r\n  private _backgroundColor: ThemePalette;\r\n\r\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\r\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\r\n\r\n  /** Event emitted when focus has changed within a tab group. */\r\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\r\n      new EventEmitter<MatTabChangeEvent>();\r\n\r\n  /** Event emitted when the body animation has completed */\r\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /** Event emitted when the tab selection has changed. */\r\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\r\n      new EventEmitter<MatTabChangeEvent>(true);\r\n\r\n  /**\r\n   * Event emitted when the tab selection has changed.\r\n   * @deprecated Use `selectedTabChange` instead.\r\n   * @deletion-target 6.0.0\r\n   */\r\n  @Output() readonly selectChange: EventEmitter<MatTabChangeEvent> = this.selectedTabChange;\r\n\r\n  private _groupId: number;\r\n\r\n  constructor(elementRef: ElementRef,\r\n              private _changeDetectorRef: ChangeDetectorRef) {\r\n    super(elementRef);\r\n    this._groupId = nextId++;\r\n  }\r\n\r\n  /**\r\n   * After the content is checked, this component knows what tabs have been defined\r\n   * and what the selected index should be. This is where we can know exactly what position\r\n   * each tab should be in according to the new selected index, and additionally we know how\r\n   * a new selected tab should transition in (from the left or right).\r\n   */\r\n  ngAfterContentChecked() {\r\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\r\n    // Note the `|| 0`, which ensures that values like NaN can't get through\r\n    // and which would otherwise throw the component into an infinite loop\r\n    // (since Math.max(NaN, 0) === NaN).\r\n    let indexToSelect = this._indexToSelect =\r\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\r\n\r\n    // If there is a change in selected index, emit a change event. Should not trigger if\r\n    // the selected index has not yet been initialized.\r\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\r\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\r\n      this.selectedTabChange.emit(tabChangeEvent);\r\n      // Emitting this value after change detection has run\r\n      // since the checked content may contain this variable'\r\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\r\n    }\r\n\r\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\r\n    this._tabs.forEach((tab: MatTab, index: number) => {\r\n      tab.position = index - indexToSelect;\r\n      tab.isActive = index === indexToSelect;\r\n\r\n      // If there is already a selected tab, then set up an origin for the next selected tab\r\n      // if it doesn't have one already.\r\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\r\n        tab.origin = indexToSelect - this._selectedIndex;\r\n      }\r\n    });\r\n\r\n    if (this._selectedIndex !== indexToSelect) {\r\n      this._selectedIndex = indexToSelect;\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._subscribeToTabLabels();\r\n\r\n    // Subscribe to changes in the amount of tabs, in order to be\r\n    // able to re-render the content as new tabs are added or removed.\r\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\r\n      this._subscribeToTabLabels();\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._tabsSubscription.unsubscribe();\r\n    this._tabLabelSubscription.unsubscribe();\r\n  }\r\n\r\n  _focusChanged(index: number) {\r\n    this.focusChange.emit(this._createChangeEvent(index));\r\n  }\r\n\r\n  private _createChangeEvent(index: number): MatTabChangeEvent {\r\n    const event = new MatTabChangeEvent;\r\n    event.index = index;\r\n    if (this._tabs && this._tabs.length) {\r\n      event.tab = this._tabs.toArray()[index];\r\n    }\r\n    return event;\r\n  }\r\n\r\n  /**\r\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\r\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\r\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\r\n   * manually.\r\n   */\r\n  private _subscribeToTabLabels() {\r\n    if (this._tabLabelSubscription) {\r\n      this._tabLabelSubscription.unsubscribe();\r\n    }\r\n\r\n    this._tabLabelSubscription = merge(\r\n        ...this._tabs.map(tab => tab._disableChange),\r\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n  }\r\n\r\n  /** Returns a unique id for each tab label element */\r\n  _getTabLabelId(i: number): string {\r\n    return `mat-tab-label-${this._groupId}-${i}`;\r\n  }\r\n\r\n  /** Returns a unique id for each tab content element */\r\n  _getTabContentId(i: number): string {\r\n    return `mat-tab-content-${this._groupId}-${i}`;\r\n  }\r\n\r\n  /**\r\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\r\n   * height property is true.\r\n   */\r\n  _setTabBodyWrapperHeight(tabHeight: number): void {\r\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\r\n\r\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\r\n\r\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\r\n\r\n    // This conditional forces the browser to paint the height so that\r\n    // the animation to the new height can have an origin.\r\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\r\n      wrapper.style.height = tabHeight + 'px';\r\n    }\r\n  }\r\n\r\n  /** Removes the height of the tab body wrapper. */\r\n  _removeTabBodyWrapperHeight(): void {\r\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\r\n    this._tabBodyWrapper.nativeElement.style.height = '';\r\n    this.animationDone.emit();\r\n  }\r\n\r\n  /** Handle click events, setting new selected index if appropriate. */\r\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\r\n    if (!tab.disabled) {\r\n      this.selectedIndex = tabHeader.focusIndex = idx;\r\n    }\r\n  }\r\n\r\n  /** Retrieves the tabindex for the tab. */\r\n  _getTabIndex(tab: MatTab, idx: number): number | null {\r\n    if (tab.disabled) {\r\n      return null;\r\n    }\r\n    return this.selectedIndex === idx ? 0 : -1;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, ElementRef} from '@angular/core';\r\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\r\n\r\n// Boilerplate for applying mixins to MatTabLabelWrapper.\r\n/** @docs-private */\r\nexport class MatTabLabelWrapperBase {}\r\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\r\n\r\n/**\r\n * Used in the `mat-tab-group` view to display tab labels.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: '[matTabLabelWrapper]',\r\n  inputs: ['disabled'],\r\n  host: {\r\n    '[class.mat-tab-disabled]': 'disabled'\r\n  }\r\n})\r\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\r\n  constructor(public elementRef: ElementRef) {\r\n    super();\r\n  }\r\n\r\n  /** Sets focus on the wrapper element */\r\n  focus(): void {\r\n    this.elementRef.nativeElement.focus();\r\n  }\r\n\r\n  getOffsetLeft(): number {\r\n    return this.elementRef.nativeElement.offsetLeft;\r\n  }\r\n\r\n  getOffsetWidth(): number {\r\n    return this.elementRef.nativeElement.offsetWidth;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Direction, Directionality} from '@angular/cdk/bidi';\r\nimport {ENTER, LEFT_ARROW, RIGHT_ARROW, SPACE, HOME, END} from '@angular/cdk/keycodes';\r\nimport {\r\n  AfterContentChecked,\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\r\nimport {merge} from 'rxjs/observable/merge';\r\nimport {of as observableOf} from 'rxjs/observable/of';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\r\nimport {MatInkBar} from './ink-bar';\r\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\r\nimport {ViewportRuler} from '@angular/cdk/scrolling';\r\n\r\n\r\n/**\r\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\r\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\r\n * beginning of the list.\r\n */\r\nexport type ScrollDirection = 'after' | 'before';\r\n\r\n/**\r\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\r\n * provide a small affordance to the label next to it.\r\n */\r\nconst EXAGGERATED_OVERSCROLL = 60;\r\n\r\n// Boilerplate for applying mixins to MatTabHeader.\r\n/** @docs-private */\r\nexport class MatTabHeaderBase {}\r\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\r\n\r\n/**\r\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\r\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\r\n * width of the header container, then arrows will be displayed to allow the user to scroll\r\n * left and right across the header.\r\n * @docs-private\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-tab-header',\r\n  templateUrl: 'tab-header.html',\r\n  styleUrls: ['tab-header.css'],\r\n  inputs: ['disableRipple'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  host: {\r\n    'class': 'mat-tab-header',\r\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\r\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\r\n  },\r\n})\r\nexport class MatTabHeader extends _MatTabHeaderMixinBase\r\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\r\n\r\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\r\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\r\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\r\n  @ViewChild('tabList') _tabList: ElementRef;\r\n\r\n  /** The tab index that is focused. */\r\n  private _focusIndex: number = 0;\r\n\r\n  /** The distance in pixels that the tab labels should be translated to the left. */\r\n  private _scrollDistance = 0;\r\n\r\n  /** Whether the header should scroll to the selected index after the view has been checked. */\r\n  private _selectedIndexChanged = false;\r\n\r\n  /** Combines listeners that will re-align the ink bar whenever they're invoked. */\r\n  private _realignInkBar = Subscription.EMPTY;\r\n\r\n  /** Whether the controls for pagination should be displayed */\r\n  _showPaginationControls = false;\r\n\r\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\r\n  _disableScrollAfter = true;\r\n\r\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\r\n  _disableScrollBefore = true;\r\n\r\n  /**\r\n   * The number of tab labels that are displayed on the header. When this changes, the header\r\n   * should re-evaluate the scroll position.\r\n   */\r\n  private _tabLabelCount: number;\r\n\r\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\r\n  private _scrollDistanceChanged: boolean;\r\n\r\n  private _selectedIndex: number = 0;\r\n\r\n  /** The index of the active tab. */\r\n  @Input()\r\n  get selectedIndex(): number { return this._selectedIndex; }\r\n  set selectedIndex(value: number) {\r\n    value = coerceNumberProperty(value);\r\n    this._selectedIndexChanged = this._selectedIndex != value;\r\n    this._selectedIndex = value;\r\n    this._focusIndex = value;\r\n  }\r\n\r\n  /** Event emitted when the option is selected. */\r\n  @Output() readonly selectFocusedIndex = new EventEmitter();\r\n\r\n  /** Event emitted when a label is focused. */\r\n  @Output() readonly indexFocused = new EventEmitter();\r\n\r\n  constructor(private _elementRef: ElementRef,\r\n              private _changeDetectorRef: ChangeDetectorRef,\r\n              private _viewportRuler: ViewportRuler,\r\n              @Optional() private _dir: Directionality) {\r\n    super();\r\n  }\r\n\r\n  ngAfterContentChecked(): void {\r\n    // If the number of tab labels have changed, check if scrolling should be enabled\r\n    if (this._tabLabelCount != this._labelWrappers.length) {\r\n      this._updatePagination();\r\n      this._tabLabelCount = this._labelWrappers.length;\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n\r\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\r\n    // should be disabled.\r\n    if (this._selectedIndexChanged) {\r\n      this._scrollToLabel(this._selectedIndex);\r\n      this._checkScrollingControls();\r\n      this._alignInkBarToSelectedTab();\r\n      this._selectedIndexChanged = false;\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n\r\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\r\n    // then translate the header to reflect this.\r\n    if (this._scrollDistanceChanged) {\r\n      this._updateTabScrollPosition();\r\n      this._scrollDistanceChanged = false;\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\r\n\r\n  _handleKeydown(event: KeyboardEvent) {\r\n    switch (event.keyCode) {\r\n      case RIGHT_ARROW:\r\n        this._focusNextTab();\r\n        break;\r\n      case LEFT_ARROW:\r\n        this._focusPreviousTab();\r\n        break;\r\n      case HOME:\r\n        this._focusFirstTab();\r\n        event.preventDefault();\r\n        break;\r\n      case END:\r\n        this._focusLastTab();\r\n        event.preventDefault();\r\n        break;\r\n      case ENTER:\r\n      case SPACE:\r\n        this.selectFocusedIndex.emit(this.focusIndex);\r\n        event.preventDefault();\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Aligns the ink bar to the selected tab on load.\r\n   */\r\n  ngAfterContentInit() {\r\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\r\n    const resize = this._viewportRuler.change(150);\r\n    const realign = () => {\r\n      this._updatePagination();\r\n      this._alignInkBarToSelectedTab();\r\n    };\r\n\r\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\r\n    // This helps in cases where the user lands directly on a page with paginated tabs.\r\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\r\n    this._realignInkBar = merge(dirChange, resize).subscribe(realign);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._realignInkBar.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   * Callback for when the MutationObserver detects that the content has changed.\r\n   */\r\n  _onContentChanges() {\r\n    this._updatePagination();\r\n    this._alignInkBarToSelectedTab();\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /**\r\n   * Updating the view whether pagination should be enabled or not\r\n   */\r\n  _updatePagination() {\r\n    this._checkPaginationEnabled();\r\n    this._checkScrollingControls();\r\n    this._updateTabScrollPosition();\r\n  }\r\n\r\n  /** When the focus index is set, we must manually send focus to the correct label */\r\n  set focusIndex(value: number) {\r\n    if (!this._isValidIndex(value) || this._focusIndex == value) { return; }\r\n\r\n    this._focusIndex = value;\r\n    this.indexFocused.emit(value);\r\n    this._setTabFocus(value);\r\n  }\r\n\r\n  /** Tracks which element has focus; used for keyboard navigation */\r\n  get focusIndex(): number { return this._focusIndex; }\r\n\r\n  /**\r\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\r\n   * providing a valid index and return true.\r\n   */\r\n  _isValidIndex(index: number): boolean {\r\n    if (!this._labelWrappers) { return true; }\r\n\r\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\r\n    return !!tab && !tab.disabled;\r\n  }\r\n\r\n  /**\r\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\r\n   * scrolling is enabled.\r\n   */\r\n  _setTabFocus(tabIndex: number) {\r\n    if (this._showPaginationControls) {\r\n      this._scrollToLabel(tabIndex);\r\n    }\r\n\r\n    if (this._labelWrappers && this._labelWrappers.length) {\r\n      this._labelWrappers.toArray()[tabIndex].focus();\r\n\r\n      // Do not let the browser manage scrolling to focus the element, this will be handled\r\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\r\n      // should be the full width minus the offset width.\r\n      const containerEl = this._tabListContainer.nativeElement;\r\n      const dir = this._getLayoutDirection();\r\n\r\n      if (dir == 'ltr') {\r\n        containerEl.scrollLeft = 0;\r\n      } else {\r\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Moves the focus towards the beginning or the end of the list depending on the offset provided.\r\n   * Valid offsets are 1 and -1.\r\n   */\r\n  _moveFocus(offset: number) {\r\n    if (this._labelWrappers) {\r\n      const tabs: MatTabLabelWrapper[] = this._labelWrappers.toArray();\r\n\r\n      for (let i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\r\n        if (this._isValidIndex(i)) {\r\n          this.focusIndex = i;\r\n          return;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Increment the focus index by 1 until a valid tab is found. */\r\n  _focusNextTab(): void {\r\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\r\n  }\r\n\r\n  /** Decrement the focus index by 1 until a valid tab is found. */\r\n  _focusPreviousTab(): void {\r\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\r\n  }\r\n\r\n  /** Focuses the first tab. */\r\n  private _focusFirstTab(): void {\r\n    for (let i = 0; i < this._labelWrappers.length; i++) {\r\n      if (this._isValidIndex(i)) {\r\n        this.focusIndex = i;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Focuses the last tab. */\r\n  private _focusLastTab(): void {\r\n    for (let i = this._labelWrappers.length - 1; i > -1; i--) {\r\n      if (this._isValidIndex(i)) {\r\n        this.focusIndex = i;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /** The layout direction of the containing app. */\r\n  _getLayoutDirection(): Direction {\r\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\r\n  }\r\n\r\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\r\n  _updateTabScrollPosition() {\r\n    const scrollDistance = this.scrollDistance;\r\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\r\n\r\n    this._tabList.nativeElement.style.transform = `translate3d(${translateX}px, 0, 0)`;\r\n  }\r\n\r\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\r\n  get scrollDistance(): number { return this._scrollDistance; }\r\n  set scrollDistance(v: number) {\r\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\r\n\r\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\r\n    // transformation can move the header.\r\n    this._scrollDistanceChanged = true;\r\n    this._checkScrollingControls();\r\n  }\r\n\r\n  /**\r\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\r\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\r\n   * length of the tab list view window.\r\n   *\r\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\r\n   * should be called sparingly.\r\n   */\r\n  _scrollHeader(scrollDir: ScrollDirection) {\r\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\r\n\r\n    // Move the scroll distance one-third the length of the tab list's viewport.\r\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\r\n  }\r\n\r\n  /**\r\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\r\n   *\r\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\r\n   * should be called sparingly.\r\n   */\r\n  _scrollToLabel(labelIndex: number) {\r\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\r\n\r\n    if (!selectedLabel) { return; }\r\n\r\n    // The view length is the visible width of the tab labels.\r\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\r\n\r\n    let labelBeforePos: number, labelAfterPos: number;\r\n    if (this._getLayoutDirection() == 'ltr') {\r\n      labelBeforePos = selectedLabel.getOffsetLeft();\r\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\r\n    } else {\r\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\r\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\r\n    }\r\n\r\n    const beforeVisiblePos = this.scrollDistance;\r\n    const afterVisiblePos = this.scrollDistance + viewLength;\r\n\r\n    if (labelBeforePos < beforeVisiblePos) {\r\n      // Scroll header to move label to the before direction\r\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\r\n    } else if (labelAfterPos > afterVisiblePos) {\r\n      // Scroll header to move label to the after direction\r\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\r\n   * tab list is wider than the size of the header container, then the pagination controls should\r\n   * be shown.\r\n   *\r\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\r\n   * should be called sparingly.\r\n   */\r\n  _checkPaginationEnabled() {\r\n    const isEnabled =\r\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\r\n\r\n    if (!isEnabled) {\r\n      this.scrollDistance = 0;\r\n    }\r\n\r\n    if (isEnabled !== this._showPaginationControls) {\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n\r\n    this._showPaginationControls = isEnabled;\r\n  }\r\n\r\n  /**\r\n   * Evaluate whether the before and after controls should be enabled or disabled.\r\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\r\n   * before button. If the header is at the end of the list (scroll distance is equal to the\r\n   * maximum distance we can scroll), then disable the after button.\r\n   *\r\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\r\n   * should be called sparingly.\r\n   */\r\n  _checkScrollingControls() {\r\n    // Check if the pagination arrows should be activated.\r\n    this._disableScrollBefore = this.scrollDistance == 0;\r\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /**\r\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\r\n   * is equal to the difference in width between the tab list container and tab header container.\r\n   *\r\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\r\n   * should be called sparingly.\r\n   */\r\n  _getMaxScrollDistance(): number {\r\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\r\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\r\n    return (lengthOfTabList - viewLength) || 0;\r\n  }\r\n\r\n  /** Tells the ink-bar to align itself to the current label wrapper */\r\n  private _alignInkBarToSelectedTab(): void {\r\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\r\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\r\n        null;\r\n\r\n    this._inkBar.alignToElement(selectedLabelWrapper);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {OverlayRef} from '@angular/cdk/overlay';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {MatSnackBarContainer} from './snack-bar-container';\r\n\r\n/** Event that is emitted when a snack bar is dismissed. */\r\nexport interface MatSnackBarDismiss {\r\n  /** Whether the snack bar was dismissed using the action button. */\r\n  dismissedByAction: boolean;\r\n}\r\n\r\n/**\r\n * Reference to a snack bar dispatched from the snack bar service.\r\n */\r\nexport class MatSnackBarRef<T> {\r\n  /** The instance of the component making up the content of the snack bar. */\r\n  instance: T;\r\n\r\n  /**\r\n   * The instance of the component making up the content of the snack bar.\r\n   * @docs-private\r\n   */\r\n  containerInstance: MatSnackBarContainer;\r\n\r\n  /** Subject for notifying the user that the snack bar has been dismissed. */\r\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\r\n\r\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\r\n  private readonly _afterOpened = new Subject<void>();\r\n\r\n  /** Subject for notifying the user that the snack bar action was called. */\r\n  private readonly _onAction = new Subject<void>();\r\n\r\n  /**\r\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\r\n   * dismissed before the duration passes.\r\n   */\r\n  private _durationTimeoutId: number;\r\n\r\n  /** Whether the snack bar was dismissed using the action button. */\r\n  private _dismissedByAction = false;\r\n\r\n  constructor(containerInstance: MatSnackBarContainer,\r\n              private _overlayRef: OverlayRef) {\r\n    this.containerInstance = containerInstance;\r\n    // Dismiss snackbar on action.\r\n    this.onAction().subscribe(() => this.dismiss());\r\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\r\n  }\r\n\r\n  /** Dismisses the snack bar. */\r\n  dismiss(): void {\r\n    if (!this._afterDismissed.closed) {\r\n      this.containerInstance.exit();\r\n    }\r\n    clearTimeout(this._durationTimeoutId);\r\n  }\r\n\r\n  /** Marks the snackbar action clicked. */\r\n  dismissWithAction(): void {\r\n    if (!this._onAction.closed) {\r\n      this._dismissedByAction = true;\r\n      this._onAction.next();\r\n      this._onAction.complete();\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Marks the snackbar action clicked.\r\n   * @deprecated Use `dismissWithAction` instead.\r\n   * @deletion-target 7.0.0\r\n   */\r\n  closeWithAction(): void {\r\n    this.dismissWithAction();\r\n  }\r\n\r\n  /** Dismisses the snack bar after some duration */\r\n  _dismissAfter(duration: number): void {\r\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\r\n  }\r\n\r\n  /** Marks the snackbar as opened */\r\n  _open(): void {\r\n    if (!this._afterOpened.closed) {\r\n      this._afterOpened.next();\r\n      this._afterOpened.complete();\r\n    }\r\n  }\r\n\r\n  /** Cleans up the DOM after closing. */\r\n  private _finishDismiss(): void {\r\n    this._overlayRef.dispose();\r\n\r\n    if (!this._onAction.closed) {\r\n      this._onAction.complete();\r\n    }\r\n\r\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\r\n    this._afterDismissed.complete();\r\n    this._dismissedByAction = false;\r\n  }\r\n\r\n  /** Gets an observable that is notified when the snack bar is finished closing. */\r\n  afterDismissed(): Observable<MatSnackBarDismiss> {\r\n    return this._afterDismissed.asObservable();\r\n  }\r\n\r\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\r\n  afterOpened(): Observable<void> {\r\n    return this.containerInstance._onEnter;\r\n  }\r\n\r\n  /** Gets an observable that is notified when the snack bar action is called. */\r\n  onAction(): Observable<void> {\r\n    return this._onAction.asObservable();\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\r\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\r\nimport {Direction} from '@angular/cdk/bidi';\r\n\r\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\r\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\r\n\r\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\r\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\r\n\r\n/** Possible values for verticalPosition on MatSnackBarConfig. */\r\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\r\n\r\n/**\r\n * Configuration used when opening a snack-bar.\r\n */\r\nexport class MatSnackBarConfig<D = any> {\r\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\r\n  politeness?: AriaLivePoliteness = 'assertive';\r\n\r\n  /** Message to be announced by the MatAriaLiveAnnouncer */\r\n  announcementMessage?: string = '';\r\n\r\n  /** The view container to place the overlay for the snack bar into. */\r\n  viewContainerRef?: ViewContainerRef;\r\n\r\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\r\n  duration?: number = 0;\r\n\r\n  /** Extra CSS classes to be added to the snack bar container. */\r\n  panelClass?: string | string[];\r\n\r\n  /**\r\n   * Extra CSS classes to be added to the snack bar container.\r\n   * @deprecated Use `panelClass` instead.\r\n   * @deletion-target 6.0.0\r\n   */\r\n  extraClasses?: string | string[];\r\n\r\n  /** Text layout direction for the snack bar. */\r\n  direction?: Direction = 'ltr';\r\n\r\n  /** Data being injected into the child component. */\r\n  data?: D | null = null;\r\n\r\n  /** The horizontal position to place the snack bar. */\r\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\r\n\r\n  /** The vertical position to place the snack bar. */\r\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {\r\n  animate,\r\n  state,\r\n  style,\r\n  transition,\r\n  trigger,\r\n  AnimationTriggerMetadata,\r\n} from '@angular/animations';\r\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\r\n\r\n/** @docs-private */\r\nexport const SHOW_ANIMATION =\r\n  `${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`;\r\n\r\n/** @docs-private */\r\nexport const HIDE_ANIMATION =\r\n  `${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`;\r\n\r\n/** Animations used by the Material snack bar. */\r\nexport const matSnackBarAnimations: {\r\n  readonly contentFade: AnimationTriggerMetadata;\r\n  readonly snackBarState: AnimationTriggerMetadata;\r\n} = {\r\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\r\n  contentFade: trigger('contentFade', [\r\n    transition(':enter', [\r\n      style({opacity: '0'}),\r\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\r\n    ])\r\n  ]),\r\n\r\n  /** Animation that shows and hides a snack bar. */\r\n  snackBarState: trigger('state', [\r\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\r\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\r\n      animate(HIDE_ANIMATION)),\r\n    transition('void => visible-top, void => visible-bottom', animate(SHOW_ANIMATION)),\r\n  ])\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\r\nimport {MatSnackBarRef} from './snack-bar-ref';\r\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\r\nimport {matSnackBarAnimations} from './snack-bar-animations';\r\n\r\n\r\n/**\r\n * A component used to open as the default snack bar, matching material spec.\r\n * This should only be used internally by the snack bar service.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'simple-snack-bar',\r\n  templateUrl: 'simple-snack-bar.html',\r\n  styleUrls: ['simple-snack-bar.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [matSnackBarAnimations.contentFade],\r\n  host: {\r\n    '[@contentFade]': '',\r\n    'class': 'mat-simple-snackbar',\r\n  }\r\n})\r\nexport class SimpleSnackBar {\r\n  /** Data that was injected into the snack bar. */\r\n  data: { message: string, action: string };\r\n\r\n  constructor(\r\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\r\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\r\n    this.data = data;\r\n  }\r\n\r\n  /** Performs the action on the snack bar. */\r\n  action(): void {\r\n    this.snackBarRef.dismissWithAction();\r\n  }\r\n\r\n  /** If the action button should be shown. */\r\n  get hasAction(): boolean {\r\n    return !!this.data.action;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  Component,\r\n  ComponentRef,\r\n  EmbeddedViewRef,\r\n  ViewChild,\r\n  NgZone,\r\n  OnDestroy,\r\n  ElementRef,\r\n  ChangeDetectionStrategy,\r\n  ViewEncapsulation,\r\n  ChangeDetectorRef,\r\n} from '@angular/core';\r\nimport {AnimationEvent} from '@angular/animations';\r\nimport {\r\n  BasePortalOutlet,\r\n  ComponentPortal,\r\n  CdkPortalOutlet,\r\n} from '@angular/cdk/portal';\r\nimport {take} from 'rxjs/operators/take';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {MatSnackBarConfig} from './snack-bar-config';\r\nimport {matSnackBarAnimations} from './snack-bar-animations';\r\n\r\n/**\r\n * Internal component that wraps user-provided snack bar content.\r\n * @docs-private\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'snack-bar-container',\r\n  templateUrl: 'snack-bar-container.html',\r\n  styleUrls: ['snack-bar-container.css'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  animations: [matSnackBarAnimations.snackBarState],\r\n  host: {\r\n    'role': 'alert',\r\n    'class': 'mat-snack-bar-container',\r\n    '[@state]': '_animationState',\r\n    '(@state.done)': 'onAnimationEnd($event)'\r\n  },\r\n})\r\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\r\n  /** Whether the component has been destroyed. */\r\n  private _destroyed = false;\r\n\r\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\r\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\r\n\r\n  /** Subject for notifying that the snack bar has exited from view. */\r\n  readonly _onExit: Subject<any> = new Subject();\r\n\r\n  /** Subject for notifying that the snack bar has finished entering the view. */\r\n  readonly _onEnter: Subject<any> = new Subject();\r\n\r\n  /** The state of the snack bar animations. */\r\n  _animationState = 'void';\r\n\r\n  /** The snack bar configuration. */\r\n  snackBarConfig: MatSnackBarConfig;\r\n\r\n  constructor(\r\n    private _ngZone: NgZone,\r\n    private _elementRef: ElementRef,\r\n    private _changeDetectorRef: ChangeDetectorRef) {\r\n    super();\r\n  }\r\n\r\n  /** Attach a component portal as content to this snack bar container. */\r\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\r\n    if (this._portalOutlet.hasAttached()) {\r\n      throw Error('Attempting to attach snack bar content after content is already attached');\r\n    }\r\n\r\n    const element: HTMLElement = this._elementRef.nativeElement;\r\n\r\n    if (this.snackBarConfig.panelClass || this.snackBarConfig.extraClasses) {\r\n      this._setCssClasses(this.snackBarConfig.panelClass);\r\n      this._setCssClasses(this.snackBarConfig.extraClasses);\r\n    }\r\n\r\n    if (this.snackBarConfig.horizontalPosition === 'center') {\r\n      element.classList.add('mat-snack-bar-center');\r\n    }\r\n\r\n    if (this.snackBarConfig.verticalPosition === 'top') {\r\n      element.classList.add('mat-snack-bar-top');\r\n    }\r\n\r\n    return this._portalOutlet.attachComponentPortal(portal);\r\n  }\r\n\r\n  /** Attach a template portal as content to this snack bar container. */\r\n  attachTemplatePortal(): EmbeddedViewRef<any> {\r\n    throw Error('Not yet implemented');\r\n  }\r\n\r\n  /** Handle end of animations, updating the state of the snackbar. */\r\n  onAnimationEnd(event: AnimationEvent) {\r\n    const {fromState, toState} = event;\r\n\r\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\r\n      this._completeExit();\r\n    }\r\n\r\n    if (toState.startsWith('visible')) {\r\n      // Note: we shouldn't use `this` inside the zone callback,\r\n      // because it can cause a memory leak.\r\n      const onEnter = this._onEnter;\r\n\r\n      this._ngZone.run(() => {\r\n        onEnter.next();\r\n        onEnter.complete();\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Begin animation of snack bar entrance into view. */\r\n  enter(): void {\r\n    if (!this._destroyed) {\r\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\r\n      this._changeDetectorRef.detectChanges();\r\n    }\r\n  }\r\n\r\n  /** Begin animation of the snack bar exiting from view. */\r\n  exit(): Observable<void> {\r\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\r\n    return this._onExit;\r\n  }\r\n\r\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\r\n  ngOnDestroy() {\r\n    this._destroyed = true;\r\n    this._completeExit();\r\n  }\r\n\r\n  /**\r\n   * Waits for the zone to settle before removing the element. Helps prevent\r\n   * errors where we end up removing an element which is in the middle of an animation.\r\n   */\r\n  private _completeExit() {\r\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\r\n      this._onExit.next();\r\n      this._onExit.complete();\r\n    });\r\n  }\r\n\r\n  /** Applies the user-specified list of CSS classes to the element. */\r\n  private _setCssClasses(classList: undefined|string|string[]) {\r\n    if (!classList) {\r\n      return;\r\n    }\r\n\r\n    const element = this._elementRef.nativeElement;\r\n\r\n    if (Array.isArray(classList)) {\r\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\r\n      classList.forEach(cssClass => element.classList.add(cssClass));\r\n    } else {\r\n      element.classList.add(classList);\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\r\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\r\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\r\nimport {ComponentPortal, ComponentType, PortalInjector} from '@angular/cdk/portal';\r\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf} from '@angular/core';\r\nimport {take} from 'rxjs/operators/take';\r\nimport {takeUntil} from 'rxjs/operators/takeUntil';\r\nimport {SimpleSnackBar} from './simple-snack-bar';\r\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\r\nimport {MatSnackBarContainer} from './snack-bar-container';\r\nimport {MatSnackBarRef} from './snack-bar-ref';\r\n\r\n\r\n/**\r\n * Service to dispatch Material Design snack bar messages.\r\n */\r\n@Injectable()\r\nexport class MatSnackBar {\r\n  /**\r\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\r\n   * If there is a parent snack-bar service, all operations should delegate to that parent\r\n   * via `_openedSnackBarRef`.\r\n   */\r\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\r\n\r\n  /** Reference to the currently opened snackbar at *any* level. */\r\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\r\n    const parent = this._parentSnackBar;\r\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\r\n  }\r\n\r\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\r\n    if (this._parentSnackBar) {\r\n      this._parentSnackBar._openedSnackBarRef = value;\r\n    } else {\r\n      this._snackBarRefAtThisLevel = value;\r\n    }\r\n  }\r\n\r\n  constructor(\r\n      private _overlay: Overlay,\r\n      private _live: LiveAnnouncer,\r\n      private _injector: Injector,\r\n      private _breakpointObserver: BreakpointObserver,\r\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar) {}\r\n\r\n  /**\r\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\r\n   * currently opened snack bars.\r\n   *\r\n   * @param component Component to be instantiated.\r\n   * @param config Extra configuration for the snack bar.\r\n   */\r\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig): MatSnackBarRef<T> {\r\n    const _config = _applyConfigDefaults(config);\r\n    const snackBarRef = this._attach(component, _config);\r\n\r\n    // When the snackbar is dismissed, clear the reference to it.\r\n    snackBarRef.afterDismissed().subscribe(() => {\r\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\r\n      if (this._openedSnackBarRef == snackBarRef) {\r\n        this._openedSnackBarRef = null;\r\n      }\r\n    });\r\n\r\n    if (this._openedSnackBarRef) {\r\n      // If a snack bar is already in view, dismiss it and enter the\r\n      // new snack bar after exit animation is complete.\r\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\r\n        snackBarRef.containerInstance.enter();\r\n      });\r\n      this._openedSnackBarRef.dismiss();\r\n    } else {\r\n      // If no snack bar is in view, enter the new snack bar.\r\n      snackBarRef.containerInstance.enter();\r\n    }\r\n\r\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\r\n    if (_config.duration && _config.duration > 0) {\r\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(_config!.duration!));\r\n    }\r\n\r\n    if (_config.announcementMessage) {\r\n      this._live.announce(_config.announcementMessage, _config.politeness);\r\n    }\r\n\r\n    this._openedSnackBarRef = snackBarRef;\r\n    return this._openedSnackBarRef;\r\n  }\r\n\r\n  /**\r\n   * Opens a snackbar with a message and an optional action.\r\n   * @param message The message to show in the snackbar.\r\n   * @param action The label for the snackbar action.\r\n   * @param config Additional configuration options for the snackbar.\r\n   */\r\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\r\n      MatSnackBarRef<SimpleSnackBar> {\r\n    const _config = _applyConfigDefaults(config);\r\n\r\n    // Since the user doesn't have access to the component, we can\r\n    // override the data to pass in our own message and action.\r\n    _config.data = {message, action};\r\n    _config.announcementMessage = message;\r\n\r\n    return this.openFromComponent(SimpleSnackBar, _config);\r\n  }\r\n\r\n  /**\r\n   * Dismisses the currently-visible snack bar.\r\n   */\r\n  dismiss(): void {\r\n    if (this._openedSnackBarRef) {\r\n      this._openedSnackBarRef.dismiss();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Attaches the snack bar container component to the overlay.\r\n   */\r\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\r\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\r\n    const containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef);\r\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\r\n    containerRef.instance.snackBarConfig = config;\r\n    return containerRef.instance;\r\n  }\r\n\r\n  /**\r\n   * Places a new component as the content of the snack bar container.\r\n   */\r\n  private _attach<T>(component: ComponentType<T>, config: MatSnackBarConfig): MatSnackBarRef<T> {\r\n    const overlayRef = this._createOverlay(config);\r\n    const container = this._attachSnackBarContainer(overlayRef, config);\r\n    const snackBarRef = new MatSnackBarRef<T>(container, overlayRef);\r\n    const injector = this._createInjector(config, snackBarRef);\r\n    const portal = new ComponentPortal(component, undefined, injector);\r\n    const contentRef = container.attachComponentPortal(portal);\r\n\r\n    // We can't pass this via the injector, because the injector is created earlier.\r\n    snackBarRef.instance = contentRef.instance;\r\n\r\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\r\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\r\n    // fill the width of the screen for full width snackbars.\r\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\r\n      takeUntil(overlayRef.detachments().pipe(take(1)))\r\n    ).subscribe(state => {\r\n      if (state.matches) {\r\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\r\n      } else {\r\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\r\n      }\r\n    });\r\n\r\n    return snackBarRef;\r\n  }\r\n\r\n  /**\r\n   * Creates a new overlay and places it in the correct location.\r\n   * @param config The user-specified snack bar config.\r\n   */\r\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\r\n    const overlayConfig = new OverlayConfig();\r\n    overlayConfig.direction = config.direction;\r\n\r\n    let positionStrategy = this._overlay.position().global();\r\n    // Set horizontal position.\r\n    const isRtl = config.direction === 'rtl';\r\n    const isLeft = (\r\n      config.horizontalPosition === 'left' ||\r\n      (config.horizontalPosition === 'start' && !isRtl) ||\r\n      (config.horizontalPosition === 'end' && isRtl));\r\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\r\n    if (isLeft) {\r\n      positionStrategy.left('0');\r\n    } else if (isRight) {\r\n      positionStrategy.right('0');\r\n    } else {\r\n      positionStrategy.centerHorizontally();\r\n    }\r\n    // Set horizontal position.\r\n    if (config.verticalPosition === 'top') {\r\n      positionStrategy.top('0');\r\n    } else {\r\n      positionStrategy.bottom('0');\r\n    }\r\n\r\n    overlayConfig.positionStrategy = positionStrategy;\r\n    return this._overlay.create(overlayConfig);\r\n  }\r\n\r\n  /**\r\n   * Creates an injector to be used inside of a snack bar component.\r\n   * @param config Config that was used to create the snack bar.\r\n   * @param snackBarRef Reference to the snack bar.\r\n   */\r\n  private _createInjector<T>(\r\n      config: MatSnackBarConfig,\r\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\r\n\r\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\r\n    const injectionTokens = new WeakMap();\r\n\r\n    injectionTokens.set(MatSnackBarRef, snackBarRef);\r\n    injectionTokens.set(MAT_SNACK_BAR_DATA, config.data);\r\n\r\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\r\n  }\r\n}\r\n\r\n/**\r\n * Applies default options to the snackbar config.\r\n * @param config The configuration to which the defaults will be applied.\r\n * @returns The new configuration object with defaults applied.\r\n */\r\nfunction _applyConfigDefaults(config?: MatSnackBarConfig): MatSnackBarConfig {\r\n  return {...new MatSnackBarConfig(), ...config};\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {OverlayModule} from '@angular/cdk/overlay';\r\nimport {PortalModule} from '@angular/cdk/portal';\r\nimport {LIVE_ANNOUNCER_PROVIDER} from '@angular/cdk/a11y';\r\nimport {LayoutModule} from '@angular/cdk/layout';\r\nimport {MatCommonModule} from '@angular/material/core';\r\nimport {MatSnackBar} from './snack-bar';\r\nimport {MatSnackBarContainer} from './snack-bar-container';\r\nimport {SimpleSnackBar} from './simple-snack-bar';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    OverlayModule,\r\n    PortalModule,\r\n    CommonModule,\r\n    MatCommonModule,\r\n    LayoutModule,\r\n  ],\r\n  exports: [MatSnackBarContainer, MatCommonModule],\r\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\r\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\r\n  providers: [MatSnackBar, LIVE_ANNOUNCER_PROVIDER]\r\n})\r\nexport class MatSnackBarModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  Directive,\r\n  EventEmitter,\r\n  Input,\r\n  isDevMode,\r\n  Output,\r\n  OnChanges,\r\n  OnDestroy,\r\n} from '@angular/core';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\r\nimport {SortDirection} from './sort-direction';\r\nimport {\r\n  getSortInvalidDirectionError,\r\n  getSortDuplicateSortableIdError,\r\n  getSortHeaderMissingIdError\r\n} from './sort-errors';\r\nimport {Subject} from 'rxjs/Subject';\r\n\r\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\r\nexport interface MatSortable {\r\n  /** The id of the column being sorted. */\r\n  id: string;\r\n\r\n  /** Starting sort direction. */\r\n  start: 'asc' | 'desc';\r\n\r\n  /** Whether to disable clearing the sorting state. */\r\n  disableClear: boolean;\r\n}\r\n\r\n/** The current sort state. */\r\nexport interface Sort {\r\n  /** The id of the column being sorted. */\r\n  active: string;\r\n\r\n  /** The sort direction. */\r\n  direction: SortDirection;\r\n}\r\n\r\n// Boilerplate for applying mixins to MatSort.\r\n/** @docs-private */\r\nexport class MatSortBase {}\r\nexport const _MatSortMixinBase = mixinDisabled(MatSortBase);\r\n\r\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\r\n@Directive({\r\n  selector: '[matSort]',\r\n  exportAs: 'matSort',\r\n  inputs: ['disabled: matSortDisabled']\r\n})\r\nexport class MatSort extends _MatSortMixinBase implements CanDisable, OnChanges, OnDestroy {\r\n  /** Collection of all registered sortables that this directive manages. */\r\n  sortables = new Map<string, MatSortable>();\r\n\r\n  /** Used to notify any child components listening to state changes. */\r\n  readonly _stateChanges = new Subject<void>();\r\n\r\n  /** The id of the most recently sorted MatSortable. */\r\n  @Input('matSortActive') active: string;\r\n\r\n  /**\r\n   * The direction to set when an MatSortable is initially sorted.\r\n   * May be overriden by the MatSortable's sort start.\r\n   */\r\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\r\n\r\n  /** The sort direction of the currently active MatSortable. */\r\n  @Input('matSortDirection')\r\n  get direction(): SortDirection { return this._direction; }\r\n  set direction(direction: SortDirection) {\r\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\r\n      throw getSortInvalidDirectionError(direction);\r\n    }\r\n    this._direction = direction;\r\n  }\r\n  private _direction: SortDirection = '';\r\n\r\n  /**\r\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\r\n   * May be overriden by the MatSortable's disable clear input.\r\n   */\r\n  @Input('matSortDisableClear')\r\n  get disableClear(): boolean { return this._disableClear; }\r\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\r\n  private _disableClear: boolean;\r\n\r\n  /** Event emitted when the user changes either the active sort or sort direction. */\r\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\r\n\r\n  /**\r\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\r\n   * collection of MatSortables.\r\n   */\r\n  register(sortable: MatSortable): void {\r\n    if (!sortable.id) {\r\n      throw getSortHeaderMissingIdError();\r\n    }\r\n\r\n    if (this.sortables.has(sortable.id)) {\r\n      throw getSortDuplicateSortableIdError(sortable.id);\r\n    }\r\n    this.sortables.set(sortable.id, sortable);\r\n  }\r\n\r\n  /**\r\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\r\n   * collection of contained MatSortables.\r\n   */\r\n  deregister(sortable: MatSortable): void {\r\n    this.sortables.delete(sortable.id);\r\n  }\r\n\r\n  /** Sets the active sort id and determines the new sort direction. */\r\n  sort(sortable: MatSortable): void {\r\n    if (this.active != sortable.id) {\r\n      this.active = sortable.id;\r\n      this.direction = sortable.start ? sortable.start : this.start;\r\n    } else {\r\n      this.direction = this.getNextSortDirection(sortable);\r\n    }\r\n\r\n    this.sortChange.emit({active: this.active, direction: this.direction});\r\n  }\r\n\r\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\r\n  getNextSortDirection(sortable: MatSortable): SortDirection {\r\n    if (!sortable) { return ''; }\r\n\r\n    // Get the sort direction cycle with the potential sortable overrides.\r\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\r\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\r\n\r\n    // Get and return the next direction in the cycle\r\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\r\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\r\n    return sortDirectionCycle[nextDirectionIndex];\r\n  }\r\n\r\n  ngOnChanges() {\r\n    this._stateChanges.next();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._stateChanges.complete();\r\n  }\r\n}\r\n\r\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\r\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\r\n                               disableClear: boolean): SortDirection[] {\r\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\r\n  if (start == 'desc') { sortOrder.reverse(); }\r\n  if (!disableClear) { sortOrder.push(''); }\r\n\r\n  return sortOrder;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {SortDirection} from './sort-direction';\r\n\r\n/**\r\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\r\n * include it in a custom provider.\r\n */\r\n@Injectable()\r\nexport class MatSortHeaderIntl {\r\n  /**\r\n   * Stream that emits whenever the labels here are changed. Use this to notify\r\n   * components if the labels have changed after initialization.\r\n   */\r\n  readonly changes: Subject<void> = new Subject<void>();\r\n\r\n  /** ARIA label for the sorting button. */\r\n  sortButtonLabel = (id: string) => {\r\n    return `Change sorting for ${id}`;\r\n  }\r\n\r\n  /** A label to describe the current sort (visible only to screenreaders). */\r\n  sortDescriptionLabel = (id: string, direction: SortDirection) => {\r\n    return `Sorted by ${id} ${direction == 'asc' ? 'ascending' : 'descending'}`;\r\n  }\r\n}\r\n/** @docs-private */\r\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\r\n  return parentIntl || new MatSortHeaderIntl();\r\n}\r\n\r\n/** @docs-private */\r\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\r\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\r\n  provide: MatSortHeaderIntl,\r\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\r\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\r\n};\r\n\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {\r\n  animate,\r\n  state,\r\n  style,\r\n  transition,\r\n  trigger,\r\n  keyframes,\r\n  AnimationTriggerMetadata, query, animateChild,\r\n} from '@angular/animations';\r\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\r\n\r\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\r\n                                  AnimationCurves.STANDARD_CURVE;\r\n\r\n/** Animations used by MatSort. */\r\nexport const matSortAnimations: {\r\n  readonly indicator: AnimationTriggerMetadata;\r\n  readonly leftPointer: AnimationTriggerMetadata;\r\n  readonly rightPointer: AnimationTriggerMetadata;\r\n  readonly arrowOpacity: AnimationTriggerMetadata;\r\n  readonly arrowPosition: AnimationTriggerMetadata;\r\n  readonly allowChildren: AnimationTriggerMetadata;\r\n} = {\r\n  /** Animation that moves the sort indicator. */\r\n  indicator: trigger('indicator', [\r\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\r\n    // 10px is the height of the sort indicator, minus the width of the pointers\r\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\r\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\r\n  ]),\r\n\r\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\r\n  leftPointer: trigger('leftPointer', [\r\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\r\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\r\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\r\n  ]),\r\n\r\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\r\n  rightPointer: trigger('rightPointer', [\r\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\r\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\r\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\r\n  ]),\r\n\r\n  /** Animation that controls the arrow opacity. */\r\n  arrowOpacity: trigger('arrowOpacity', [\r\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\r\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\r\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc',\r\n        style({opacity: 0})),\r\n    // Transition between all states except for immediate transitions\r\n    transition('* => asc, * => desc, * => active, * => hint', animate('0ms')),\r\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION))\r\n  ]),\r\n\r\n  /**\r\n   * Animation for the translation of the arrow as a whole. States are separated into two\r\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\r\n   * peek, and active. The other states define a specific animation (source-to-destination)\r\n   * and are determined as a function of their prev user-perceived state and what the next state\r\n   * should be.\r\n   */\r\n  arrowPosition: trigger('arrowPosition', [\r\n    // Hidden Above => Hint Center\r\n    transition('* => desc-to-hint, * => desc-to-active',\r\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\r\n          style({transform: 'translateY(-25%)'}),\r\n          style({transform: 'translateY(0)'})\r\n        ]))),\r\n    // Hint Center => Hidden Below\r\n    transition('* => hint-to-desc, * => active-to-desc',\r\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\r\n          style({transform: 'translateY(0)'}),\r\n          style({transform: 'translateY(25%)'})\r\n        ]))),\r\n    // Hidden Below => Hint Center\r\n    transition('* => asc-to-hint, * => asc-to-active',\r\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\r\n          style({transform: 'translateY(25%)'}),\r\n          style({transform: 'translateY(0)'})\r\n        ]))),\r\n    // Hint Center => Hidden Above\r\n    transition('* => hint-to-asc, * => active-to-asc',\r\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\r\n          style({transform: 'translateY(0)'}),\r\n          style({transform: 'translateY(-25%)'})\r\n        ]))),\r\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\r\n        style({transform: 'translateY(0)'})),\r\n    state('hint-to-desc, active-to-desc, desc',\r\n        style({transform: 'translateY(-25%)'})),\r\n    state('hint-to-asc, active-to-asc, asc',\r\n        style({transform: 'translateY(25%)'})),\r\n  ]),\r\n\r\n  /** Necessary trigger that calls animate on children animations. */\r\n  allowChildren: trigger('allowChildren', [\r\n    transition('* <=> *', [\r\n      query('@*', animateChild(), {optional: true})\r\n    ])\r\n  ]),\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Input,\r\n  Optional,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {CdkColumnDef} from '@angular/cdk/table';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {merge} from 'rxjs/observable/merge';\r\nimport {MatSort, MatSortable} from './sort';\r\nimport {SortDirection} from './sort-direction';\r\nimport {MatSortHeaderIntl} from './sort-header-intl';\r\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\r\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\r\nimport {matSortAnimations} from './sort-animations';\r\n\r\n// Boilerplate for applying mixins to the sort header.\r\n/** @docs-private */\r\nexport class MatSortHeaderBase {}\r\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\r\n\r\n/**\r\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\r\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\r\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\r\n * be fully opaque in the center.\r\n *\r\n * @docs-private\r\n */\r\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\r\n\r\n/**\r\n * States describing the arrow's animated position (animating fromState to toState).\r\n * If the fromState is not defined, there will be no animated transition to the toState.\r\n * @docs-private\r\n */\r\nexport interface ArrowViewStateTransition {\r\n  fromState?: ArrowViewState;\r\n  toState: ArrowViewState;\r\n}\r\n\r\n/**\r\n * Applies sorting behavior (click to change sort) and styles to an element, including an\r\n * arrow to display the current sort direction.\r\n *\r\n * Must be provided with an id and contained within a parent MatSort directive.\r\n *\r\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\r\n * column definition.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: '[mat-sort-header]',\r\n  exportAs: 'matSortHeader',\r\n  templateUrl: 'sort-header.html',\r\n  styleUrls: ['sort-header.css'],\r\n  host: {\r\n    '(click)': '_handleClick()',\r\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\r\n    '(longpress)': '_setIndicatorHintVisible(true)',\r\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\r\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  inputs: ['disabled'],\r\n  animations: [\r\n    matSortAnimations.indicator,\r\n    matSortAnimations.leftPointer,\r\n    matSortAnimations.rightPointer,\r\n    matSortAnimations.arrowOpacity,\r\n    matSortAnimations.arrowPosition,\r\n    matSortAnimations.allowChildren,\r\n  ]\r\n})\r\nexport class MatSortHeader extends _MatSortHeaderMixinBase implements MatSortable, CanDisable {\r\n  private _rerenderSubscription: Subscription;\r\n\r\n  /**\r\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\r\n   * provide an affordance that the header is sortable by showing on focus and hover.\r\n   */\r\n  _showIndicatorHint: boolean = false;\r\n\r\n  /**\r\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\r\n   * position through the animation. If animations are currently disabled, the fromState is removed\r\n   * so that there is no animation displayed.\r\n   */\r\n  _viewState: ArrowViewStateTransition;\r\n\r\n  /** The direction the arrow should be facing according to the current state. */\r\n  _arrowDirection: SortDirection = '';\r\n\r\n  /**\r\n   * Whether the view state animation should show the transition between the `from` and `to` states.\r\n   */\r\n  _disableViewStateAnimation = false;\r\n\r\n  /**\r\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\r\n   * the column's name.\r\n   */\r\n  @Input('mat-sort-header') id: string;\r\n\r\n  /** Sets the position of the arrow that displays when sorted. */\r\n  @Input() arrowPosition: 'before' | 'after' = 'after';\r\n\r\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\r\n  @Input() start: 'asc' | 'desc';\r\n\r\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\r\n  @Input()\r\n  get disableClear(): boolean { return this._disableClear; }\r\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\r\n  private _disableClear: boolean;\r\n\r\n  constructor(public _intl: MatSortHeaderIntl,\r\n              changeDetectorRef: ChangeDetectorRef,\r\n              @Optional() public _sort: MatSort,\r\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\r\n\r\n    super();\r\n\r\n    if (!_sort) {\r\n      throw getSortHeaderNotContainedWithinSortError();\r\n    }\r\n\r\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\r\n        .subscribe(() => {\r\n          if (this._isSorted()) {\r\n            this._updateArrowDirection();\r\n          }\r\n\r\n          // If this header was recently active and now no longer sorted, animate away the arrow.\r\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\r\n            this._disableViewStateAnimation = false;\r\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\r\n          }\r\n\r\n          changeDetectorRef.markForCheck();\r\n        });\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (!this.id && this._cdkColumnDef) {\r\n      this.id = this._cdkColumnDef.name;\r\n    }\r\n\r\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\r\n    this._updateArrowDirection();\r\n    this._setAnimationTransitionState(\r\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\r\n\r\n    this._sort.register(this);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._sort.deregister(this);\r\n    this._rerenderSubscription.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\r\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\r\n   */\r\n  _setIndicatorHintVisible(visible: boolean) {\r\n    // No-op if the sort header is disabled - should not make the hint visible.\r\n    if (this._isDisabled() && visible) { return; }\r\n\r\n    this._showIndicatorHint = visible;\r\n\r\n    if (!this._isSorted()) {\r\n      this._updateArrowDirection();\r\n      if (this._showIndicatorHint) {\r\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\r\n      } else {\r\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the animation transition view state for the arrow's position and opacity. If the\r\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\r\n   * no animation appears.\r\n   */\r\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\r\n    this._viewState = viewState;\r\n\r\n    // If the animation for arrow position state (opacity/translation) should be disabled,\r\n    // remove the fromState so that it jumps right to the toState.\r\n    if (this._disableViewStateAnimation) {\r\n      this._viewState = {toState: viewState.toState};\r\n    }\r\n  }\r\n\r\n  /** Triggers the sort on this sort header and removes the indicator hint. */\r\n  _handleClick() {\r\n    if (this._isDisabled()) { return; }\r\n\r\n    this._sort.sort(this);\r\n\r\n    // Do not show the animation if the header was already shown in the right position.\r\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\r\n      this._disableViewStateAnimation = true;\r\n    }\r\n\r\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\r\n    // the direction it is facing.\r\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\r\n        {fromState: this._arrowDirection, toState: 'active'} :\r\n        {fromState: 'active', toState: this._arrowDirection};\r\n    this._setAnimationTransitionState(viewState);\r\n\r\n    this._showIndicatorHint = false;\r\n  }\r\n\r\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\r\n  _isSorted() {\r\n    return this._sort.active == this.id &&\r\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\r\n  }\r\n\r\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\r\n  _getArrowDirectionState() {\r\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\r\n  }\r\n\r\n  /** Returns the arrow position state (opacity, translation). */\r\n  _getArrowViewState() {\r\n    const fromState = this._viewState.fromState;\r\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\r\n  }\r\n\r\n  /**\r\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\r\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\r\n   * active sorted direction. The reason this is updated through a function is because the direction\r\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\r\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\r\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\r\n   * preserving its direction, even though the next sort direction is actually different and should\r\n   * only be changed once the arrow displays again (hint or activation).\r\n   */\r\n  _updateArrowDirection() {\r\n    this._arrowDirection = this._isSorted() ?\r\n        this._sort.direction :\r\n        (this.start || this._sort.start);\r\n  }\r\n\r\n  _isDisabled() {\r\n    return this._sort.disabled || this.disabled;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {MatSortHeader} from './sort-header';\r\nimport {MatSort} from './sort';\r\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\r\nimport {CommonModule} from '@angular/common';\r\n\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  exports: [MatSort, MatSortHeader],\r\n  declarations: [MatSort, MatSortHeader],\r\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\r\n})\r\nexport class MatSortModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, TemplateRef} from '@angular/core';\r\nimport {CdkStepLabel} from '@angular/cdk/stepper';\r\n\r\n@Directive({\r\n  selector: '[matStepLabel]',\r\n})\r\nexport class MatStepLabel extends CdkStepLabel {\r\n  constructor(template: TemplateRef<any>) {\r\n    super(template);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Injectable} from '@angular/core';\r\nimport {Subject} from 'rxjs/Subject';\r\n\r\n\r\n/** Stepper data that is required for internationalization. */\r\n@Injectable()\r\nexport class MatStepperIntl {\r\n  /**\r\n   * Stream that emits whenever the labels here are changed. Use this to notify\r\n   * components if the labels have changed after initialization.\r\n   */\r\n  readonly changes: Subject<void> = new Subject<void>();\r\n\r\n  /** Label that is rendered below optional steps. */\r\n  optionalLabel: string = 'Optional';\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FocusMonitor} from '@angular/cdk/a11y';\r\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  Input,\r\n  OnDestroy,\r\n  ViewEncapsulation,\r\n  TemplateRef,\r\n} from '@angular/core';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {MatStepLabel} from './step-label';\r\nimport {MatStepperIntl} from './stepper-intl';\r\n\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-step-header',\r\n  templateUrl: 'step-header.html',\r\n  styleUrls: ['step-header.css'],\r\n  host: {\r\n    'class': 'mat-step-header',\r\n    'role': 'tab',\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatStepHeader implements OnDestroy {\r\n  private _intlSubscription: Subscription;\r\n\r\n  /** State of the given step. */\r\n  @Input() state: string;\r\n\r\n  /** Label of the given step. */\r\n  @Input() label: MatStepLabel | string;\r\n\r\n  /** Overrides for the header icons, passed in via the stepper. */\r\n  @Input() iconOverrides: {[key: string]: TemplateRef<any>};\r\n\r\n  /** Index of the given step. */\r\n  @Input()\r\n  get index(): number { return this._index; }\r\n  set index(value: number) { this._index = coerceNumberProperty(value); }\r\n  private _index: number;\r\n\r\n  /** Whether the given step is selected. */\r\n  @Input()\r\n  get selected(): boolean { return this._selected; }\r\n  set selected(value: boolean) { this._selected = coerceBooleanProperty(value); }\r\n  private _selected: boolean;\r\n\r\n  /** Whether the given step label is active. */\r\n  @Input()\r\n  get active(): boolean { return this._active; }\r\n  set active(value: boolean) { this._active = coerceBooleanProperty(value); }\r\n  private _active: boolean;\r\n\r\n  /** Whether the given step is optional. */\r\n  @Input()\r\n  get optional(): boolean { return this._optional; }\r\n  set optional(value: boolean) { this._optional = coerceBooleanProperty(value); }\r\n  private _optional: boolean;\r\n\r\n  constructor(\r\n    public _intl: MatStepperIntl,\r\n    private _focusMonitor: FocusMonitor,\r\n    private _element: ElementRef,\r\n    changeDetectorRef: ChangeDetectorRef) {\r\n    _focusMonitor.monitor(_element.nativeElement, true);\r\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._intlSubscription.unsubscribe();\r\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\r\n  }\r\n\r\n  /** Returns string label of given step if it is a text label. */\r\n  _stringLabel(): string | null {\r\n    return this.label instanceof MatStepLabel ? null : this.label;\r\n  }\r\n\r\n  /** Returns MatStepLabel if the label of given step is a template label. */\r\n  _templateLabel(): MatStepLabel | null {\r\n    return this.label instanceof MatStepLabel ? this.label : null;\r\n  }\r\n\r\n  /** Returns the host HTML element. */\r\n  _getHostElement() {\r\n    return this._element.nativeElement;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {\r\n  animate,\r\n  state,\r\n  style,\r\n  transition,\r\n  trigger,\r\n  AnimationTriggerMetadata,\r\n} from '@angular/animations';\r\n\r\n/** Animations used by the Material steppers. */\r\nexport const matStepperAnimations: {\r\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\r\n  readonly verticalStepTransition: AnimationTriggerMetadata;\r\n} = {\r\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\r\n  horizontalStepTransition: trigger('stepTransition', [\r\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\r\n    state('current', style({transform: 'none', visibility: 'visible'})),\r\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\r\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\r\n  ]),\r\n\r\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\r\n  verticalStepTransition: trigger('stepTransition', [\r\n    state('previous', style({height: '0px', visibility: 'hidden'})),\r\n    state('next', style({height: '0px', visibility: 'hidden'})),\r\n    state('current', style({height: '*', visibility: 'visible'})),\r\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\r\n  ])\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, Input, TemplateRef} from '@angular/core';\r\n\r\n/**\r\n * Template to be used to override the icons inside the step header.\r\n */\r\n@Directive({\r\n  selector: 'ng-template[matStepperIcon]',\r\n})\r\nexport class MatStepperIcon {\r\n  /** Name of the icon to be overridden. */\r\n  @Input('matStepperIcon') name: 'edit' | 'done';\r\n\r\n  constructor(public templateRef: TemplateRef<any>) { }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  forwardRef,\r\n  Inject,\r\n  Input,\r\n  ViewEncapsulation,\r\n  QueryList,\r\n} from '@angular/core';\r\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\r\nimport {matDrawerAnimations} from './drawer-animations';\r\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\r\n\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-sidenav-content',\r\n  template: '<ng-content></ng-content>',\r\n  host: {\r\n    'class': 'mat-drawer-content mat-sidenav-content',\r\n    '[style.margin-left.px]': '_margins.left',\r\n    '[style.margin-right.px]': '_margins.right',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n})\r\nexport class MatSidenavContent extends MatDrawerContent {\r\n  constructor(\r\n      changeDetectorRef: ChangeDetectorRef,\r\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\r\n    super(changeDetectorRef, container);\r\n  }\r\n}\r\n\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-sidenav',\r\n  exportAs: 'matSidenav',\r\n  template: '<ng-content></ng-content>',\r\n  animations: [matDrawerAnimations.transformDrawer],\r\n  host: {\r\n    'class': 'mat-drawer mat-sidenav',\r\n    'tabIndex': '-1',\r\n    '[@transform]': '_animationState',\r\n    '(@transform.start)': '_onAnimationStart($event)',\r\n    '(@transform.done)': '_onAnimationEnd($event)',\r\n    // must prevent the browser from aligning text based on value\r\n    '[attr.align]': 'null',\r\n    '[class.mat-drawer-end]': 'position === \"end\"',\r\n    '[class.mat-drawer-over]': 'mode === \"over\"',\r\n    '[class.mat-drawer-push]': 'mode === \"push\"',\r\n    '[class.mat-drawer-side]': 'mode === \"side\"',\r\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\r\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\r\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n})\r\nexport class MatSidenav extends MatDrawer {\r\n  /** Whether the sidenav is fixed in the viewport. */\r\n  @Input()\r\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\r\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\r\n  private _fixedInViewport = false;\r\n\r\n  /**\r\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\r\n   * mode.\r\n   */\r\n  @Input()\r\n  get fixedTopGap(): number { return this._fixedTopGap; }\r\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\r\n  private _fixedTopGap = 0;\r\n\r\n  /**\r\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\r\n   * fixed mode.\r\n   */\r\n  @Input()\r\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\r\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\r\n  private _fixedBottomGap = 0;\r\n}\r\n\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-sidenav-container',\r\n  exportAs: 'matSidenavContainer',\r\n  templateUrl: 'sidenav-container.html',\r\n  styleUrls: ['drawer.css'],\r\n  host: {\r\n    'class': 'mat-drawer-container mat-sidenav-container',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n})\r\nexport class MatSidenavContainer extends MatDrawerContainer {\r\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\r\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {A11yModule} from '@angular/cdk/a11y';\r\nimport {OverlayModule} from '@angular/cdk/overlay';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {MatCommonModule} from '@angular/material/core';\r\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\r\nimport {PlatformModule} from '@angular/cdk/platform';\r\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\r\nimport {\r\n  MatDrawer,\r\n  MatDrawerContainer,\r\n  MatDrawerContent,\r\n  MAT_DRAWER_DEFAULT_AUTOSIZE,\r\n} from './drawer';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatCommonModule,\r\n    A11yModule,\r\n    OverlayModule,\r\n    ScrollDispatchModule,\r\n    PlatformModule,\r\n  ],\r\n  exports: [\r\n    MatCommonModule,\r\n    MatDrawer,\r\n    MatDrawerContainer,\r\n    MatDrawerContent,\r\n    MatSidenav,\r\n    MatSidenavContainer,\r\n    MatSidenavContent,\r\n  ],\r\n  declarations: [\r\n    MatDrawer,\r\n    MatDrawerContainer,\r\n    MatDrawerContent,\r\n    MatSidenav,\r\n    MatSidenavContainer,\r\n    MatSidenavContent,\r\n  ],\r\n  providers: [\r\n    {provide: MAT_DRAWER_DEFAULT_AUTOSIZE, useValue: false}\r\n  ]\r\n})\r\nexport class MatSidenavModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {\r\n  AfterContentInit,\r\n  Attribute,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  OnDestroy,\r\n  Output,\r\n  ViewChild,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {\r\n  CanColor,\r\n  CanDisable,\r\n  CanDisableRipple,\r\n  HammerInput,\r\n  HasTabIndex,\r\n  MatRipple,\r\n  mixinColor,\r\n  mixinDisabled,\r\n  mixinDisableRipple,\r\n  mixinTabIndex,\r\n  RippleRef,\r\n} from '@angular/material/core';\r\n\r\n// Increasing integer for generating unique ids for slide-toggle components.\r\nlet nextUniqueId = 0;\r\n\r\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MatSlideToggle),\r\n  multi: true\r\n};\r\n\r\n/** Change event object emitted by a MatSlideToggle. */\r\nexport class MatSlideToggleChange {\r\n  constructor(\r\n    /** The source MatSlideToggle of the event. */\r\n    public source: MatSlideToggle,\r\n    /** The new `checked` value of the MatSlideToggle. */\r\n    public checked: boolean) { }\r\n}\r\n\r\n// Boilerplate for applying mixins to MatSlideToggle.\r\n/** @docs-private */\r\nexport class MatSlideToggleBase {\r\n  constructor(public _elementRef: ElementRef) {}\r\n}\r\nexport const _MatSlideToggleMixinBase =\r\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\r\n\r\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-slide-toggle',\r\n  exportAs: 'matSlideToggle',\r\n  host: {\r\n    'class': 'mat-slide-toggle',\r\n    '[id]': 'id',\r\n    '[class.mat-checked]': 'checked',\r\n    '[class.mat-disabled]': 'disabled',\r\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\r\n  },\r\n  templateUrl: 'slide-toggle.html',\r\n  styleUrls: ['slide-toggle.css'],\r\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\r\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\r\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\r\n\r\n  private onChange = (_: any) => {};\r\n  private onTouched = () => {};\r\n\r\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\r\n  private _slideRenderer: SlideToggleRenderer;\r\n  private _required: boolean = false;\r\n  private _checked: boolean = false;\r\n\r\n  /** Reference to the focus state ripple. */\r\n  private _focusRipple: RippleRef | null;\r\n\r\n  /** Name value will be applied to the input element if present */\r\n  @Input() name: string | null = null;\r\n\r\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\r\n  @Input() id: string = this._uniqueId;\r\n\r\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\r\n  @Input() labelPosition: 'before' | 'after' = 'after';\r\n\r\n  /** Whether the slide-toggle element is checked or not */\r\n\r\n  /** Used to set the aria-label attribute on the underlying input element. */\r\n  @Input('aria-label') ariaLabel: string | null = null;\r\n\r\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\r\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\r\n\r\n  /** Whether the slide-toggle is required. */\r\n  @Input()\r\n  get required(): boolean { return this._required; }\r\n  set required(value) { this._required = coerceBooleanProperty(value); }\r\n\r\n  /** Whether the slide-toggle element is checked or not */\r\n  @Input()\r\n  get checked(): boolean { return this._checked; }\r\n  set checked(value) {\r\n    this._checked = coerceBooleanProperty(value);\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n  /** An event will be dispatched each time the slide-toggle changes its value. */\r\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\r\n      new EventEmitter<MatSlideToggleChange>();\r\n\r\n  /** Returns the unique id for the visual hidden input. */\r\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\r\n\r\n  /** Reference to the underlying input element. */\r\n  @ViewChild('input') _inputElement: ElementRef;\r\n\r\n  /** Reference to the ripple directive on the thumb container. */\r\n  @ViewChild(MatRipple) _ripple: MatRipple;\r\n\r\n  constructor(elementRef: ElementRef,\r\n              private _platform: Platform,\r\n              private _focusMonitor: FocusMonitor,\r\n              private _changeDetectorRef: ChangeDetectorRef,\r\n              @Attribute('tabindex') tabIndex: string) {\r\n\r\n    super(elementRef);\r\n    this.tabIndex = parseInt(tabIndex) || 0;\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._slideRenderer = new SlideToggleRenderer(this._elementRef, this._platform);\r\n\r\n    this._focusMonitor\r\n      .monitor(this._inputElement.nativeElement)\r\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\r\n  }\r\n\r\n  /** Method being called whenever the underlying input emits a change event. */\r\n  _onChangeEvent(event: Event) {\r\n    // We always have to stop propagation on the change event.\r\n    // Otherwise the change event, from the input element, will bubble up and\r\n    // emit its event object to the component's `change` output.\r\n    event.stopPropagation();\r\n\r\n    // Releasing the pointer over the `<label>` element while dragging triggers another\r\n    // click event on the `<label>` element. This means that the checked state of the underlying\r\n    // input changed unintentionally and needs to be changed back.\r\n    if (this._slideRenderer.dragging) {\r\n      this._inputElement.nativeElement.checked = this.checked;\r\n      return;\r\n    }\r\n\r\n    // Sync the value from the underlying input element with the component instance.\r\n    this.checked = this._inputElement.nativeElement.checked;\r\n\r\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\r\n    // there is no change event, when the checked state changes programmatically.\r\n    this._emitChangeEvent();\r\n  }\r\n\r\n  /** Method being called whenever the slide-toggle has been clicked. */\r\n  _onInputClick(event: Event) {\r\n    // We have to stop propagation for click events on the visual hidden input element.\r\n    // By default, when a user clicks on a label element, a generated click event will be\r\n    // dispatched on the associated input element. Since we are using a label element as our\r\n    // root container, the click event on the `slide-toggle` will be executed twice.\r\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\r\n    // This will lead to multiple click events.\r\n    // Preventing bubbling for the second event will solve that issue.\r\n    event.stopPropagation();\r\n  }\r\n\r\n  /** Implemented as part of ControlValueAccessor. */\r\n  writeValue(value: any): void {\r\n    this.checked = !!value;\r\n  }\r\n\r\n  /** Implemented as part of ControlValueAccessor. */\r\n  registerOnChange(fn: any): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  /** Implemented as part of ControlValueAccessor. */\r\n  registerOnTouched(fn: any): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  /** Implemented as a part of ControlValueAccessor. */\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /** Focuses the slide-toggle. */\r\n  focus(): void {\r\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\r\n  }\r\n\r\n  /** Toggles the checked state of the slide-toggle. */\r\n  toggle(): void {\r\n    this.checked = !this.checked;\r\n  }\r\n\r\n  /** Function is called whenever the focus changes for the input element. */\r\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\r\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\r\n      // For keyboard focus show a persistent ripple as focus indicator.\r\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\r\n    } else if (!focusOrigin) {\r\n      this.onTouched();\r\n\r\n      // Fade out and clear the focus ripple if one is currently present.\r\n      if (this._focusRipple) {\r\n        this._focusRipple.fadeOut();\r\n        this._focusRipple = null;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\r\n   */\r\n  private _emitChangeEvent() {\r\n    this.onChange(this.checked);\r\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\r\n  }\r\n\r\n  _onDragStart() {\r\n    if (!this.disabled) {\r\n      this._slideRenderer.startThumbDrag(this.checked);\r\n    }\r\n  }\r\n\r\n  _onDrag(event: HammerInput) {\r\n    if (this._slideRenderer.dragging) {\r\n      this._slideRenderer.updateThumbPosition(event.deltaX);\r\n    }\r\n  }\r\n\r\n  _onDragEnd() {\r\n    if (this._slideRenderer.dragging) {\r\n      const newCheckedValue = this._slideRenderer.dragPercentage > 50;\r\n\r\n      if (newCheckedValue !== this.checked) {\r\n        this.checked = newCheckedValue;\r\n        this._emitChangeEvent();\r\n      }\r\n\r\n      // The drag should be stopped outside of the current event handler, because otherwise the\r\n      // click event will be fired before and will revert the drag change.\r\n      setTimeout(() => this._slideRenderer.stopThumbDrag());\r\n    }\r\n  }\r\n\r\n  /** Method being called whenever the label text changes. */\r\n  _onLabelTextChange() {\r\n    // This method is getting called whenever the label of the slide-toggle changes.\r\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\r\n    // that has been recognized by the cdkObserveContent directive.\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n}\r\n\r\n/**\r\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\r\n */\r\nclass SlideToggleRenderer {\r\n\r\n  /** Reference to the thumb HTMLElement. */\r\n  private _thumbEl: HTMLElement;\r\n\r\n  /** Reference to the thumb bar HTMLElement. */\r\n  private _thumbBarEl: HTMLElement;\r\n\r\n  /** Width of the thumb bar of the slide-toggle. */\r\n  private _thumbBarWidth: number;\r\n\r\n  /** Previous checked state before drag started. */\r\n  private _previousChecked: boolean;\r\n\r\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\r\n  dragPercentage: number;\r\n\r\n  /** Whether the thumb is currently being dragged. */\r\n  dragging: boolean = false;\r\n\r\n  constructor(elementRef: ElementRef, platform: Platform) {\r\n    // We only need to interact with these elements when we're on the browser, so only grab\r\n    // the reference in that case.\r\n    if (platform.isBrowser) {\r\n      this._thumbEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\r\n      this._thumbBarEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\r\n    }\r\n  }\r\n\r\n  /** Initializes the drag of the slide-toggle. */\r\n  startThumbDrag(checked: boolean): void {\r\n    if (this.dragging) { return; }\r\n\r\n    this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\r\n    this._thumbEl.classList.add('mat-dragging');\r\n\r\n    this._previousChecked = checked;\r\n    this.dragging = true;\r\n  }\r\n\r\n  /** Resets the current drag and returns the new checked value. */\r\n  stopThumbDrag(): boolean {\r\n    if (!this.dragging) { return false; }\r\n\r\n    this.dragging = false;\r\n    this._thumbEl.classList.remove('mat-dragging');\r\n\r\n    // Reset the transform because the component will take care of the thumb position after drag.\r\n    this._thumbEl.style.transform = '';\r\n\r\n    return this.dragPercentage > 50;\r\n  }\r\n\r\n  /** Updates the thumb containers position from the specified distance. */\r\n  updateThumbPosition(distance: number): void {\r\n    this.dragPercentage = this._getDragPercentage(distance);\r\n    // Calculate the moved distance based on the thumb bar width.\r\n    const dragX = (this.dragPercentage / 100) * this._thumbBarWidth;\r\n    this._thumbEl.style.transform = `translate3d(${dragX}px, 0, 0)`;\r\n  }\r\n\r\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\r\n  private _getDragPercentage(distance: number) {\r\n    let percentage = (distance / this._thumbBarWidth) * 100;\r\n\r\n    // When the toggle was initially checked, then we have to start the drag at the end.\r\n    if (this._previousChecked) {\r\n      percentage += 100;\r\n    }\r\n\r\n    return Math.max(0, Math.min(percentage, 100));\r\n  }\r\n\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ObserversModule} from '@angular/cdk/observers';\r\nimport {PlatformModule} from '@angular/cdk/platform';\r\nimport {NgModule} from '@angular/core';\r\nimport {\r\n  GestureConfig,\r\n  MatCommonModule,\r\n  MatRippleModule,\r\n} from '@angular/material/core';\r\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\r\nimport {A11yModule} from '@angular/cdk/a11y';\r\nimport {MatSlideToggle} from './slide-toggle';\r\n\r\n\r\n@NgModule({\r\n  imports: [MatRippleModule, MatCommonModule, PlatformModule, ObserversModule, A11yModule],\r\n  exports: [MatSlideToggle, MatCommonModule],\r\n  declarations: [MatSlideToggle],\r\n  providers: [\r\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\r\n  ],\r\n})\r\nexport class MatSlideToggleModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\r\nimport {\r\n  DOWN_ARROW,\r\n  END,\r\n  HOME,\r\n  LEFT_ARROW,\r\n  PAGE_DOWN,\r\n  PAGE_UP,\r\n  RIGHT_ARROW,\r\n  UP_ARROW,\r\n} from '@angular/cdk/keycodes';\r\nimport {\r\n  Attribute,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional,\r\n  Output,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {\r\n  CanColor,\r\n  CanDisable,\r\n  HammerInput,\r\n  HasTabIndex,\r\n  mixinColor,\r\n  mixinDisabled,\r\n  mixinTabIndex,\r\n} from '@angular/material/core';\r\nimport {Subscription} from 'rxjs/Subscription';\r\n\r\n/**\r\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\r\n * the default separation we chose.\r\n */\r\nconst MIN_AUTO_TICK_SEPARATION = 30;\r\n\r\n/** The thumb gap size for a disabled slider. */\r\nconst DISABLED_THUMB_GAP = 7;\r\n\r\n/** The thumb gap size for a non-active slider at its minimum value. */\r\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\r\n\r\n/** The thumb gap size for an active slider at its minimum value. */\r\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\r\n\r\n/**\r\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\r\n * This allows it to support [(ngModel)] and [formControl].\r\n */\r\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MatSlider),\r\n  multi: true\r\n};\r\n\r\n/** A simple change event emitted by the MatSlider component. */\r\nexport class MatSliderChange {\r\n  /** The MatSlider that changed. */\r\n  source: MatSlider;\r\n\r\n  /** The new value of the source slider. */\r\n  value: number | null;\r\n}\r\n\r\n\r\n// Boilerplate for applying mixins to MatSlider.\r\n/** @docs-private */\r\nexport class MatSliderBase {\r\n  constructor(public _elementRef: ElementRef) {}\r\n}\r\nexport const _MatSliderMixinBase =\r\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\r\n\r\n/**\r\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\r\n * behavior to the native `<input type=\"range\">` element.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-slider',\r\n  exportAs: 'matSlider',\r\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\r\n  host: {\r\n    '(focus)': '_onFocus()',\r\n    '(blur)': '_onBlur()',\r\n    '(click)': '_onClick($event)',\r\n    '(keydown)': '_onKeydown($event)',\r\n    '(keyup)': '_onKeyup()',\r\n    '(mouseenter)': '_onMouseenter()',\r\n    '(slide)': '_onSlide($event)',\r\n    '(slideend)': '_onSlideEnd()',\r\n    '(slidestart)': '_onSlideStart($event)',\r\n    'class': 'mat-slider',\r\n    'role': 'slider',\r\n    '[tabIndex]': 'tabIndex',\r\n    '[attr.aria-disabled]': 'disabled',\r\n    '[attr.aria-valuemax]': 'max',\r\n    '[attr.aria-valuemin]': 'min',\r\n    '[attr.aria-valuenow]': 'value',\r\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\r\n    '[class.mat-slider-disabled]': 'disabled',\r\n    '[class.mat-slider-has-ticks]': 'tickInterval',\r\n    '[class.mat-slider-horizontal]': '!vertical',\r\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\r\n    '[class.mat-slider-sliding]': '_isSliding',\r\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\r\n    '[class.mat-slider-vertical]': 'vertical',\r\n    '[class.mat-slider-min-value]': '_isMinValue',\r\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\r\n  },\r\n  templateUrl: 'slider.html',\r\n  styleUrls: ['slider.css'],\r\n  inputs: ['disabled', 'color', 'tabIndex'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatSlider extends _MatSliderMixinBase\r\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\r\n  /** Whether the slider is inverted. */\r\n  @Input()\r\n  get invert(): boolean { return this._invert; }\r\n  set invert(value: boolean) {\r\n    this._invert = coerceBooleanProperty(value);\r\n  }\r\n  private _invert = false;\r\n\r\n  /** The maximum value that the slider can have. */\r\n  @Input()\r\n  get max(): number { return this._max; }\r\n  set max(v: number) {\r\n    this._max = coerceNumberProperty(v, this._max);\r\n    this._percent = this._calculatePercentage(this._value);\r\n\r\n    // Since this also modifies the percentage, we need to let the change detection know.\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n  private _max: number = 100;\r\n\r\n  /** The minimum value that the slider can have. */\r\n  @Input()\r\n  get min(): number { return this._min; }\r\n  set min(v: number) {\r\n    this._min = coerceNumberProperty(v, this._min);\r\n\r\n    // If the value wasn't explicitly set by the user, set it to the min.\r\n    if (this._value === null) {\r\n      this.value = this._min;\r\n    }\r\n    this._percent = this._calculatePercentage(this._value);\r\n\r\n    // Since this also modifies the percentage, we need to let the change detection know.\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n  private _min: number = 0;\r\n\r\n  /** The values at which the thumb will snap. */\r\n  @Input()\r\n  get step(): number { return this._step; }\r\n  set step(v: number) {\r\n    this._step = coerceNumberProperty(v, this._step);\r\n\r\n    if (this._step % 1 !== 0) {\r\n      this._roundLabelTo = this._step.toString().split('.').pop()!.length;\r\n    }\r\n\r\n    // Since this could modify the label, we need to notify the change detection.\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n  private _step: number = 1;\r\n\r\n  /** Whether or not to show the thumb label. */\r\n  @Input()\r\n  get thumbLabel(): boolean { return this._thumbLabel; }\r\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\r\n  private _thumbLabel: boolean = false;\r\n\r\n  /**\r\n   * @deprecated\r\n   * @deletion-target 6.0.0\r\n   */\r\n  @Input('thumb-label')\r\n  get _thumbLabelDeprecated(): boolean { return this._thumbLabel; }\r\n  set _thumbLabelDeprecated(value) { this._thumbLabel = value; }\r\n\r\n  /**\r\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\r\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\r\n   */\r\n  @Input()\r\n  get tickInterval() { return this._tickInterval; }\r\n  set tickInterval(value: 'auto' | number) {\r\n    if (value === 'auto') {\r\n      this._tickInterval = 'auto';\r\n    } else if (typeof value === 'number' || typeof value === 'string') {\r\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\r\n    } else {\r\n      this._tickInterval = 0;\r\n    }\r\n  }\r\n  private _tickInterval: 'auto' | number = 0;\r\n\r\n  /**\r\n   * @deprecated\r\n   * @deletion-target 6.0.0\r\n   */\r\n  @Input('tick-interval')\r\n  get _tickIntervalDeprecated() { return this.tickInterval; }\r\n  set _tickIntervalDeprecated(v) { this.tickInterval = v; }\r\n\r\n  /** Value of the slider. */\r\n  @Input()\r\n  get value(): number | null {\r\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\r\n    if (this._value === null) {\r\n      this.value = this._min;\r\n    }\r\n    return this._value;\r\n  }\r\n  set value(v: number | null) {\r\n    if (v !== this._value) {\r\n      this._value = coerceNumberProperty(v);\r\n      this._percent = this._calculatePercentage(this._value);\r\n\r\n      // Since this also modifies the percentage, we need to let the change detection know.\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\r\n  private _value: number | null = null;\r\n\r\n  /** Whether the slider is vertical. */\r\n  @Input()\r\n  get vertical(): boolean { return this._vertical; }\r\n  set vertical(value: boolean) {\r\n    this._vertical = coerceBooleanProperty(value);\r\n  }\r\n  private _vertical = false;\r\n\r\n  /** Event emitted when the slider value has changed. */\r\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\r\n\r\n  /** Event emitted when the slider thumb moves. */\r\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\r\n\r\n  /** The value to be used for display purposes. */\r\n  get displayValue(): string | number {\r\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\r\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\r\n    // every change detection cycle.\r\n    if (this._roundLabelTo && this.value && this.value % 1 !== 0) {\r\n      return this.value.toFixed(this._roundLabelTo);\r\n    }\r\n\r\n    return this.value || 0;\r\n  }\r\n\r\n  /** set focus to the host element */\r\n  focus() {\r\n    this._focusHostElement();\r\n  }\r\n\r\n  /** blur the host element */\r\n  blur() {\r\n    this._blurHostElement();\r\n  }\r\n\r\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\r\n  onTouched: () => any = () => {};\r\n\r\n  /** The percentage of the slider that coincides with the value. */\r\n  get percent(): number { return this._clamp(this._percent); }\r\n  private _percent: number = 0;\r\n\r\n  /**\r\n   * Whether or not the thumb is sliding.\r\n   * Used to determine if there should be a transition for the thumb and fill track.\r\n   */\r\n  _isSliding: boolean = false;\r\n\r\n  /**\r\n   * Whether or not the slider is active (clicked or sliding).\r\n   * Used to shrink and grow the thumb as according to the Material Design spec.\r\n   */\r\n  _isActive: boolean = false;\r\n\r\n  /**\r\n   * Whether the axis of the slider is inverted.\r\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\r\n   */\r\n  get _invertAxis() {\r\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\r\n    // top. However from a y-axis standpoint this is inverted.\r\n    return this.vertical ? !this.invert : this.invert;\r\n  }\r\n\r\n\r\n  /** Whether the slider is at its minimum value. */\r\n  get _isMinValue() {\r\n    return this.percent === 0;\r\n  }\r\n\r\n  /**\r\n   * The amount of space to leave between the slider thumb and the track fill & track background\r\n   * elements.\r\n   */\r\n  get _thumbGap() {\r\n    if (this.disabled) {\r\n      return DISABLED_THUMB_GAP;\r\n    }\r\n    if (this._isMinValue && !this.thumbLabel) {\r\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  /** CSS styles for the track background element. */\r\n  get _trackBackgroundStyles(): { [key: string]: string } {\r\n    let axis = this.vertical ? 'Y' : 'X';\r\n    let sign = this._invertMouseCoords ? '-' : '';\r\n    return {\r\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\r\n    };\r\n  }\r\n\r\n  /** CSS styles for the track fill element. */\r\n  get _trackFillStyles(): { [key: string]: string } {\r\n    let axis = this.vertical ? 'Y' : 'X';\r\n    let sign = this._invertMouseCoords ? '' : '-';\r\n    return {\r\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\r\n    };\r\n  }\r\n\r\n  /** CSS styles for the ticks container element. */\r\n  get _ticksContainerStyles(): { [key: string]: string } {\r\n    let axis = this.vertical ? 'Y' : 'X';\r\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\r\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\r\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\r\n    let offset = this._tickIntervalPercent / 2 * 100;\r\n    return {\r\n      'transform': `translate${axis}(${sign}${offset}%)`\r\n    };\r\n  }\r\n\r\n  /** CSS styles for the ticks element. */\r\n  get _ticksStyles(): { [key: string]: string } {\r\n    let tickSize = this._tickIntervalPercent * 100;\r\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\r\n    let axis = this.vertical ? 'Y' : 'X';\r\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\r\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\r\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\r\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\r\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\r\n    let styles: { [key: string]: string } = {\r\n      'backgroundSize': backgroundSize,\r\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\r\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\r\n    };\r\n\r\n    if (this._isMinValue && this._thumbGap) {\r\n      let side = this.vertical ?\r\n          (this._invertAxis ? 'Bottom' : 'Top') :\r\n          (this._invertAxis ? 'Right' : 'Left');\r\n      styles[`padding${side}`] = `${this._thumbGap}px`;\r\n    }\r\n\r\n    return styles;\r\n  }\r\n\r\n  get _thumbContainerStyles(): { [key: string]: string } {\r\n    let axis = this.vertical ? 'Y' : 'X';\r\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\r\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\r\n    let invertOffset =\r\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\r\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\r\n    return {\r\n      'transform': `translate${axis}(-${offset}%)`\r\n    };\r\n  }\r\n\r\n  /** The size of a tick interval as a percentage of the size of the track. */\r\n  private _tickIntervalPercent: number = 0;\r\n\r\n  /** The dimensions of the slider. */\r\n  private _sliderDimensions: ClientRect | null = null;\r\n\r\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\r\n\r\n  /** Decimal places to round to, based on the step amount. */\r\n  private _roundLabelTo: number;\r\n\r\n  /** Subscription to the Directionality change EventEmitter. */\r\n  private _dirChangeSubscription = Subscription.EMPTY;\r\n\r\n  /** The value of the slider when the slide start event fires. */\r\n  private _valueOnSlideStart: number | null;\r\n\r\n  /** Reference to the inner slider wrapper element. */\r\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\r\n\r\n  /**\r\n   * Whether mouse events should be converted to a slider position by calculating their distance\r\n   * from the right or bottom edge of the slider as opposed to the top or left.\r\n   */\r\n  private get _invertMouseCoords() {\r\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\r\n  }\r\n\r\n  /** The language direction for this slider element. */\r\n  private get _direction() {\r\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\r\n  }\r\n\r\n  constructor(elementRef: ElementRef,\r\n              private _focusMonitor: FocusMonitor,\r\n              private _changeDetectorRef: ChangeDetectorRef,\r\n              @Optional() private _dir: Directionality,\r\n              @Attribute('tabindex') tabIndex: string) {\r\n    super(elementRef);\r\n\r\n    this.tabIndex = parseInt(tabIndex) || 0;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this._focusMonitor\r\n        .monitor(this._elementRef.nativeElement, true)\r\n        .subscribe((origin: FocusOrigin) => {\r\n          this._isActive = !!origin && origin !== 'keyboard';\r\n          this._changeDetectorRef.detectChanges();\r\n        });\r\n    if (this._dir) {\r\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\r\n        this._changeDetectorRef.markForCheck();\r\n      });\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\r\n    this._dirChangeSubscription.unsubscribe();\r\n  }\r\n\r\n  _onMouseenter() {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n\r\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\r\n    // ticks and determine where on the slider click and slide events happen.\r\n    this._sliderDimensions = this._getSliderDimensions();\r\n    this._updateTickIntervalPercent();\r\n  }\r\n\r\n  _onClick(event: MouseEvent) {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n\r\n    let oldValue = this.value;\r\n    this._isSliding = false;\r\n    this._focusHostElement();\r\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\r\n\r\n    // Emit a change and input event if the value changed.\r\n    if (oldValue != this.value) {\r\n      this._emitInputEvent();\r\n      this._emitChangeEvent();\r\n    }\r\n  }\r\n\r\n  _onSlide(event: HammerInput) {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n\r\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\r\n    // state, call the slide start handler manually.\r\n    if (!this._isSliding) {\r\n      this._onSlideStart(null);\r\n    }\r\n\r\n    // Prevent the slide from selecting anything else.\r\n    event.preventDefault();\r\n\r\n    let oldValue = this.value;\r\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\r\n\r\n    // Native range elements always emit `input` events when the value changed while sliding.\r\n    if (oldValue != this.value) {\r\n      this._emitInputEvent();\r\n    }\r\n  }\r\n\r\n  _onSlideStart(event: HammerInput | null) {\r\n    if (this.disabled || this._isSliding) {\r\n      return;\r\n    }\r\n\r\n    // Simulate mouseenter in case this is a mobile device.\r\n    this._onMouseenter();\r\n\r\n    this._isSliding = true;\r\n    this._focusHostElement();\r\n    this._valueOnSlideStart = this.value;\r\n\r\n    if (event) {\r\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\r\n      event.preventDefault();\r\n    }\r\n  }\r\n\r\n  _onSlideEnd() {\r\n    this._isSliding = false;\r\n\r\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\r\n      this._emitChangeEvent();\r\n    }\r\n    this._valueOnSlideStart = null;\r\n  }\r\n\r\n  _onFocus() {\r\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\r\n    // ticks and determine where on the slider click and slide events happen.\r\n    this._sliderDimensions = this._getSliderDimensions();\r\n    this._updateTickIntervalPercent();\r\n  }\r\n\r\n  _onBlur() {\r\n    this.onTouched();\r\n  }\r\n\r\n  _onKeydown(event: KeyboardEvent) {\r\n    if (this.disabled) { return; }\r\n\r\n    let oldValue = this.value;\r\n\r\n    switch (event.keyCode) {\r\n      case PAGE_UP:\r\n        this._increment(10);\r\n        break;\r\n      case PAGE_DOWN:\r\n        this._increment(-10);\r\n        break;\r\n      case END:\r\n        this.value = this.max;\r\n        break;\r\n      case HOME:\r\n        this.value = this.min;\r\n        break;\r\n      case LEFT_ARROW:\r\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\r\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\r\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\r\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\r\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\r\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\r\n        // sighted users, therefore we do not swap the meaning.\r\n        this._increment(this._direction == 'rtl' ? 1 : -1);\r\n        break;\r\n      case UP_ARROW:\r\n        this._increment(1);\r\n        break;\r\n      case RIGHT_ARROW:\r\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\r\n        this._increment(this._direction == 'rtl' ? -1 : 1);\r\n        break;\r\n      case DOWN_ARROW:\r\n        this._increment(-1);\r\n        break;\r\n      default:\r\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\r\n        // it.\r\n        return;\r\n    }\r\n\r\n    if (oldValue != this.value) {\r\n      this._emitInputEvent();\r\n      this._emitChangeEvent();\r\n    }\r\n\r\n    this._isSliding = true;\r\n    event.preventDefault();\r\n  }\r\n\r\n  _onKeyup() {\r\n    this._isSliding = false;\r\n  }\r\n\r\n  /** Increments the slider by the given number of steps (negative number decrements). */\r\n  private _increment(numSteps: number) {\r\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\r\n  }\r\n\r\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\r\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\r\n    if (!this._sliderDimensions) {\r\n      return;\r\n    }\r\n\r\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\r\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\r\n    let posComponent = this.vertical ? pos.y : pos.x;\r\n\r\n    // The exact value is calculated from the event and used to find the closest snap value.\r\n    let percent = this._clamp((posComponent - offset) / size);\r\n    if (this._invertMouseCoords) {\r\n      percent = 1 - percent;\r\n    }\r\n    let exactValue = this._calculateValue(percent);\r\n\r\n    // This calculation finds the closest step by finding the closest whole number divisible by the\r\n    // step relative to the min.\r\n    let closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\r\n    // The value needs to snap to the min and max.\r\n    this.value = this._clamp(closestValue, this.min, this.max);\r\n  }\r\n\r\n  /** Emits a change event if the current value is different from the last emitted value. */\r\n  private _emitChangeEvent() {\r\n    this._controlValueAccessorChangeFn(this.value);\r\n    this.change.emit(this._createChangeEvent());\r\n  }\r\n\r\n  /** Emits an input event when the current value is different from the last emitted value. */\r\n  private _emitInputEvent() {\r\n    this.input.emit(this._createChangeEvent());\r\n  }\r\n\r\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\r\n  private _updateTickIntervalPercent() {\r\n    if (!this.tickInterval || !this._sliderDimensions) {\r\n      return;\r\n    }\r\n\r\n    if (this.tickInterval == 'auto') {\r\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\r\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\r\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\r\n      let pixelsPerTick = stepsPerTick * this.step;\r\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\r\n    } else {\r\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\r\n    }\r\n  }\r\n\r\n  /** Creates a slider change object from the specified value. */\r\n  private _createChangeEvent(value = this.value): MatSliderChange {\r\n    let event = new MatSliderChange();\r\n\r\n    event.source = this;\r\n    event.value = value;\r\n\r\n    return event;\r\n  }\r\n\r\n  /** Calculates the percentage of the slider that a value is. */\r\n  private _calculatePercentage(value: number | null) {\r\n    return ((value || 0) - this.min) / (this.max - this.min);\r\n  }\r\n\r\n  /** Calculates the value a percentage of the slider corresponds to. */\r\n  private _calculateValue(percentage: number) {\r\n    return this.min + percentage * (this.max - this.min);\r\n  }\r\n\r\n  /** Return a number between two numbers. */\r\n  private _clamp(value: number, min = 0, max = 1) {\r\n    return Math.max(min, Math.min(value, max));\r\n  }\r\n\r\n  /**\r\n   * Get the bounding client rect of the slider track element.\r\n   * The track is used rather than the native element to ignore the extra space that the thumb can\r\n   * take up.\r\n   */\r\n  private _getSliderDimensions() {\r\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\r\n  }\r\n\r\n  /**\r\n   * Focuses the native element.\r\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\r\n   */\r\n  private _focusHostElement() {\r\n    this._elementRef.nativeElement.focus();\r\n  }\r\n\r\n  /** Blurs the native element. */\r\n  private _blurHostElement() {\r\n    this._elementRef.nativeElement.blur();\r\n  }\r\n\r\n  /**\r\n   * Sets the model value. Implemented as part of ControlValueAccessor.\r\n   * @param value\r\n   */\r\n  writeValue(value: any) {\r\n    this.value = value;\r\n  }\r\n\r\n  /**\r\n   * Registers a callback to eb triggered when the value has changed.\r\n   * Implemented as part of ControlValueAccessor.\r\n   * @param fn Callback to be registered.\r\n   */\r\n  registerOnChange(fn: (value: any) => void) {\r\n    this._controlValueAccessorChangeFn = fn;\r\n  }\r\n\r\n  /**\r\n   * Registers a callback to be triggered when the component is touched.\r\n   * Implemented as part of ControlValueAccessor.\r\n   * @param fn Callback to be registered.\r\n   */\r\n  registerOnTouched(fn: any) {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  /**\r\n   * Sets whether the component should be disabled.\r\n   * Implemented as part of ControlValueAccessor.\r\n   * @param isDisabled\r\n   */\r\n  setDisabledState(isDisabled: boolean) {\r\n    this.disabled = isDisabled;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {A11yModule} from '@angular/cdk/a11y';\r\nimport {BidiModule} from '@angular/cdk/bidi';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\r\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\r\nimport {MatSlider} from './slider';\r\n\r\n\r\n@NgModule({\r\n  imports: [CommonModule, MatCommonModule, BidiModule, A11yModule],\r\n  exports: [MatSlider, MatCommonModule],\r\n  declarations: [MatSlider],\r\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\r\n})\r\nexport class MatSliderModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  Component,\r\n  ChangeDetectionStrategy,\r\n  Input,\r\n  ElementRef,\r\n  SimpleChanges,\r\n  OnChanges,\r\n  ViewEncapsulation,\r\n  Optional,\r\n  Inject,\r\n} from '@angular/core';\r\nimport {CanColor, mixinColor} from '@angular/material/core';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\r\n\r\n/** Possible mode for a progress spinner. */\r\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\r\n\r\n/**\r\n * Base reference size of the spinner.\r\n * @docs-private\r\n */\r\nconst BASE_SIZE = 100;\r\n\r\n/**\r\n * Base reference stroke width of the spinner.\r\n * @docs-private\r\n */\r\nconst BASE_STROKE_WIDTH = 10;\r\n\r\n// Boilerplate for applying mixins to MatProgressSpinner.\r\n/** @docs-private */\r\nexport class MatProgressSpinnerBase {\r\n  constructor(public _elementRef: ElementRef) {}\r\n}\r\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\r\n\r\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\r\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\r\n// which are enough to see the flicker described in\r\n// https://github.com/angular/material2/issues/8984\r\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\r\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\r\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\r\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\r\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\r\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\r\n\r\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\r\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\r\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\r\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\r\n\r\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\r\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\r\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\r\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\r\n\r\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\r\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\r\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\r\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\r\n  }\r\n`;\r\n\r\n/**\r\n * `<mat-progress-spinner>` component.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-progress-spinner',\r\n  exportAs: 'matProgressSpinner',\r\n  host: {\r\n    'role': 'progressbar',\r\n    'class': 'mat-progress-spinner',\r\n    '[style.width.px]': '_elementSize',\r\n    '[style.height.px]': '_elementSize',\r\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\r\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\r\n    '[attr.aria-valuenow]': 'value',\r\n    '[attr.mode]': 'mode',\r\n  },\r\n  inputs: ['color'],\r\n  templateUrl: 'progress-spinner.html',\r\n  styleUrls: ['progress-spinner.css'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n})\r\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor,\r\n  OnChanges {\r\n\r\n  private _value = 0;\r\n  private _strokeWidth: number;\r\n  private _fallbackAnimation = false;\r\n\r\n  /** The width and height of the host element. Will grow with stroke width. */\r\n  _elementSize = BASE_SIZE;\r\n\r\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\r\n  private static diameters = new Set<number>([BASE_SIZE]);\r\n\r\n  /**\r\n   * Used for storing all of the generated keyframe animations.\r\n   * @dynamic\r\n   */\r\n  private static styleTag: HTMLStyleElement|null = null;\r\n\r\n  /** The diameter of the progress spinner (will set width and height of svg). */\r\n  @Input()\r\n  get diameter(): number { return this._diameter; }\r\n  set diameter(size: number) {\r\n    this._diameter = coerceNumberProperty(size);\r\n\r\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\r\n      this._attachStyleNode();\r\n    }\r\n    this._updateElementSize();\r\n  }\r\n  private _diameter = BASE_SIZE;\r\n\r\n  /** Stroke width of the progress spinner. */\r\n  @Input()\r\n  get strokeWidth(): number {\r\n    return this._strokeWidth || this.diameter / 10;\r\n  }\r\n  set strokeWidth(value: number) {\r\n    this._strokeWidth = coerceNumberProperty(value);\r\n  }\r\n\r\n\r\n  /** Mode of the progress circle */\r\n  @Input() mode: ProgressSpinnerMode = 'determinate';\r\n\r\n  /** Value of the progress circle. */\r\n  @Input()\r\n  get value(): number {\r\n    return this.mode === 'determinate' ? this._value : 0;\r\n  }\r\n  set value(newValue: number) {\r\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\r\n  }\r\n\r\n  constructor(public _elementRef: ElementRef,\r\n              platform: Platform,\r\n              @Optional() @Inject(DOCUMENT) private _document: any) {\r\n\r\n    super(_elementRef);\r\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\r\n\r\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\r\n    // reliably so we fall back to a non-spec animation.\r\n    const animationClass =\r\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\r\n\r\n    _elementRef.nativeElement.classList.add(animationClass);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.strokeWidth || changes.diameter) {\r\n      this._updateElementSize();\r\n    }\r\n  }\r\n\r\n  /** The radius of the spinner, adjusted for stroke width. */\r\n  get _circleRadius() {\r\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\r\n  }\r\n\r\n  /** The view box of the spinner's svg element. */\r\n  get _viewBox() {\r\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\r\n    return `0 0 ${viewBox} ${viewBox}`;\r\n  }\r\n\r\n  /** The stroke circumference of the svg circle. */\r\n  get _strokeCircumference(): number {\r\n    return 2 * Math.PI * this._circleRadius;\r\n  }\r\n\r\n  /** The dash offset of the svg circle. */\r\n  get _strokeDashOffset() {\r\n    if (this.mode === 'determinate') {\r\n      return this._strokeCircumference * (100 - this._value) / 100;\r\n    }\r\n\r\n    // In fallback mode set the circle to 80% and rotate it with CSS.\r\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\r\n      return this._strokeCircumference * 0.2;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /** Stroke width of the circle in percent. */\r\n  get _circleStrokeWidth() {\r\n    return this.strokeWidth / this._elementSize * 100;\r\n  }\r\n\r\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\r\n  private _attachStyleNode(): void {\r\n    let styleTag = MatProgressSpinner.styleTag;\r\n\r\n    if (!styleTag) {\r\n      styleTag = this._document.createElement('style');\r\n      this._document.head.appendChild(styleTag);\r\n      MatProgressSpinner.styleTag = styleTag;\r\n    }\r\n\r\n    if (styleTag && styleTag.sheet) {\r\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\r\n    }\r\n\r\n    MatProgressSpinner.diameters.add(this.diameter);\r\n  }\r\n\r\n  /** Generates animation styles adjusted for the spinner's diameter. */\r\n  private _getAnimationText(): string {\r\n    return INDETERMINATE_ANIMATION_TEMPLATE\r\n        // Animation should begin at 5% and end at 80%\r\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\r\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\r\n        .replace(/DIAMETER/g, `${this.diameter}`);\r\n  }\r\n\r\n  /** Updates the spinner element size based on its diameter. */\r\n  private _updateElementSize() {\r\n    this._elementSize = this._diameter + Math.max(this.strokeWidth - BASE_STROKE_WIDTH, 0);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * `<mat-spinner>` component.\r\n *\r\n * This is a component definition to be used as a convenience reference to create an\r\n * indeterminate `<mat-progress-spinner>` instance.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-spinner',\r\n  host: {\r\n    'role': 'progressbar',\r\n    'mode': 'indeterminate',\r\n    'class': 'mat-spinner mat-progress-spinner',\r\n    '[style.width.px]': '_elementSize',\r\n    '[style.height.px]': '_elementSize',\r\n  },\r\n  inputs: ['color'],\r\n  templateUrl: 'progress-spinner.html',\r\n  styleUrls: ['progress-spinner.css'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n})\r\nexport class MatSpinner extends MatProgressSpinner {\r\n  constructor(elementRef: ElementRef, platform: Platform,\r\n              @Optional() @Inject(DOCUMENT) document: any) {\r\n    super(elementRef, platform, document);\r\n    this.mode = 'indeterminate';\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {NgModule} from '@angular/core';\r\nimport {PlatformModule} from '@angular/cdk/platform';\r\nimport {MatCommonModule} from '@angular/material/core';\r\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\r\n\r\n@NgModule({\r\n  imports: [MatCommonModule, PlatformModule],\r\n  exports: [\r\n    MatProgressSpinner,\r\n    MatSpinner,\r\n    MatCommonModule\r\n  ],\r\n  declarations: [\r\n    MatProgressSpinner,\r\n    MatSpinner\r\n  ],\r\n})\r\nclass MatProgressSpinnerModule {}\r\n\r\nexport {MatProgressSpinnerModule};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\r\nimport {\r\n  AfterContentInit,\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChildren,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {\r\n  CanColor,\r\n  CanDisable,\r\n  CanDisableRipple,\r\n  HasTabIndex,\r\n  MatRipple,\r\n  mixinColor,\r\n  mixinDisabled,\r\n  mixinDisableRipple,\r\n  mixinTabIndex,\r\n  RippleRef,\r\n} from '@angular/material/core';\r\n\r\n// Increasing integer for generating unique ids for radio components.\r\nlet nextUniqueId = 0;\r\n\r\n/**\r\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\r\n * allows it to support [(ngModel)] and ngControl.\r\n * @docs-private\r\n */\r\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MatRadioGroup),\r\n  multi: true\r\n};\r\n\r\n/** Change event object emitted by MatRadio and MatRadioGroup. */\r\nexport class MatRadioChange {\r\n  constructor(\r\n    /** The MatRadioButton that emits the change event. */\r\n    public source: MatRadioButton,\r\n    /** The value of the MatRadioButton. */\r\n    public value: any) {}\r\n}\r\n\r\n\r\n// Boilerplate for applying mixins to MatRadioGroup.\r\n/** @docs-private */\r\nexport class MatRadioGroupBase { }\r\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\r\n\r\n/**\r\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\r\n */\r\n@Directive({\r\n  selector: 'mat-radio-group',\r\n  exportAs: 'matRadioGroup',\r\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\r\n  host: {\r\n    'role': 'radiogroup',\r\n    'class': 'mat-radio-group',\r\n  },\r\n  inputs: ['disabled'],\r\n})\r\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\r\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\r\n  /**\r\n   * Selected value for group. Should equal the value of the selected radio button if there *is*\r\n   * a corresponding radio button with a matching value. If there is *not* such a corresponding\r\n   * radio button, this value persists to be applied in case a new radio button is added with a\r\n   * matching value.\r\n   */\r\n  private _value: any = null;\r\n\r\n  /** The HTML name attribute applied to radio buttons in this group. */\r\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\r\n\r\n  /** The currently selected radio button. Should match value. */\r\n  private _selected: MatRadioButton | null = null;\r\n\r\n  /** Whether the `value` has been set to its initial value. */\r\n  private _isInitialized: boolean = false;\r\n\r\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\r\n  private _labelPosition: 'before' | 'after' = 'after';\r\n\r\n  /** Whether the radio group is disabled. */\r\n  private _disabled: boolean = false;\r\n\r\n  /** Whether the radio group is required. */\r\n  private _required: boolean = false;\r\n\r\n  /** The method to be called in order to update ngModel */\r\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\r\n\r\n  /**\r\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\r\n   * @docs-private\r\n   */\r\n  onTouched: () => any = () => {};\r\n\r\n  /**\r\n   * Event emitted when the group value changes.\r\n   * Change events are only emitted when the value changes due to user interaction with\r\n   * a radio button (the same behavior as `<input type-\"radio\">`).\r\n   */\r\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\r\n\r\n  /** Child radio buttons. */\r\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\r\n  _radios: QueryList<MatRadioButton>;\r\n\r\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\r\n  @Input()\r\n  get name(): string { return this._name; }\r\n  set name(value: string) {\r\n    this._name = value;\r\n    this._updateRadioButtonNames();\r\n  }\r\n\r\n  /**\r\n   * Alignment of the radio-buttons relative to their labels. Can be 'before' or 'after'.\r\n   * @deprecated\r\n   * @deletion-target 6.0.0\r\n   */\r\n  @Input()\r\n  get align(): 'start' | 'end' {\r\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\r\n    // label relative to the checkbox. As such, they are inverted.\r\n    return this.labelPosition == 'after' ? 'start' : 'end';\r\n  }\r\n  set align(v) {\r\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\r\n  }\r\n\r\n\r\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\r\n  @Input()\r\n  get labelPosition(): 'before' | 'after' {\r\n    return this._labelPosition;\r\n  }\r\n  set labelPosition(v) {\r\n    this._labelPosition = (v == 'before') ? 'before' : 'after';\r\n    this._markRadiosForCheck();\r\n  }\r\n\r\n  /** Value of the radio button. */\r\n  @Input()\r\n  get value(): any { return this._value; }\r\n  set value(newValue: any) {\r\n    if (this._value != newValue) {\r\n      // Set this before proceeding to ensure no circular loop occurs with selection.\r\n      this._value = newValue;\r\n\r\n      this._updateSelectedRadioFromValue();\r\n      this._checkSelectedRadioButton();\r\n    }\r\n  }\r\n\r\n  _checkSelectedRadioButton() {\r\n    if (this._selected && !this._selected.checked) {\r\n      this._selected.checked = true;\r\n    }\r\n  }\r\n\r\n  /** Whether the radio button is selected. */\r\n  @Input()\r\n  get selected() { return this._selected; }\r\n  set selected(selected: MatRadioButton | null) {\r\n    this._selected = selected;\r\n    this.value = selected ? selected.value : null;\r\n    this._checkSelectedRadioButton();\r\n  }\r\n\r\n  /** Whether the radio group is disabled */\r\n  @Input()\r\n  get disabled(): boolean { return this._disabled; }\r\n  set disabled(value) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n    this._markRadiosForCheck();\r\n  }\r\n\r\n  /** Whether the radio group is required */\r\n  @Input()\r\n  get required(): boolean { return this._required; }\r\n  set required(value: boolean) {\r\n    this._required = coerceBooleanProperty(value);\r\n    this._markRadiosForCheck();\r\n  }\r\n\r\n  constructor(private _changeDetector: ChangeDetectorRef) {\r\n    super();\r\n  }\r\n\r\n  /**\r\n   * Initialize properties once content children are available.\r\n   * This allows us to propagate relevant attributes to associated buttons.\r\n   */\r\n  ngAfterContentInit() {\r\n    // Mark this component as initialized in AfterContentInit because the initial value can\r\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\r\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\r\n    this._isInitialized = true;\r\n  }\r\n\r\n  /**\r\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\r\n   * radio buttons upon their blur.\r\n   */\r\n  _touch() {\r\n    if (this.onTouched) {\r\n      this.onTouched();\r\n    }\r\n  }\r\n\r\n  private _updateRadioButtonNames(): void {\r\n    if (this._radios) {\r\n      this._radios.forEach(radio => {\r\n        radio.name = this.name;\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Updates the `selected` radio button from the internal _value state. */\r\n  private _updateSelectedRadioFromValue(): void {\r\n    // If the value already matches the selected radio, do nothing.\r\n    const isAlreadySelected = this._selected != null && this._selected.value == this._value;\r\n\r\n    if (this._radios != null && !isAlreadySelected) {\r\n      this._selected = null;\r\n      this._radios.forEach(radio => {\r\n        radio.checked = this.value == radio.value;\r\n        if (radio.checked) {\r\n          this._selected = radio;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Dispatch change event with current selection and group value. */\r\n  _emitChangeEvent(): void {\r\n    if (this._isInitialized) {\r\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\r\n    }\r\n  }\r\n\r\n  _markRadiosForCheck() {\r\n    if (this._radios) {\r\n      this._radios.forEach(radio => radio._markForCheck());\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the model value. Implemented as part of ControlValueAccessor.\r\n   * @param value\r\n   */\r\n  writeValue(value: any) {\r\n    this.value = value;\r\n    this._changeDetector.markForCheck();\r\n  }\r\n\r\n  /**\r\n   * Registers a callback to be triggered when the model value changes.\r\n   * Implemented as part of ControlValueAccessor.\r\n   * @param fn Callback to be registered.\r\n   */\r\n  registerOnChange(fn: (value: any) => void) {\r\n    this._controlValueAccessorChangeFn = fn;\r\n  }\r\n\r\n  /**\r\n   * Registers a callback to be triggered when the control is touched.\r\n   * Implemented as part of ControlValueAccessor.\r\n   * @param fn Callback to be registered.\r\n   */\r\n  registerOnTouched(fn: any) {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  /**\r\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\r\n   * @param isDisabled Whether the control should be disabled.\r\n   */\r\n  setDisabledState(isDisabled: boolean) {\r\n    this.disabled = isDisabled;\r\n    this._changeDetector.markForCheck();\r\n  }\r\n}\r\n\r\n// Boilerplate for applying mixins to MatRadioButton.\r\n/** @docs-private */\r\nexport class MatRadioButtonBase {\r\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\r\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\r\n  // defined to properly work.\r\n  disabled: boolean;\r\n\r\n  constructor(public _elementRef: ElementRef) {}\r\n}\r\n// As per Material design specifications the selection control radio should use the accent color\r\n// palette by default. https://material.io/guidelines/components/selection-controls.html\r\nexport const _MatRadioButtonMixinBase =\r\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\r\n\r\n/**\r\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-radio-button',\r\n  templateUrl: 'radio.html',\r\n  styleUrls: ['radio.css'],\r\n  inputs: ['color', 'disableRipple', 'tabIndex'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  exportAs: 'matRadioButton',\r\n  host: {\r\n    'class': 'mat-radio-button',\r\n    '[class.mat-radio-checked]': 'checked',\r\n    '[class.mat-radio-disabled]': 'disabled',\r\n    '[attr.id]': 'id',\r\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\r\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\r\n    // the focus to the native element.\r\n    '(focus)': '_inputElement.nativeElement.focus()',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatRadioButton extends _MatRadioButtonMixinBase\r\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\r\n\r\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\r\n\r\n  /** The unique ID for the radio button. */\r\n  @Input() id: string = this._uniqueId;\r\n\r\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\r\n  @Input() name: string;\r\n\r\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\r\n  @Input('aria-label') ariaLabel: string;\r\n\r\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\r\n  @Input('aria-labelledby') ariaLabelledby: string;\r\n\r\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\r\n  @Input('aria-describedby') ariaDescribedby: string;\r\n\r\n  /** Whether this radio button is checked. */\r\n  @Input()\r\n  get checked(): boolean { return this._checked; }\r\n  set checked(value: boolean) {\r\n    const newCheckedState = coerceBooleanProperty(value);\r\n\r\n    if (this._checked != newCheckedState) {\r\n      this._checked = newCheckedState;\r\n\r\n      if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {\r\n        this.radioGroup.selected = this;\r\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value == this.value) {\r\n        // When unchecking the selected radio button, update the selected radio\r\n        // property on the group.\r\n        this.radioGroup.selected = null;\r\n      }\r\n\r\n      if (newCheckedState) {\r\n        // Notify all radio buttons with the same name to un-check.\r\n        this._radioDispatcher.notify(this.id, this.name);\r\n      }\r\n      this._changeDetector.markForCheck();\r\n    }\r\n  }\r\n\r\n  /** The value of this radio button. */\r\n  @Input()\r\n  get value(): any { return this._value; }\r\n  set value(value: any) {\r\n    if (this._value != value) {\r\n      this._value = value;\r\n      if (this.radioGroup != null) {\r\n        if (!this.checked) {\r\n          // Update checked when the value changed to match the radio group's value\r\n          this.checked = this.radioGroup.value == value;\r\n        }\r\n        if (this.checked) {\r\n          this.radioGroup.selected = this;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Whether or not the radio-button should appear before or after the label.\r\n   * @deprecated\r\n   * @deletion-target 6.0.0\r\n   */\r\n  @Input()\r\n  get align(): 'start' | 'end' {\r\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\r\n    // label relative to the checkbox. As such, they are inverted.\r\n    return this.labelPosition == 'after' ? 'start' : 'end';\r\n  }\r\n  set align(v) {\r\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\r\n  }\r\n\r\n  private _labelPosition: 'before' | 'after';\r\n\r\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\r\n  @Input()\r\n  get labelPosition(): 'before' | 'after' {\r\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\r\n  }\r\n  set labelPosition(value) {\r\n    this._labelPosition = value;\r\n  }\r\n\r\n  /** Whether the radio button is disabled. */\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\r\n  }\r\n  set disabled(value: boolean) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n  }\r\n\r\n  /** Whether the radio button is required. */\r\n  @Input()\r\n  get required(): boolean {\r\n    return this._required || (this.radioGroup && this.radioGroup.required);\r\n  }\r\n  set required(value: boolean) {\r\n    this._required = coerceBooleanProperty(value);\r\n  }\r\n\r\n  /**\r\n   * Event emitted when the checked state of this radio button changes.\r\n   * Change events are only emitted when the value changes due to user interaction with\r\n   * the radio button (the same behavior as `<input type-\"radio\">`).\r\n   */\r\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\r\n\r\n  /** The parent radio group. May or may not be present. */\r\n  radioGroup: MatRadioGroup;\r\n\r\n  /** ID of the native input element inside `<mat-radio-button>` */\r\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\r\n\r\n  /** Whether this radio is checked. */\r\n  private _checked: boolean = false;\r\n\r\n  /** Whether this radio is disabled. */\r\n  private _disabled: boolean;\r\n\r\n  /** Whether this radio is required. */\r\n  private _required: boolean;\r\n\r\n  /** Value assigned to this radio. */\r\n  private _value: any = null;\r\n\r\n  /** The child ripple instance. */\r\n  @ViewChild(MatRipple) _ripple: MatRipple;\r\n\r\n  /** Reference to the current focus ripple. */\r\n  private _focusRipple: RippleRef | null;\r\n\r\n  /** Unregister function for _radioDispatcher */\r\n  private _removeUniqueSelectionListener: () => void = () => {};\r\n\r\n  /** The native `<input type=radio>` element */\r\n  @ViewChild('input') _inputElement: ElementRef;\r\n\r\n  constructor(@Optional() radioGroup: MatRadioGroup,\r\n              elementRef: ElementRef,\r\n              private _changeDetector: ChangeDetectorRef,\r\n              private _focusMonitor: FocusMonitor,\r\n              private _radioDispatcher: UniqueSelectionDispatcher) {\r\n    super(elementRef);\r\n\r\n    // Assertions. Ideally these should be stripped out by the compiler.\r\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\r\n    this.radioGroup = radioGroup;\r\n\r\n    this._removeUniqueSelectionListener =\r\n      _radioDispatcher.listen((id: string, name: string) => {\r\n        if (id != this.id && name == this.name) {\r\n          this.checked = false;\r\n        }\r\n      });\r\n  }\r\n\r\n  /** Focuses the radio button. */\r\n  focus(): void {\r\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\r\n  }\r\n\r\n  /**\r\n   * Marks the radio button as needing checking for change detection.\r\n   * This method is exposed because the parent radio group will directly\r\n   * update bound properties of the radio button.\r\n   */\r\n  _markForCheck() {\r\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\r\n    // update radio button's status\r\n    this._changeDetector.markForCheck();\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this.radioGroup) {\r\n      // If the radio is inside a radio group, determine if it should be checked\r\n      this.checked = this.radioGroup.value === this._value;\r\n      // Copy name from parent radio group\r\n      this.name = this.radioGroup.name;\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this._focusMonitor\r\n      .monitor(this._inputElement.nativeElement)\r\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\r\n    this._removeUniqueSelectionListener();\r\n  }\r\n\r\n  /** Dispatch change event with current value. */\r\n  private _emitChangeEvent(): void {\r\n    this.change.emit(new MatRadioChange(this, this._value));\r\n  }\r\n\r\n  _isRippleDisabled() {\r\n    return this.disableRipple || this.disabled;\r\n  }\r\n\r\n  _onInputClick(event: Event) {\r\n    // We have to stop propagation for click events on the visual hidden input element.\r\n    // By default, when a user clicks on a label element, a generated click event will be\r\n    // dispatched on the associated input element. Since we are using a label element as our\r\n    // root container, the click event on the `radio-button` will be executed twice.\r\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\r\n    // This will lead to multiple click events.\r\n    // Preventing bubbling for the second event will solve that issue.\r\n    event.stopPropagation();\r\n  }\r\n\r\n  /**\r\n   * Triggered when the radio button received a click or the input recognized any change.\r\n   * Clicking on a label element, will trigger a change event on the associated input.\r\n   */\r\n  _onInputChange(event: Event) {\r\n    // We always have to stop propagation on the change event.\r\n    // Otherwise the change event, from the input element, will bubble up and\r\n    // emit its event object to the `change` output.\r\n    event.stopPropagation();\r\n\r\n    const groupValueChanged = this.radioGroup && this.value != this.radioGroup.value;\r\n    this.checked = true;\r\n    this._emitChangeEvent();\r\n\r\n    if (this.radioGroup) {\r\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\r\n      this.radioGroup._touch();\r\n      if (groupValueChanged) {\r\n        this.radioGroup._emitChangeEvent();\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Function is called whenever the focus changes for the input element. */\r\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\r\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\r\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\r\n    } else if (!focusOrigin) {\r\n      if (this.radioGroup) {\r\n        this.radioGroup._touch();\r\n      }\r\n\r\n      if (this._focusRipple) {\r\n        this._focusRipple.fadeOut();\r\n        this._focusRipple = null;\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {A11yModule} from '@angular/cdk/a11y';\r\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\r\nimport {MatRadioButton, MatRadioGroup} from './radio';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, MatRippleModule, MatCommonModule, A11yModule],\r\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\r\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER],\r\n  declarations: [MatRadioGroup, MatRadioButton],\r\n})\r\nexport class MatRadioModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {\r\n  animate,\r\n  state,\r\n  style,\r\n  transition,\r\n  trigger,\r\n  AnimationTriggerMetadata,\r\n} from '@angular/animations';\r\n\r\n/** Animations used by the Material drawers. */\r\nexport const matDrawerAnimations: {\r\n  readonly transformDrawer: AnimationTriggerMetadata;\r\n} = {\r\n  /** Animation that slides a drawer in and out. */\r\n  transformDrawer: trigger('transform', [\r\n    state('open, open-instant', style({\r\n      transform: 'translate3d(0, 0, 0)',\r\n      visibility: 'visible',\r\n    })),\r\n    state('void', style({\r\n      visibility: 'hidden',\r\n    })),\r\n    transition('void => open-instant', animate('0ms')),\r\n    transition('void <=> open, open-instant => void',\r\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\r\n  ])\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {AnimationEvent} from '@angular/animations';\r\nimport {FocusTrap, FocusTrapFactory, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {ESCAPE} from '@angular/cdk/keycodes';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {\r\n  AfterContentChecked,\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Inject,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  ViewEncapsulation,\r\n  InjectionToken,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {merge} from 'rxjs/observable/merge';\r\nimport {filter} from 'rxjs/operators/filter';\r\nimport {take} from 'rxjs/operators/take';\r\nimport {startWith} from 'rxjs/operators/startWith';\r\nimport {takeUntil} from 'rxjs/operators/takeUntil';\r\nimport {debounceTime} from 'rxjs/operators/debounceTime';\r\nimport {map} from 'rxjs/operators/map';\r\nimport {fromEvent} from 'rxjs/observable/fromEvent';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {matDrawerAnimations} from './drawer-animations';\r\nimport {CdkScrollable} from '@angular/cdk/scrolling';\r\n\r\n\r\n/** Throws an exception when two MatDrawer are matching the same position. */\r\nexport function throwMatDuplicatedDrawerError(position: string) {\r\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\r\n}\r\n\r\n\r\n/**\r\n * Drawer toggle promise result.\r\n * @deprecated\r\n * @deletion-target 6.0.0\r\n */\r\nexport class MatDrawerToggleResult {\r\n  constructor(\r\n    /** Whether the drawer is opened or closed. */\r\n    public type: 'open' | 'close',\r\n    /** Whether the drawer animation is finished. */\r\n    public animationFinished: boolean) {}\r\n}\r\n\r\n/** Configures whether drawers should use auto sizing by default. */\r\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\r\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE');\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-drawer-content',\r\n  template: '<ng-content></ng-content>',\r\n  host: {\r\n    'class': 'mat-drawer-content',\r\n    '[style.margin-left.px]': '_margins.left',\r\n    '[style.margin-right.px]': '_margins.right',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n})\r\nexport class MatDrawerContent implements AfterContentInit {\r\n  /**\r\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\r\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\r\n   * fixed position elements inside of the transformed element.\r\n   */\r\n  _margins: {left: number|null, right: number|null} = {left: null, right: null};\r\n\r\n  constructor(\r\n      private _changeDetectorRef: ChangeDetectorRef,\r\n      @Inject(forwardRef(() => MatDrawerContainer)) private _container: MatDrawerContainer) {\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._container._contentMargins.subscribe(margins => {\r\n      this._margins = margins;\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * This component corresponds to a drawer that can be opened on the drawer container.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-drawer',\r\n  exportAs: 'matDrawer',\r\n  template: '<ng-content></ng-content>',\r\n  animations: [matDrawerAnimations.transformDrawer],\r\n  host: {\r\n    'class': 'mat-drawer',\r\n    '[@transform]': '_animationState',\r\n    '(@transform.start)': '_onAnimationStart($event)',\r\n    '(@transform.done)': '_onAnimationEnd($event)',\r\n    // must prevent the browser from aligning text based on value\r\n    '[attr.align]': 'null',\r\n    '[class.mat-drawer-end]': 'position === \"end\"',\r\n    '[class.mat-drawer-over]': 'mode === \"over\"',\r\n    '[class.mat-drawer-push]': 'mode === \"push\"',\r\n    '[class.mat-drawer-side]': 'mode === \"side\"',\r\n    'tabIndex': '-1',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n})\r\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\r\n  private _focusTrap: FocusTrap;\r\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\r\n\r\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\r\n  private _enableAnimations = false;\r\n\r\n  /** The side that the drawer is attached to. */\r\n  @Input()\r\n  get position(): 'start' | 'end' { return this._position; }\r\n  set position(value: 'start' | 'end') {\r\n    // Make sure we have a valid value.\r\n    value = value === 'end' ? 'end' : 'start';\r\n    if (value != this._position) {\r\n      this._position = value;\r\n      this.onAlignChanged.emit();\r\n      this.onPositionChanged.emit();\r\n    }\r\n  }\r\n  private _position: 'start' | 'end' = 'start';\r\n\r\n  /**\r\n   * @deprecated\r\n   * @deletion-target 6.0.0\r\n   */\r\n  @Input()\r\n  get align(): 'start' | 'end' { return this.position; }\r\n  set align(value: 'start' | 'end') { this.position = value; }\r\n\r\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\r\n  @Input()\r\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\r\n  set mode(value: 'over' | 'push' | 'side') {\r\n    this._mode = value;\r\n    this._modeChanged.next();\r\n  }\r\n  private _mode: 'over' | 'push' | 'side' = 'over';\r\n\r\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\r\n  @Input()\r\n  get disableClose(): boolean { return this._disableClose; }\r\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\r\n  private _disableClose: boolean = false;\r\n\r\n  /** How the sidenav was opened (keypress, mouse click etc.) */\r\n  private _openedVia: FocusOrigin | null;\r\n\r\n  /** Emits whenever the drawer has started animating. */\r\n  _animationStarted = new EventEmitter<AnimationEvent>();\r\n\r\n  /** Current state of the sidenav animation. */\r\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\r\n\r\n  /** Event emitted when the drawer open state is changed. */\r\n  @Output() readonly openedChange: EventEmitter<boolean> =\r\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\r\n      new EventEmitter<boolean>(/* isAsync */true);\r\n\r\n  /** Event emitted when the drawer has been opened. */\r\n  @Output('opened')\r\n  get _openedStream(): Observable<void> {\r\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\r\n  }\r\n\r\n  /** Event emitted when the drawer has started opening. */\r\n  @Output()\r\n  get openedStart(): Observable<void> {\r\n    return this._animationStarted.pipe(\r\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\r\n      map(() => {})\r\n    );\r\n  }\r\n\r\n  /** Event emitted when the drawer has been closed. */\r\n  @Output('closed')\r\n  get _closedStream(): Observable<void> {\r\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\r\n  }\r\n\r\n  /** Event emitted when the drawer has started closing. */\r\n  @Output()\r\n  get closedStart(): Observable<void> {\r\n    return this._animationStarted.pipe(\r\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\r\n      map(() => {})\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Event emitted when the drawer is fully opened.\r\n   * @deprecated Use `opened` instead.\r\n   * @deletion-target 6.0.0\r\n   */\r\n  @Output('open') readonly onOpen: Observable<void> = this._openedStream;\r\n\r\n  /**\r\n   * Event emitted when the drawer is fully closed.\r\n   * @deprecated Use `closed` instead.\r\n   * @deletion-target 6.0.0\r\n   */\r\n  @Output('close') readonly onClose: Observable<void> = this._closedStream;\r\n\r\n  /** Event emitted when the drawer's position changes. */\r\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /**\r\n   * @deprecated\r\n   * @deletion-target 6.0.0\r\n   */\r\n  @Output('align-changed') onAlignChanged: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /**\r\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\r\n   * to know when to when the mode changes so it can adapt the margins on the content.\r\n   */\r\n  readonly _modeChanged = new Subject();\r\n\r\n  get _isFocusTrapEnabled(): boolean {\r\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\r\n    return this.opened && this.mode !== 'side';\r\n  }\r\n\r\n  constructor(private _elementRef: ElementRef,\r\n              private _focusTrapFactory: FocusTrapFactory,\r\n              private _focusMonitor: FocusMonitor,\r\n              private _platform: Platform,\r\n              private _ngZone: NgZone,\r\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\r\n\r\n    this.openedChange.subscribe((opened: boolean) => {\r\n      if (opened) {\r\n        if (this._doc) {\r\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\r\n        }\r\n\r\n        if (this._isFocusTrapEnabled && this._focusTrap) {\r\n          this._trapFocus();\r\n        }\r\n      } else {\r\n        this._restoreFocus();\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Listen to `keydown` events outside the zone so that change detection is not run every\r\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\r\n     * and we don't have close disabled.\r\n     */\r\n    this._ngZone.runOutsideAngular(() => {\r\n        fromEvent(this._elementRef.nativeElement, 'keydown').pipe(\r\n            filter((event: KeyboardEvent) => event.keyCode === ESCAPE && !this.disableClose)\r\n        ).subscribe((event) => this._ngZone.run(() => {\r\n            this.close();\r\n            event.stopPropagation();\r\n        }));\r\n    });\r\n  }\r\n\r\n  /** Traps focus inside the drawer. */\r\n  private _trapFocus() {\r\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\r\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\r\n      // still works. We need to check that `focus` is a function due to Universal.\r\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\r\n        this._elementRef.nativeElement.focus();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\r\n   * opened.\r\n   */\r\n  private _restoreFocus() {\r\n    const activeEl = this._doc && this._doc.activeElement;\r\n\r\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\r\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\r\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\r\n      } else {\r\n        this._elementRef.nativeElement.blur();\r\n      }\r\n    }\r\n\r\n    this._elementFocusedBeforeDrawerWasOpened = null;\r\n    this._openedVia = null;\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\r\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\r\n  }\r\n\r\n  ngAfterContentChecked() {\r\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\r\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\r\n    // animations, because we don't want the drawer to animate the first time the user sees\r\n    // the page.\r\n    if (this._platform.isBrowser) {\r\n      this._enableAnimations = true;\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this._focusTrap) {\r\n      this._focusTrap.destroy();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Whether the drawer is opened. We overload this because we trigger an event when it\r\n   * starts or end.\r\n   */\r\n  @Input()\r\n  get opened(): boolean { return this._opened; }\r\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\r\n  private _opened: boolean = false;\r\n\r\n  /**\r\n   * Open the drawer.\r\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\r\n   * Used for focus management after the sidenav is closed.\r\n   */\r\n  open(openedVia?: FocusOrigin): Promise<void> {\r\n    return this.toggle(true, openedVia);\r\n  }\r\n\r\n  /** Close the drawer. */\r\n  close(): Promise<void> {\r\n    return this.toggle(false);\r\n  }\r\n\r\n  /**\r\n   * Toggle this drawer.\r\n   * @param isOpen Whether the drawer should be open.\r\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\r\n   * Used for focus management after the sidenav is closed.\r\n   */\r\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\r\n    Promise<void> {\r\n\r\n    this._opened = isOpen;\r\n\r\n    if (isOpen) {\r\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\r\n      this._openedVia = openedVia;\r\n    } else {\r\n      this._animationState = 'void';\r\n      this._restoreFocus();\r\n    }\r\n\r\n    if (this._focusTrap) {\r\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\r\n    }\r\n\r\n    // TODO(crisbeto): This promise is here for backwards-compatibility.\r\n    // It should be removed next time we do breaking changes in the drawer.\r\n    // @deletion-target 6.0.0\r\n    return new Promise<any>(resolve => {\r\n      this.openedChange.pipe(take(1)).subscribe(open => {\r\n        resolve(new MatDrawerToggleResult(open ? 'open' : 'close', true));\r\n      });\r\n    });\r\n  }\r\n\r\n  _onAnimationStart(event: AnimationEvent) {\r\n    this._animationStarted.emit(event);\r\n  }\r\n\r\n  _onAnimationEnd(event: AnimationEvent) {\r\n    const {fromState, toState} = event;\r\n\r\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\r\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\r\n      this.openedChange.emit(this._opened);\r\n    }\r\n  }\r\n\r\n  get _width(): number {\r\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * `<mat-drawer-container>` component.\r\n *\r\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\r\n * and coordinates the backdrop and content styling.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-drawer-container',\r\n  exportAs: 'matDrawerContainer',\r\n  templateUrl: 'drawer-container.html',\r\n  styleUrls: ['drawer.css'],\r\n  host: {\r\n    'class': 'mat-drawer-container',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n})\r\nexport class MatDrawerContainer implements AfterContentInit, OnDestroy {\r\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\r\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\r\n\r\n  /** The drawer child with the `start` position. */\r\n  get start(): MatDrawer | null { return this._start; }\r\n\r\n  /** The drawer child with the `end` position. */\r\n  get end(): MatDrawer | null { return this._end; }\r\n\r\n  /**\r\n   * Whether to automatically resize the container whenever\r\n   * the size of any of its drawers changes.\r\n   *\r\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\r\n   * the drawers on every change detection cycle. Can be configured globally via the\r\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\r\n   */\r\n  @Input()\r\n  get autosize(): boolean { return this._autosize; }\r\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\r\n  private _autosize: boolean;\r\n\r\n  /** Event emitted when the drawer backdrop is clicked. */\r\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /** The drawer at the start/end position, independent of direction. */\r\n  private _start: MatDrawer | null;\r\n  private _end: MatDrawer | null;\r\n\r\n  /**\r\n   * The drawer at the left/right. When direction changes, these will change as well.\r\n   * They're used as aliases for the above to set the left/right style properly.\r\n   * In LTR, _left == _start and _right == _end.\r\n   * In RTL, _left == _end and _right == _start.\r\n   */\r\n  private _left: MatDrawer | null;\r\n  private _right: MatDrawer | null;\r\n\r\n  /** Emits when the component is destroyed. */\r\n  private readonly _destroyed = new Subject<void>();\r\n\r\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\r\n  private readonly _doCheckSubject = new Subject<void>();\r\n\r\n  readonly _contentMargins = new Subject<{left: number|null, right: number|null}>();\r\n\r\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\r\n  @ViewChild(CdkScrollable) scrollable: CdkScrollable;\r\n\r\n  constructor(@Optional() private _dir: Directionality,\r\n              private _element: ElementRef,\r\n              private _ngZone: NgZone,\r\n              private _changeDetectorRef: ChangeDetectorRef,\r\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false) {\r\n\r\n    // If a `Dir` directive exists up the tree, listen direction changes\r\n    // and update the left/right properties to point to the proper start/end.\r\n    if (_dir) {\r\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\r\n        this._validateDrawers();\r\n        this._updateContentMargins();\r\n      });\r\n    }\r\n\r\n    this._autosize = defaultAutosize;\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\r\n      this._validateDrawers();\r\n\r\n      this._drawers.forEach((drawer: MatDrawer) => {\r\n        this._watchDrawerToggle(drawer);\r\n        this._watchDrawerPosition(drawer);\r\n        this._watchDrawerMode(drawer);\r\n      });\r\n\r\n      if (!this._drawers.length ||\r\n          this._isDrawerOpen(this._start) ||\r\n          this._isDrawerOpen(this._end)) {\r\n        this._updateContentMargins();\r\n      }\r\n\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n\r\n    this._doCheckSubject.pipe(\r\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\r\n      takeUntil(this._destroyed)\r\n    ).subscribe(() => this._updateContentMargins());\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._doCheckSubject.complete();\r\n    this._destroyed.next();\r\n    this._destroyed.complete();\r\n  }\r\n\r\n  /** Calls `open` of both start and end drawers */\r\n  open(): void {\r\n    this._drawers.forEach(drawer => drawer.open());\r\n  }\r\n\r\n  /** Calls `close` of both start and end drawers */\r\n  close(): void {\r\n    this._drawers.forEach(drawer => drawer.close());\r\n  }\r\n\r\n  ngDoCheck() {\r\n    // If users opted into autosizing, do a check every change detection cycle.\r\n    if (this._autosize && this._isPushed()) {\r\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\r\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Subscribes to drawer events in order to set a class on the main container element when the\r\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\r\n   * is properly hidden.\r\n   */\r\n  private _watchDrawerToggle(drawer: MatDrawer): void {\r\n    drawer._animationStarted.pipe(\r\n      takeUntil(this._drawers.changes),\r\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\r\n    )\r\n    .subscribe((event: AnimationEvent) => {\r\n      // Set the transition class on the container so that the animations occur. This should not\r\n      // be set initially because animations should only be triggered via a change in state.\r\n      if (event.toState !== 'open-instant') {\r\n        this._element.nativeElement.classList.add('mat-drawer-transition');\r\n      }\r\n\r\n      this._updateContentMargins();\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n\r\n    if (drawer.mode !== 'side') {\r\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\r\n          this._setContainerClass(drawer.opened));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Subscribes to drawer onPositionChanged event in order to\r\n   * re-validate drawers when the position changes.\r\n   */\r\n  private _watchDrawerPosition(drawer: MatDrawer): void {\r\n    if (!drawer) {\r\n      return;\r\n    }\r\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\r\n    // since both drawers may be swapping positions at the same time.\r\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\r\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\r\n        this._validateDrawers();\r\n      });\r\n    });\r\n  }\r\n\r\n  /** Subscribes to changes in drawer mode so we can run change detection. */\r\n  private _watchDrawerMode(drawer: MatDrawer): void {\r\n    if (drawer) {\r\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\r\n        .subscribe(() => {\r\n          this._updateContentMargins();\r\n          this._changeDetectorRef.markForCheck();\r\n        });\r\n    }\r\n  }\r\n\r\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\r\n  private _setContainerClass(isAdd: boolean): void {\r\n    if (isAdd) {\r\n      this._element.nativeElement.classList.add('mat-drawer-opened');\r\n    } else {\r\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\r\n    }\r\n  }\r\n\r\n  /** Validate the state of the drawer children components. */\r\n  private _validateDrawers() {\r\n    this._start = this._end = null;\r\n\r\n    // Ensure that we have at most one start and one end drawer.\r\n    this._drawers.forEach(drawer => {\r\n      if (drawer.position == 'end') {\r\n        if (this._end != null) {\r\n          throwMatDuplicatedDrawerError('end');\r\n        }\r\n        this._end = drawer;\r\n      } else {\r\n        if (this._start != null) {\r\n          throwMatDuplicatedDrawerError('start');\r\n        }\r\n        this._start = drawer;\r\n      }\r\n    });\r\n\r\n    this._right = this._left = null;\r\n\r\n    // Detect if we're LTR or RTL.\r\n    if (!this._dir || this._dir.value == 'ltr') {\r\n      this._left = this._start;\r\n      this._right = this._end;\r\n    } else {\r\n      this._left = this._end;\r\n      this._right = this._start;\r\n    }\r\n  }\r\n\r\n  /** Whether the container is being pushed to the side by one of the drawers. */\r\n  private _isPushed() {\r\n    return (this._isDrawerOpen(this._start) && this._start!.mode != 'over') ||\r\n           (this._isDrawerOpen(this._end) && this._end!.mode != 'over');\r\n  }\r\n\r\n  _onBackdropClicked() {\r\n    this.backdropClick.emit();\r\n    this._closeModalDrawer();\r\n  }\r\n\r\n  _closeModalDrawer() {\r\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\r\n    [this._start, this._end]\r\n      .filter(drawer => drawer && !drawer.disableClose && drawer.mode !== 'side')\r\n      .forEach(drawer => drawer!.close());\r\n  }\r\n\r\n  _isShowingBackdrop(): boolean {\r\n    return (this._isDrawerOpen(this._start) && this._start!.mode != 'side')\r\n        || (this._isDrawerOpen(this._end) && this._end!.mode != 'side');\r\n  }\r\n\r\n  private _isDrawerOpen(drawer: MatDrawer | null): boolean {\r\n    return drawer != null && drawer.opened;\r\n  }\r\n\r\n  /**\r\n   * Recalculates and updates the inline styles for the content. Note that this should be used\r\n   * sparingly, because it causes a reflow.\r\n   */\r\n  private _updateContentMargins() {\r\n    // 1. For drawers in `over` mode, they don't affect the content.\r\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\r\n    //    left margin (for left drawer) or right margin (for right the drawer).\r\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\r\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\r\n    //    margin from the other side.\r\n\r\n    let left = 0;\r\n    let right = 0;\r\n\r\n    if (this._left && this._left.opened) {\r\n      if (this._left.mode == 'side') {\r\n        left += this._left._width;\r\n      } else if (this._left.mode == 'push') {\r\n        let width = this._left._width;\r\n        left += width;\r\n        right -= width;\r\n      }\r\n    }\r\n\r\n    if (this._right && this._right.opened) {\r\n      if (this._right.mode == 'side') {\r\n        right += this._right._width;\r\n      } else if (this._right.mode == 'push') {\r\n        let width = this._right._width;\r\n        right += width;\r\n        left -= width;\r\n      }\r\n    }\r\n\r\n    // Pull back into the NgZone since in some cases we could be outside.\r\n    this._ngZone.run(() => this._contentMargins.next({left, right}));\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {A11yModule, ARIA_DESCRIBER_PROVIDER} from '@angular/cdk/a11y';\r\nimport {OverlayModule} from '@angular/cdk/overlay';\r\nimport {PlatformModule} from '@angular/cdk/platform';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {MatCommonModule} from '@angular/material/core';\r\nimport {LayoutModule} from '@angular/cdk/layout';\r\nimport {\r\n  MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\r\n  MAT_TOOLTIP_DEFAULT_OPTIONS,\r\n  MatTooltip,\r\n  TooltipComponent,\r\n} from './tooltip';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    OverlayModule,\r\n    MatCommonModule,\r\n    PlatformModule,\r\n    A11yModule,\r\n    LayoutModule,\r\n  ],\r\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\r\n  declarations: [MatTooltip, TooltipComponent],\r\n  entryComponents: [TooltipComponent],\r\n  providers: [\r\n    MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\r\n    ARIA_DESCRIBER_PROVIDER,\r\n    {\r\n      provide: MAT_TOOLTIP_DEFAULT_OPTIONS,\r\n      useValue: {\r\n        showDelay: 0,\r\n        hideDelay: 0,\r\n        touchendHideDelay: 1500\r\n      }\r\n    }\r\n  ],\r\n})\r\nexport class MatTooltipModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Injectable, SkipSelf, Optional } from '@angular/core';\r\nimport {Subject} from 'rxjs/Subject';\r\n\r\n/**\r\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\r\n * include it in a custom provider\r\n */\r\n@Injectable()\r\nexport class MatPaginatorIntl {\r\n  /**\r\n   * Stream that emits whenever the labels here are changed. Use this to notify\r\n   * components if the labels have changed after initialization.\r\n   */\r\n  readonly changes: Subject<void> = new Subject<void>();\r\n\r\n  /** A label for the page size selector. */\r\n  itemsPerPageLabel: string = 'Items per page:';\r\n\r\n  /** A label for the button that increments the current page. */\r\n  nextPageLabel: string = 'Next page';\r\n\r\n  /** A label for the button that decrements the current page. */\r\n  previousPageLabel: string = 'Previous page';\r\n\r\n  /** A label for the button that moves to the first page. */\r\n  firstPageLabel: string = 'First page';\r\n\r\n  /** A label for the button that moves to the last page. */\r\n  lastPageLabel: string = 'Last page';\r\n\r\n  /** A label for the range of items within the current page and the length of the whole list. */\r\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\r\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\r\n\r\n    length = Math.max(length, 0);\r\n\r\n    const startIndex = page * pageSize;\r\n\r\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\r\n    const endIndex = startIndex < length ?\r\n        Math.min(startIndex + pageSize, length) :\r\n        startIndex + pageSize;\r\n\r\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\r\n  }\r\n}\r\n\r\n/** @docs-private */\r\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\r\n  return parentIntl || new MatPaginatorIntl();\r\n}\r\n\r\n/** @docs-private */\r\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\r\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\r\n  provide: MatPaginatorIntl,\r\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\r\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {MatPaginatorIntl} from './paginator-intl';\r\n\r\n/** The default page size if there is no page size and there are no provided page size options. */\r\nconst DEFAULT_PAGE_SIZE = 50;\r\n\r\n/**\r\n * Change event object that is emitted when the user selects a\r\n * different page size or navigates to another page.\r\n */\r\nexport class PageEvent {\r\n  /** The current page index. */\r\n  pageIndex: number;\r\n\r\n  /** The current page size */\r\n  pageSize: number;\r\n\r\n  /** The current total number of items being paged */\r\n  length: number;\r\n}\r\n\r\n/**\r\n * Component to provide navigation between paged information. Displays the size of the current\r\n * page, user-selectable options to change that size, what items are being shown, and\r\n * navigational button to go to the previous or next page.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-paginator',\r\n  exportAs: 'matPaginator',\r\n  templateUrl: 'paginator.html',\r\n  styleUrls: ['paginator.css'],\r\n  host: {\r\n    'class': 'mat-paginator',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n})\r\nexport class MatPaginator implements OnInit, OnDestroy {\r\n  private _initialized: boolean;\r\n  private _intlChanges: Subscription;\r\n\r\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\r\n  @Input()\r\n  get pageIndex(): number { return this._pageIndex; }\r\n  set pageIndex(value: number) {\r\n    this._pageIndex = coerceNumberProperty(value);\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n  _pageIndex: number = 0;\r\n\r\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\r\n  @Input()\r\n  get length(): number { return this._length; }\r\n  set length(value: number) {\r\n    this._length = coerceNumberProperty(value);\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n  _length: number = 0;\r\n\r\n  /** Number of items to display on a page. By default set to 50. */\r\n  @Input()\r\n  get pageSize(): number { return this._pageSize; }\r\n  set pageSize(value: number) {\r\n    this._pageSize = coerceNumberProperty(value);\r\n    this._updateDisplayedPageSizeOptions();\r\n  }\r\n  private _pageSize: number;\r\n\r\n  /** The set of provided page size options to display to the user. */\r\n  @Input()\r\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\r\n  set pageSizeOptions(value: number[]) {\r\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\r\n    this._updateDisplayedPageSizeOptions();\r\n  }\r\n  private _pageSizeOptions: number[] = [];\r\n\r\n  /** Whether to hide the page size selection UI from the user. */\r\n  @Input()\r\n  get hidePageSize(): boolean { return this._hidePageSize; }\r\n  set hidePageSize(value: boolean) {\r\n    this._hidePageSize = coerceBooleanProperty(value);\r\n  }\r\n  private _hidePageSize = false;\r\n\r\n\r\n  /** Whether to show the first/last buttons UI to the user. */\r\n  @Input()\r\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\r\n  set showFirstLastButtons(value: boolean) {\r\n    this._showFirstLastButtons = coerceBooleanProperty(value);\r\n  }\r\n  private _showFirstLastButtons = false;\r\n\r\n  /** Event emitted when the paginator changes the page size or page index. */\r\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\r\n\r\n  /** Displayed set of page size options. Will be sorted and include current page size. */\r\n  _displayedPageSizeOptions: number[];\r\n\r\n  constructor(public _intl: MatPaginatorIntl,\r\n              private _changeDetectorRef: ChangeDetectorRef) {\r\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\r\n  }\r\n\r\n  ngOnInit() {\r\n    this._initialized = true;\r\n    this._updateDisplayedPageSizeOptions();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._intlChanges.unsubscribe();\r\n  }\r\n\r\n  /** Advances to the next page if it exists. */\r\n  nextPage(): void {\r\n    if (!this.hasNextPage()) { return; }\r\n    this.pageIndex++;\r\n    this._emitPageEvent();\r\n  }\r\n\r\n  /** Move back to the previous page if it exists. */\r\n  previousPage(): void {\r\n    if (!this.hasPreviousPage()) { return; }\r\n    this.pageIndex--;\r\n    this._emitPageEvent();\r\n  }\r\n\r\n  /** Move to the first page if not already there. */\r\n  firstPage(): void {\r\n    // hasPreviousPage being false implies at the start\r\n    if (!this.hasPreviousPage()) { return; }\r\n    this.pageIndex = 0;\r\n    this._emitPageEvent();\r\n  }\r\n\r\n  /** Move to the last page if not already there. */\r\n  lastPage(): void {\r\n    // hasNextPage being false implies at the end\r\n    if (!this.hasNextPage()) { return; }\r\n    this.pageIndex = this.getNumberOfPages();\r\n    this._emitPageEvent();\r\n  }\r\n\r\n  /** Whether there is a previous page. */\r\n  hasPreviousPage(): boolean {\r\n    return this.pageIndex >= 1 && this.pageSize != 0;\r\n  }\r\n\r\n  /** Whether there is a next page. */\r\n  hasNextPage(): boolean {\r\n    const numberOfPages = this.getNumberOfPages();\r\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\r\n  }\r\n\r\n  /** Calculate the number of pages */\r\n  getNumberOfPages(): number {\r\n    return Math.ceil(this.length / this.pageSize) - 1;\r\n  }\r\n\r\n\r\n  /**\r\n   * Changes the page size so that the first item displayed on the page will still be\r\n   * displayed using the new page size.\r\n   *\r\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\r\n   * switching so that the page size is 5 will set the third page as the current page so\r\n   * that the 10th item will still be displayed.\r\n   */\r\n  _changePageSize(pageSize: number) {\r\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\r\n    // containing the previous page's first item.\r\n    const startIndex = this.pageIndex * this.pageSize;\r\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\r\n\r\n    this.pageSize = pageSize;\r\n    this._emitPageEvent();\r\n  }\r\n\r\n  /**\r\n   * Updates the list of page size options to display to the user. Includes making sure that\r\n   * the page size is an option and that the list is sorted.\r\n   */\r\n  private _updateDisplayedPageSizeOptions() {\r\n    if (!this._initialized) { return; }\r\n\r\n    // If no page size is provided, use the first page size option or the default page size.\r\n    if (!this.pageSize) {\r\n      this._pageSize = this.pageSizeOptions.length != 0 ?\r\n          this.pageSizeOptions[0] :\r\n          DEFAULT_PAGE_SIZE;\r\n    }\r\n\r\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\r\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) == -1) {\r\n      this._displayedPageSizeOptions.push(this.pageSize);\r\n    }\r\n\r\n    // Sort the numbers using a number-specific sort function.\r\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\r\n\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\r\n  private _emitPageEvent() {\r\n    this.page.emit({\r\n      pageIndex: this.pageIndex,\r\n      pageSize: this.pageSize,\r\n      length: this.length\r\n    });\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {MatButtonModule} from '@angular/material/button';\r\nimport {MatSelectModule} from '@angular/material/select';\r\nimport {MatTooltipModule} from '@angular/material/tooltip';\r\nimport {MatPaginator} from './paginator';\r\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatButtonModule,\r\n    MatSelectModule,\r\n    MatTooltipModule,\r\n  ],\r\n  exports: [MatPaginator],\r\n  declarations: [MatPaginator],\r\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\r\n})\r\nexport class MatPaginatorModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {\r\n  Component,\r\n  ChangeDetectionStrategy,\r\n  ElementRef,\r\n  Input,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport {CanColor, mixinColor} from '@angular/material/core';\r\n\r\n// TODO(josephperrott): Benchpress tests.\r\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\r\n\r\n// Boilerplate for applying mixins to MatProgressBar.\r\n/** @docs-private */\r\nexport class MatProgressBarBase {\r\n  constructor(public _elementRef: ElementRef) { }\r\n}\r\n\r\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\r\n\r\n/** Counter used to generate unique IDs for progress bars. */\r\nlet progressbarId = 0;\r\n\r\n/**\r\n * `<mat-progress-bar>` component.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-progress-bar',\r\n  exportAs: 'matProgressBar',\r\n  host: {\r\n    'role': 'progressbar',\r\n    'aria-valuemin': '0',\r\n    'aria-valuemax': '100',\r\n    '[attr.aria-valuenow]': 'value',\r\n    '[attr.mode]': 'mode',\r\n    'class': 'mat-progress-bar',\r\n  },\r\n  inputs: ['color'],\r\n  templateUrl: 'progress-bar.html',\r\n  styleUrls: ['progress-bar.css'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n})\r\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\r\n\r\n  constructor(public _elementRef: ElementRef) {\r\n    super(_elementRef);\r\n  }\r\n\r\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\r\n  @Input()\r\n  get value(): number { return this._value; }\r\n  set value(v: number) { this._value = clamp(v || 0); }\r\n  private _value: number = 0;\r\n\r\n  /** Buffer value of the progress bar. Defaults to zero. */\r\n  @Input()\r\n  get bufferValue(): number { return this._bufferValue; }\r\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\r\n  private _bufferValue: number = 0;\r\n\r\n  /**\r\n   * Mode of the progress bar.\r\n   *\r\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\r\n   * 'determinate'.\r\n   * Mirrored to mode attribute.\r\n   */\r\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\r\n\r\n  /** The id of the progress bar. */\r\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\r\n\r\n  /** Gets the current transform value for the progress bar's primary indicator. */\r\n  _primaryTransform() {\r\n    const scale = this.value / 100;\r\n    return {transform: `scaleX(${scale})`};\r\n  }\r\n\r\n  /**\r\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\r\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\r\n   */\r\n  _bufferTransform() {\r\n    if (this.mode === 'buffer') {\r\n      const scale = this.bufferValue / 100;\r\n      return {transform: `scaleX(${scale})`};\r\n    }\r\n  }\r\n}\r\n\r\n/** Clamps a value to be between two numbers, by default 0 and 100. */\r\nfunction clamp(v: number, min = 0, max = 100) {\r\n  return Math.max(min, Math.min(max, v));\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {MatCommonModule} from '@angular/material/core';\r\nimport {MatProgressBar} from './progress-bar';\r\n\r\n\r\n@NgModule({\r\n  imports: [CommonModule, MatCommonModule],\r\n  exports: [MatProgressBar, MatCommonModule],\r\n  declarations: [MatProgressBar],\r\n})\r\nexport class MatProgressBarModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {AnimationEvent} from '@angular/animations';\r\nimport {FocusKeyManager} from '@angular/cdk/a11y';\r\nimport {Direction} from '@angular/cdk/bidi';\r\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\r\nimport {startWith} from 'rxjs/operators/startWith';\r\nimport {switchMap} from 'rxjs/operators/switchMap';\r\nimport {take} from 'rxjs/operators/take';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  OnDestroy,\r\n  Output,\r\n  QueryList,\r\n  TemplateRef,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  NgZone,\r\n} from '@angular/core';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {merge} from 'rxjs/observable/merge';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {matMenuAnimations} from './menu-animations';\r\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\r\nimport {MatMenuItem} from './menu-item';\r\nimport {MatMenuPanel} from './menu-panel';\r\nimport {MatMenuContent} from './menu-content';\r\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {FocusOrigin} from '@angular/cdk/a11y';\r\n\r\n\r\n/** Default `mat-menu` options that can be overridden. */\r\nexport interface MatMenuDefaultOptions {\r\n  /** The x-axis position of the menu. */\r\n  xPosition: MenuPositionX;\r\n\r\n  /** The y-axis position of the menu. */\r\n  yPosition: MenuPositionY;\r\n\r\n  /** Whether the menu should overlap the menu trigger. */\r\n  overlapTrigger: boolean;\r\n}\r\n\r\n/** Injection token to be used to override the default options for `mat-menu`. */\r\nexport const MAT_MENU_DEFAULT_OPTIONS =\r\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options');\r\n\r\n/**\r\n * Start elevation for the menu panel.\r\n * @docs-private\r\n */\r\nconst MAT_MENU_BASE_ELEVATION = 2;\r\n\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-menu',\r\n  templateUrl: 'menu.html',\r\n  styleUrls: ['menu.css'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  animations: [\r\n    matMenuAnimations.transformMenu,\r\n    matMenuAnimations.fadeInItems\r\n  ],\r\n  exportAs: 'matMenu'\r\n})\r\nexport class MatMenu implements AfterContentInit, MatMenuPanel, OnDestroy {\r\n  private _keyManager: FocusKeyManager<MatMenuItem>;\r\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\r\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\r\n  private _previousElevation: string;\r\n\r\n  /** Subscription to tab events on the menu panel */\r\n  private _tabSubscription = Subscription.EMPTY;\r\n\r\n  /** Config object to be passed into the menu's ngClass */\r\n  _classList: {[key: string]: boolean} = {};\r\n\r\n  /** Current state of the panel animation. */\r\n  _panelAnimationState: 'void' | 'enter-start' | 'enter' = 'void';\r\n\r\n  /** Parent menu of the current menu panel. */\r\n  parentMenu: MatMenuPanel | undefined;\r\n\r\n  /** Layout direction of the menu. */\r\n  direction: Direction;\r\n\r\n  /** Position of the menu in the X axis. */\r\n  @Input()\r\n  get xPosition(): MenuPositionX { return this._xPosition; }\r\n  set xPosition(value: MenuPositionX) {\r\n    if (value !== 'before' && value !== 'after') {\r\n      throwMatMenuInvalidPositionX();\r\n    }\r\n    this._xPosition = value;\r\n    this.setPositionClasses();\r\n  }\r\n\r\n  /** Position of the menu in the Y axis. */\r\n  @Input()\r\n  get yPosition(): MenuPositionY { return this._yPosition; }\r\n  set yPosition(value: MenuPositionY) {\r\n    if (value !== 'above' && value !== 'below') {\r\n      throwMatMenuInvalidPositionY();\r\n    }\r\n    this._yPosition = value;\r\n    this.setPositionClasses();\r\n  }\r\n\r\n  /** @docs-private */\r\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\r\n\r\n  /** List of the items inside of a menu. */\r\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\r\n\r\n  /**\r\n   * Menu content that will be rendered lazily.\r\n   * @docs-private\r\n   */\r\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\r\n\r\n  /** Whether the menu should overlap its trigger. */\r\n  @Input()\r\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\r\n  set overlapTrigger(value: boolean) {\r\n    this._overlapTrigger = coerceBooleanProperty(value);\r\n  }\r\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\r\n\r\n  /**\r\n   * This method takes classes set on the host mat-menu element and applies them on the\r\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\r\n   * to style the containing menu from outside the component.\r\n   * @param classes list of class names\r\n   */\r\n  @Input('class')\r\n  set panelClass(classes: string) {\r\n    if (classes && classes.length) {\r\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\r\n        obj[className] = true;\r\n        return obj;\r\n      }, {});\r\n\r\n      this._elementRef.nativeElement.className = '';\r\n      this.setPositionClasses();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This method takes classes set on the host mat-menu element and applies them on the\r\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\r\n   * to style the containing menu from outside the component.\r\n   * @deprecated Use `panelClass` instead.\r\n   * @deletion-target 6.0.0\r\n   */\r\n  @Input()\r\n  get classList(): string { return this.panelClass; }\r\n  set classList(classes: string) { this.panelClass = classes; }\r\n\r\n  /** Event emitted when the menu is closed. */\r\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown'> =\r\n      new EventEmitter<void | 'click' | 'keydown'>();\r\n\r\n  /**\r\n   * Event emitted when the menu is closed.\r\n   * @deprecated Switch to `closed` instead\r\n   * @deletion-target 6.0.0\r\n   */\r\n  @Output() close = this.closed;\r\n\r\n  constructor(\r\n    private _elementRef: ElementRef,\r\n    private _ngZone: NgZone,\r\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\r\n\r\n  ngAfterContentInit() {\r\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this.items).withWrap().withTypeAhead();\r\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close.emit('keydown'));\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._tabSubscription.unsubscribe();\r\n    this.closed.complete();\r\n  }\r\n\r\n  /** Stream that emits whenever the hovered menu item changes. */\r\n  _hovered(): Observable<MatMenuItem> {\r\n    if (this.items) {\r\n      return this.items.changes.pipe(\r\n        startWith(this.items),\r\n        switchMap(items => merge(...items.map(item => item._hovered)))\r\n      );\r\n    }\r\n\r\n    return this._ngZone.onStable\r\n      .asObservable()\r\n      .pipe(take(1), switchMap(() => this._hovered()));\r\n  }\r\n\r\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\r\n  _handleKeydown(event: KeyboardEvent) {\r\n    switch (event.keyCode) {\r\n      case ESCAPE:\r\n        this.closed.emit('keydown');\r\n        event.stopPropagation();\r\n      break;\r\n      case LEFT_ARROW:\r\n        if (this.parentMenu && this.direction === 'ltr') {\r\n          this.closed.emit('keydown');\r\n        }\r\n      break;\r\n      case RIGHT_ARROW:\r\n        if (this.parentMenu && this.direction === 'rtl') {\r\n          this.closed.emit('keydown');\r\n        }\r\n      break;\r\n      default:\r\n        this._keyManager.onKeydown(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Focus the first item in the menu.\r\n   * @param origin Action from which the focus originated. Used to set the correct styling.\r\n   */\r\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\r\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\r\n    if (this.lazyContent) {\r\n      this._ngZone.onStable.asObservable()\r\n        .pipe(take(1))\r\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\r\n    } else {\r\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\r\n   * the user to start from the first option when pressing the down arrow.\r\n   */\r\n  resetActiveItem() {\r\n    this._keyManager.setActiveItem(-1);\r\n  }\r\n\r\n  /**\r\n   * It's necessary to set position-based classes to ensure the menu panel animation\r\n   * folds out from the correct direction.\r\n   */\r\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\r\n    this._classList['mat-menu-before'] = posX === 'before';\r\n    this._classList['mat-menu-after'] = posX === 'after';\r\n    this._classList['mat-menu-above'] = posY === 'above';\r\n    this._classList['mat-menu-below'] = posY === 'below';\r\n  }\r\n\r\n  /**\r\n   * Sets the menu panel elevation.\r\n   * @param depth Number of parent menus that come before the menu.\r\n   */\r\n  setElevation(depth: number): void {\r\n    // The elevation starts at the base and increases by one for each level.\r\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\r\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\r\n\r\n    if (!customElevation || customElevation === this._previousElevation) {\r\n      if (this._previousElevation) {\r\n        this._classList[this._previousElevation] = false;\r\n      }\r\n\r\n      this._classList[newElevation] = true;\r\n      this._previousElevation = newElevation;\r\n    }\r\n  }\r\n\r\n  /** Starts the enter animation. */\r\n  _startAnimation() {\r\n    this._panelAnimationState = 'enter-start';\r\n  }\r\n\r\n  /** Resets the panel animation to its initial state. */\r\n  _resetAnimation() {\r\n    this._panelAnimationState = 'void';\r\n  }\r\n\r\n  /** Callback that is invoked when the panel animation completes. */\r\n  _onAnimationDone(event: AnimationEvent) {\r\n    // After the initial expansion is done, trigger the second phase of the enter animation.\r\n    if (event.toState === 'enter-start') {\r\n      this._panelAnimationState = 'enter';\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\r\nimport {Direction, Directionality} from '@angular/cdk/bidi';\r\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\r\nimport {\r\n  ConnectedPositionStrategy,\r\n  HorizontalConnectionPos,\r\n  Overlay,\r\n  OverlayRef,\r\n  OverlayConfig,\r\n  RepositionScrollStrategy,\r\n  ScrollStrategy,\r\n  VerticalConnectionPos,\r\n} from '@angular/cdk/overlay';\r\nimport {TemplatePortal} from '@angular/cdk/portal';\r\nimport {filter} from 'rxjs/operators/filter';\r\nimport {\r\n  AfterContentInit,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  Self,\r\n  ViewContainerRef,\r\n} from '@angular/core';\r\nimport {merge} from 'rxjs/observable/merge';\r\nimport {of as observableOf} from 'rxjs/observable/of';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {MatMenu} from './menu-directive';\r\nimport {throwMatMenuMissingError} from './menu-errors';\r\nimport {MatMenuItem} from './menu-item';\r\nimport {MatMenuPanel} from './menu-panel';\r\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\r\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\r\n\r\n/** Injection token that determines the scroll handling while the menu is open. */\r\nexport const MAT_MENU_SCROLL_STRATEGY =\r\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\r\n\r\n/** @docs-private */\r\nexport function MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\r\n    () => RepositionScrollStrategy {\r\n  return () => overlay.scrollStrategies.reposition();\r\n}\r\n\r\n/** @docs-private */\r\nexport const MAT_MENU_SCROLL_STRATEGY_PROVIDER = {\r\n  provide: MAT_MENU_SCROLL_STRATEGY,\r\n  deps: [Overlay],\r\n  useFactory: MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY,\r\n};\r\n\r\n\r\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\r\n\r\n/** Default top padding of the menu panel. */\r\nexport const MENU_PANEL_TOP_PADDING = 8;\r\n\r\n/**\r\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\r\n * responsible for toggling the display of the provided menu instance.\r\n */\r\n@Directive({\r\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\r\n  host: {\r\n    'aria-haspopup': 'true',\r\n    '(mousedown)': '_handleMousedown($event)',\r\n    '(keydown)': '_handleKeydown($event)',\r\n    '(click)': '_handleClick($event)',\r\n  },\r\n  exportAs: 'matMenuTrigger'\r\n})\r\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\r\n  private _portal: TemplatePortal;\r\n  private _overlayRef: OverlayRef | null = null;\r\n  private _menuOpen: boolean = false;\r\n  private _closeSubscription = Subscription.EMPTY;\r\n  private _hoverSubscription = Subscription.EMPTY;\r\n\r\n  // Tracking input type is necessary so it's possible to only auto-focus\r\n  // the first item of the list when the menu is opened via the keyboard\r\n  private _openedByMouse: boolean = false;\r\n\r\n  /**\r\n   * @deprecated\r\n   * @deletion-target 6.0.0\r\n   */\r\n  @Input('mat-menu-trigger-for')\r\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\r\n    return this.menu;\r\n  }\r\n\r\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\r\n    this.menu = v;\r\n  }\r\n\r\n  /** References the menu instance that the trigger is associated with. */\r\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\r\n\r\n  /** Data to be passed along to any lazily-rendered content. */\r\n  @Input('matMenuTriggerData') menuData: any;\r\n\r\n  /** Event emitted when the associated menu is opened. */\r\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /**\r\n   * Event emitted when the associated menu is opened.\r\n   * @deprecated Switch to `menuOpened` instead\r\n   * @deletion-target 6.0.0\r\n   */\r\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\r\n\r\n  /** Event emitted when the associated menu is closed. */\r\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /**\r\n   * Event emitted when the associated menu is closed.\r\n   * @deprecated Switch to `menuClosed` instead\r\n   * @deletion-target 6.0.0\r\n   */\r\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\r\n\r\n  constructor(private _overlay: Overlay,\r\n              private _element: ElementRef,\r\n              private _viewContainerRef: ViewContainerRef,\r\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\r\n              @Optional() private _parentMenu: MatMenu,\r\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\r\n              @Optional() private _dir: Directionality,\r\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\r\n              private _focusMonitor?: FocusMonitor) {\r\n\r\n    if (_menuItemInstance) {\r\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\r\n    }\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._checkMenu();\r\n\r\n    this.menu.close.subscribe(reason => {\r\n      this._destroyMenu();\r\n\r\n      // If a click closed the menu, we should close the entire chain of nested menus.\r\n      if (reason === 'click' && this._parentMenu) {\r\n        this._parentMenu.closed.emit(reason);\r\n      }\r\n    });\r\n\r\n    if (this.triggersSubmenu()) {\r\n      // Subscribe to changes in the hovered item in order to toggle the panel.\r\n      this._hoverSubscription = this._parentMenu._hovered()\r\n          .pipe(filter(active => active === this._menuItemInstance))\r\n          .subscribe(() => {\r\n            this._openedByMouse = true;\r\n            this.openMenu();\r\n          });\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this._overlayRef) {\r\n      this._overlayRef.dispose();\r\n      this._overlayRef = null;\r\n    }\r\n\r\n    this._cleanUpSubscriptions();\r\n  }\r\n\r\n  /** Whether the menu is open. */\r\n  get menuOpen(): boolean {\r\n    return this._menuOpen;\r\n  }\r\n\r\n  /** The text direction of the containing app. */\r\n  get dir(): Direction {\r\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\r\n  }\r\n\r\n  /** Whether the menu triggers a sub-menu or a top-level one. */\r\n  triggersSubmenu(): boolean {\r\n    return !!(this._menuItemInstance && this._parentMenu);\r\n  }\r\n\r\n  /** Toggles the menu between the open and closed states. */\r\n  toggleMenu(): void {\r\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\r\n  }\r\n\r\n  /** Opens the menu. */\r\n  openMenu(): void {\r\n    if (this._menuOpen) {\r\n      return;\r\n    }\r\n\r\n    this._createOverlay().attach(this._portal);\r\n\r\n    if (this.menu.lazyContent) {\r\n      this.menu.lazyContent.attach(this.menuData);\r\n    }\r\n\r\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\r\n    this._initMenu();\r\n\r\n    if (this.menu instanceof MatMenu) {\r\n      this.menu._startAnimation();\r\n    }\r\n  }\r\n\r\n  /** Closes the menu. */\r\n  closeMenu(): void {\r\n    this.menu.close.emit();\r\n  }\r\n\r\n  /**\r\n   * Focuses the menu trigger.\r\n   * @param origin Source of the menu trigger's focus.\r\n   */\r\n  focus(origin: FocusOrigin = 'program') {\r\n    if (this._focusMonitor) {\r\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\r\n    } else {\r\n      this._element.nativeElement.focus();\r\n    }\r\n  }\r\n\r\n  /** Closes the menu and does the necessary cleanup. */\r\n  private _destroyMenu() {\r\n    if (this._overlayRef && this.menuOpen) {\r\n      this._resetMenu();\r\n      this._closeSubscription.unsubscribe();\r\n      this._overlayRef.detach();\r\n\r\n      if (this.menu instanceof MatMenu) {\r\n        this.menu._resetAnimation();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This method sets the menu state to open and focuses the first item if\r\n   * the menu was opened via the keyboard.\r\n   */\r\n  private _initMenu(): void {\r\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\r\n    this.menu.direction = this.dir;\r\n    this._setMenuElevation();\r\n    this._setIsMenuOpen(true);\r\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\r\n  }\r\n\r\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\r\n  private _setMenuElevation(): void {\r\n    if (this.menu.setElevation) {\r\n      let depth = 0;\r\n      let parentMenu = this.menu.parentMenu;\r\n\r\n      while (parentMenu) {\r\n        depth++;\r\n        parentMenu = parentMenu.parentMenu;\r\n      }\r\n\r\n      this.menu.setElevation(depth);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This method resets the menu when it's closed, most importantly restoring\r\n   * focus to the menu trigger if the menu was opened via the keyboard.\r\n   */\r\n  private _resetMenu(): void {\r\n    this._setIsMenuOpen(false);\r\n\r\n    // We should reset focus if the user is navigating using a keyboard or\r\n    // if we have a top-level trigger which might cause focus to be lost\r\n    // when clicking on the backdrop.\r\n    if (!this._openedByMouse) {\r\n      // Note that the focus style will show up both for `program` and\r\n      // `keyboard` so we don't have to specify which one it is.\r\n      this.focus();\r\n    } else if (!this.triggersSubmenu()) {\r\n      this.focus('mouse');\r\n    }\r\n\r\n    this._openedByMouse = false;\r\n  }\r\n\r\n  // set state rather than toggle to support triggers sharing a menu\r\n  private _setIsMenuOpen(isOpen: boolean): void {\r\n    this._menuOpen = isOpen;\r\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\r\n\r\n    if (this.triggersSubmenu()) {\r\n      this._menuItemInstance._highlighted = isOpen;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This method checks that a valid instance of MatMenu has been passed into\r\n   * matMenuTriggerFor. If not, an exception is thrown.\r\n   */\r\n  private _checkMenu() {\r\n    if (!this.menu) {\r\n      throwMatMenuMissingError();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This method creates the overlay from the provided menu's template and saves its\r\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\r\n   */\r\n  private _createOverlay(): OverlayRef {\r\n    if (!this._overlayRef) {\r\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\r\n      const config = this._getOverlayConfig();\r\n      this._subscribeToPositions(config.positionStrategy as ConnectedPositionStrategy);\r\n      this._overlayRef = this._overlay.create(config);\r\n    }\r\n\r\n    return this._overlayRef;\r\n  }\r\n\r\n  /**\r\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\r\n   * @returns OverlayConfig\r\n   */\r\n  private _getOverlayConfig(): OverlayConfig {\r\n    return new OverlayConfig({\r\n      positionStrategy: this._getPosition(),\r\n      hasBackdrop: !this.triggersSubmenu(),\r\n      backdropClass: 'cdk-overlay-transparent-backdrop',\r\n      direction: this.dir,\r\n      scrollStrategy: this._scrollStrategy()\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Listens to changes in the position of the overlay and sets the correct classes\r\n   * on the menu based on the new position. This ensures the animation origin is always\r\n   * correct, even if a fallback position is used for the overlay.\r\n   */\r\n  private _subscribeToPositions(position: ConnectedPositionStrategy): void {\r\n    position.onPositionChange.subscribe(change => {\r\n      const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\r\n      const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\r\n\r\n      this.menu.setPositionClasses(posX, posY);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * This method builds the position strategy for the overlay, so the menu is properly connected\r\n   * to the trigger.\r\n   * @returns ConnectedPositionStrategy\r\n   */\r\n  private _getPosition(): ConnectedPositionStrategy {\r\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\r\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\r\n\r\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\r\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\r\n\r\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\r\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\r\n    let offsetY = 0;\r\n\r\n    if (this.triggersSubmenu()) {\r\n      // When the menu is a sub-menu, it should always align itself\r\n      // to the edges of the trigger, instead of overlapping it.\r\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\r\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\r\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\r\n    } else if (!this.menu.overlapTrigger) {\r\n      originY = overlayY === 'top' ? 'bottom' : 'top';\r\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\r\n    }\r\n\r\n    return this._overlay.position()\r\n        .connectedTo(this._element, {originX, originY}, {overlayX, overlayY})\r\n        .withDirection(this.dir)\r\n        .withOffsetY(offsetY)\r\n        .withFallbackPosition(\r\n            {originX: originFallbackX, originY},\r\n            {overlayX: overlayFallbackX, overlayY})\r\n        .withFallbackPosition(\r\n            {originX, originY: originFallbackY},\r\n            {overlayX, overlayY: overlayFallbackY},\r\n            undefined, -offsetY)\r\n        .withFallbackPosition(\r\n            {originX: originFallbackX, originY: originFallbackY},\r\n            {overlayX: overlayFallbackX, overlayY: overlayFallbackY},\r\n            undefined, -offsetY);\r\n  }\r\n\r\n  /** Cleans up the active subscriptions. */\r\n  private _cleanUpSubscriptions(): void {\r\n    this._closeSubscription.unsubscribe();\r\n    this._hoverSubscription.unsubscribe();\r\n  }\r\n\r\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\r\n  private _menuClosingActions() {\r\n    const backdrop = this._overlayRef!.backdropClick();\r\n    const detachments = this._overlayRef!.detachments();\r\n    const parentClose = this._parentMenu ? this._parentMenu.close : observableOf();\r\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\r\n      filter(active => active !== this._menuItemInstance),\r\n      filter(() => this._menuOpen)\r\n    ) : observableOf();\r\n\r\n    return merge(backdrop, parentClose, hover, detachments);\r\n  }\r\n\r\n  /** Handles mouse presses on the trigger. */\r\n  _handleMousedown(event: MouseEvent): void {\r\n    if (!isFakeMousedownFromScreenReader(event)) {\r\n      this._openedByMouse = true;\r\n\r\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\r\n      // we should prevent focus from moving onto it via click to avoid the\r\n      // highlight from lingering on the menu item.\r\n      if (this.triggersSubmenu()) {\r\n        event.preventDefault();\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Handles key presses on the trigger. */\r\n  _handleKeydown(event: KeyboardEvent): void {\r\n    const keyCode = event.keyCode;\r\n\r\n    if (this.triggersSubmenu() && (\r\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\r\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\r\n      this.openMenu();\r\n    }\r\n  }\r\n\r\n  /** Handles click events on the trigger. */\r\n  _handleClick(event: MouseEvent): void {\r\n    if (this.triggersSubmenu()) {\r\n      // Stop event propagation to avoid closing the parent menu.\r\n      event.stopPropagation();\r\n      this.openMenu();\r\n    } else {\r\n      this.toggleMenu();\r\n    }\r\n  }\r\n\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {A11yModule} from '@angular/cdk/a11y';\r\nimport {OverlayModule} from '@angular/cdk/overlay';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\r\nimport {PortalModule} from '@angular/cdk/portal';\r\nimport {MAT_MENU_DEFAULT_OPTIONS, MatMenu} from './menu-directive';\r\nimport {MatMenuItem} from './menu-item';\r\nimport {MAT_MENU_SCROLL_STRATEGY_PROVIDER, MatMenuTrigger} from './menu-trigger';\r\nimport {MatMenuContent} from './menu-content';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    A11yModule,\r\n    CommonModule,\r\n    MatCommonModule,\r\n    MatRippleModule,\r\n    OverlayModule,\r\n    PortalModule,\r\n  ],\r\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\r\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\r\n  providers: [\r\n    MAT_MENU_SCROLL_STRATEGY_PROVIDER,\r\n    {\r\n      provide: MAT_MENU_DEFAULT_OPTIONS,\r\n      useValue: {\r\n        overlapTrigger: true,\r\n        xPosition: 'after',\r\n        yPosition: 'below',\r\n      },\r\n    }\r\n  ],\r\n})\r\nexport class MatMenuModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  animate,\r\n  AnimationTriggerMetadata,\r\n  state,\r\n  style,\r\n  transition,\r\n  trigger,\r\n} from '@angular/animations';\r\n\r\n/**\r\n * The following are all the animations for the mat-select component, with each\r\n * const containing the metadata for one animation.\r\n *\r\n * The values below match the implementation of the AngularJS Material mat-select animation.\r\n */\r\nexport const matSelectAnimations: {\r\n  readonly transformPanel: AnimationTriggerMetadata;\r\n  readonly fadeInContent: AnimationTriggerMetadata;\r\n} = {\r\n  /**\r\n   * This animation transforms the select's overlay panel on and off the page.\r\n   *\r\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\r\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\r\n   * side to ensure the option text correctly overlaps the trigger text.\r\n   *\r\n   * When the panel is removed from the DOM, it simply fades out linearly.\r\n   */\r\n  transformPanel: trigger('transformPanel', [\r\n    state('showing', style({\r\n      opacity: 1,\r\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\r\n      transform: 'scaleY(1)'\r\n    })),\r\n    state('showing-multiple', style({\r\n      opacity: 1,\r\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\r\n      transform: 'scaleY(1)'\r\n    })),\r\n    transition('void => *', [\r\n      style({\r\n        opacity: 0,\r\n        minWidth: '100%',\r\n        transform: 'scaleY(0)'\r\n      }),\r\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\r\n    ]),\r\n    transition('* => void', [\r\n      animate('250ms 100ms linear', style({opacity: 0}))\r\n    ])\r\n  ]),\r\n\r\n  /**\r\n   * This animation fades in the background color and text content of the\r\n   * select's options. It is time delayed to occur 100ms after the overlay\r\n   * panel has transformed in.\r\n   */\r\n  fadeInContent: trigger('fadeInContent', [\r\n    state('showing', style({opacity: 1})),\r\n    transition('void => showing', [\r\n      style({opacity: 0}),\r\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\r\n    ])\r\n  ])\r\n};\r\n\r\n\r\n/**\r\n * @deprecated\r\n * @deletion-target 7.0.0\r\n */\r\nexport const transformPanel = matSelectAnimations.transformPanel;\r\n\r\n/**\r\n * @deprecated\r\n * @deletion-target 7.0.0\r\n */\r\nexport const fadeInContent = matSelectAnimations.fadeInContent;\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {MatSelect, MatSelectTrigger, MAT_SELECT_SCROLL_STRATEGY_PROVIDER} from './select';\r\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\r\nimport {OverlayModule} from '@angular/cdk/overlay';\r\nimport {MatFormFieldModule} from '@angular/material/form-field';\r\nimport {ErrorStateMatcher} from '@angular/material/core';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    OverlayModule,\r\n    MatOptionModule,\r\n    MatCommonModule,\r\n  ],\r\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\r\n  declarations: [MatSelect, MatSelectTrigger],\r\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER, ErrorStateMatcher]\r\n})\r\nexport class MatSelectModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {\r\n  animate,\r\n  state,\r\n  style,\r\n  transition,\r\n  trigger,\r\n  AnimationTriggerMetadata,\r\n} from '@angular/animations';\r\n\r\n/** Animations used by MatTooltip. */\r\nexport const matTooltipAnimations: {\r\n  readonly tooltipState: AnimationTriggerMetadata;\r\n} = {\r\n  /** Animation that transitions a tooltip in and out. */\r\n  tooltipState: trigger('state', [\r\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\r\n    state('visible', style({transform: 'scale(1)'})),\r\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\r\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\r\n  ])\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {SelectionModel} from '@angular/cdk/collections';\r\nimport {SPACE, ENTER, HOME, END} from '@angular/cdk/keycodes';\r\nimport {\r\n  AfterContentInit,\r\n  Attribute,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Inject,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {\r\n  CanDisable,\r\n  CanDisableRipple,\r\n  MatLine,\r\n  MatLineSetter,\r\n  mixinDisabled,\r\n  mixinDisableRipple,\r\n} from '@angular/material/core';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {Subscription} from 'rxjs/Subscription';\r\n\r\n\r\n/** @docs-private */\r\nexport class MatSelectionListBase {}\r\nexport const _MatSelectionListMixinBase = mixinDisableRipple(mixinDisabled(MatSelectionListBase));\r\n\r\n/** @docs-private */\r\nexport class MatListOptionBase {}\r\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\r\n\r\n/** @docs-private */\r\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MatSelectionList),\r\n  multi: true\r\n};\r\n\r\n/**\r\n * Change event object emitted by MatListOption whenever the selected state changes.\r\n * @deprecated Use the `MatSelectionListChange` event on the selection list instead.\r\n * @deletion-target 6.0.0\r\n */\r\nexport class MatListOptionChange {\r\n  constructor(\r\n    /** Reference to the list option that changed. */\r\n    public source: MatListOption,\r\n    /** The new selected state of the option. */\r\n    public selected: boolean) {}\r\n}\r\n\r\n/** Change event that is being fired whenever the selected state of an option changes. */\r\nexport class MatSelectionListChange {\r\n  constructor(\r\n    /** Reference to the selection list that emitted the event. */\r\n    public source: MatSelectionList,\r\n    /** Reference to the option that has been changed. */\r\n    public option: MatListOption) {}\r\n}\r\n\r\n/**\r\n * Component for list-options of selection-list. Each list-option can automatically\r\n * generate a checkbox and can put current item into the selectionModel of selection-list\r\n * if the current item is selected.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-list-option',\r\n  exportAs: 'matListOption',\r\n  inputs: ['disableRipple'],\r\n  host: {\r\n    'role': 'option',\r\n    'class': 'mat-list-item mat-list-option',\r\n    '(focus)': '_handleFocus()',\r\n    '(blur)': '_handleBlur()',\r\n    '(click)': '_handleClick()',\r\n    'tabindex': '-1',\r\n    '[class.mat-list-item-disabled]': 'disabled',\r\n    '[class.mat-list-item-focus]': '_hasFocus',\r\n    '[attr.aria-selected]': 'selected.toString()',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n  },\r\n  templateUrl: 'list-option.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatListOption extends _MatListOptionMixinBase\r\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\r\n\r\n  private _selected = false;\r\n  private _disabled = false;\r\n\r\n  /** Whether the option has focus. */\r\n  _hasFocus: boolean = false;\r\n\r\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\r\n\r\n  /** DOM element containing the item's text. */\r\n  @ViewChild('text') _text: ElementRef;\r\n\r\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\r\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\r\n\r\n  /** Value of the option */\r\n  @Input() value: any;\r\n\r\n  /** Whether the option is disabled. */\r\n  @Input()\r\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\r\n  set disabled(value: any) {\r\n    const newValue = coerceBooleanProperty(value);\r\n\r\n    if (newValue !== this._disabled) {\r\n      this._disabled = newValue;\r\n      this._changeDetector.markForCheck();\r\n    }\r\n  }\r\n\r\n  /** Whether the option is selected. */\r\n  @Input()\r\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\r\n  set selected(value: boolean) {\r\n    const isSelected = coerceBooleanProperty(value);\r\n\r\n    if (isSelected !== this._selected) {\r\n      this._setSelected(isSelected);\r\n      this.selectionList._reportValueChange();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Emits a change event whenever the selected state of an option changes.\r\n   * @deprecated Use the `selectionChange` event on the `<mat-selection-list>` instead.\r\n   * @deletion-target 6.0.0\r\n   */\r\n  @Output() readonly selectionChange: EventEmitter<MatListOptionChange> =\r\n    new EventEmitter<MatListOptionChange>();\r\n\r\n  constructor(private _element: ElementRef,\r\n              private _changeDetector: ChangeDetectorRef,\r\n              /** @docs-private */\r\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit() {\r\n    // List options that are selected at initialization can't be reported properly to the form\r\n    // control. This is because it takes some time until the selection-list knows about all\r\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\r\n    // that should be used instead. Deferring the value change report to the next tick ensures\r\n    // that the form control value is not being overwritten.\r\n    const wasSelected = this._selected;\r\n\r\n    Promise.resolve().then(() => {\r\n      if (this._selected || wasSelected) {\r\n        this.selected = true;\r\n        this._changeDetector.markForCheck();\r\n      }\r\n    });\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\r\n    // tslint:disable-next-line:no-unused-expression\r\n    new MatLineSetter(this._lines, this._element);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.selected) {\r\n      // We have to delay this until the next tick in order\r\n      // to avoid changed after checked errors.\r\n      Promise.resolve().then(() => this.selected = false);\r\n    }\r\n\r\n    this.selectionList._removeOptionFromList(this);\r\n  }\r\n\r\n  /** Toggles the selection state of the option. */\r\n  toggle(): void {\r\n    this.selected = !this.selected;\r\n  }\r\n\r\n  /** Allows for programmatic focusing of the option. */\r\n  focus(): void {\r\n    this._element.nativeElement.focus();\r\n  }\r\n\r\n  /**\r\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\r\n   * @docs-private\r\n   */\r\n  getLabel() {\r\n    return this._text ? this._text.nativeElement.textContent : '';\r\n  }\r\n\r\n  /** Whether this list item should show a ripple effect when clicked. */\r\n  _isRippleDisabled() {\r\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\r\n  }\r\n\r\n  _handleClick() {\r\n    if (!this.disabled) {\r\n      this.toggle();\r\n\r\n      // Emit a change event if the selected state of the option changed through user interaction.\r\n      this.selectionList._emitChangeEvent(this);\r\n\r\n      // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\r\n      this._emitDeprecatedChangeEvent();\r\n    }\r\n  }\r\n\r\n  _handleFocus() {\r\n    this._hasFocus = true;\r\n    this.selectionList._setFocusedOption(this);\r\n  }\r\n\r\n  _handleBlur() {\r\n    this._hasFocus = false;\r\n    this.selectionList._onTouched();\r\n  }\r\n\r\n  /** Retrieves the DOM element of the component host. */\r\n  _getHostElement(): HTMLElement {\r\n    return this._element.nativeElement;\r\n  }\r\n\r\n  /** Sets the selected state of the option. */\r\n  _setSelected(selected: boolean) {\r\n    if (selected === this._selected) {\r\n      return;\r\n    }\r\n\r\n    this._selected = selected;\r\n\r\n    if (selected) {\r\n      this.selectionList.selectedOptions.select(this);\r\n    } else {\r\n      this.selectionList.selectedOptions.deselect(this);\r\n    }\r\n\r\n    this._changeDetector.markForCheck();\r\n  }\r\n\r\n  /** Emits a selectionChange event for this option. */\r\n  _emitDeprecatedChangeEvent() {\r\n    // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\r\n    this.selectionChange.emit(new MatListOptionChange(this, this.selected));\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-selection-list',\r\n  exportAs: 'matSelectionList',\r\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\r\n  host: {\r\n    'role': 'listbox',\r\n    '[tabIndex]': 'tabIndex',\r\n    'class': 'mat-selection-list',\r\n    '(focus)': 'focus()',\r\n    '(blur)': '_onTouched()',\r\n    '(keydown)': '_keydown($event)',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n  },\r\n  template: '<ng-content></ng-content>',\r\n  styleUrls: ['list.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\r\n    CanDisable, CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\r\n\r\n  /** The FocusKeyManager which handles focus. */\r\n  _keyManager: FocusKeyManager<MatListOption>;\r\n\r\n  /** The option components contained within this selection-list. */\r\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\r\n\r\n  /** Emits a change event whenever the selected state of an option changes. */\r\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\r\n      new EventEmitter<MatSelectionListChange>();\r\n\r\n  /** Tabindex of the selection list. */\r\n  @Input() tabIndex: number = 0;\r\n\r\n  /** The currently selected options. */\r\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\r\n\r\n  /** View to model callback that should be called whenever the selected options change. */\r\n  private _onChange: (value: any) => void = (_: any) => {};\r\n\r\n  /** Used for storing the values that were assigned before the options were initialized. */\r\n  private _tempValues: string[]|null;\r\n\r\n  private _modelChanges = Subscription.EMPTY;\r\n\r\n  /** View to model callback that should be called if the list or its options lost focus. */\r\n  _onTouched: () => void = () => {};\r\n\r\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\r\n    super();\r\n\r\n    this.tabIndex = parseInt(tabIndex) || 0;\r\n  }\r\n\r\n  ngAfterContentInit(): void {\r\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\r\n      .withWrap()\r\n      .withTypeAhead()\r\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\r\n      // screenreader users, that allows reading the different options of the list.\r\n      .skipPredicate(() => false);\r\n\r\n    if (this._tempValues) {\r\n      this._setOptionsFromValues(this._tempValues);\r\n      this._tempValues = null;\r\n    }\r\n\r\n    // Sync external changes to the model back to the options.\r\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\r\n      if (event.added) {\r\n        for (let item of event.added) {\r\n          item.selected = true;\r\n        }\r\n      }\r\n\r\n      if (event.removed) {\r\n        for (let item of event.removed) {\r\n          item.selected = false;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._modelChanges.unsubscribe();\r\n  }\r\n\r\n  /** Focuses the last active list option. */\r\n  focus() {\r\n    this._element.nativeElement.focus();\r\n  }\r\n\r\n  /** Selects all of the options. */\r\n  selectAll() {\r\n    this.options.forEach(option => option._setSelected(true));\r\n    this._reportValueChange();\r\n  }\r\n\r\n  /** Deselects all of the options. */\r\n  deselectAll() {\r\n    this.options.forEach(option => option._setSelected(false));\r\n    this._reportValueChange();\r\n  }\r\n\r\n  /** Sets the focused option of the selection-list. */\r\n  _setFocusedOption(option: MatListOption) {\r\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\r\n  }\r\n\r\n  /** Removes an option from the selection list and updates the active item. */\r\n  _removeOptionFromList(option: MatListOption) {\r\n    if (option._hasFocus) {\r\n      const optionIndex = this._getOptionIndex(option);\r\n\r\n      // Check whether the option is the last item\r\n      if (optionIndex > 0) {\r\n        this._keyManager.setPreviousItemActive();\r\n      } else if (optionIndex === 0 && this.options.length > 1) {\r\n        this._keyManager.setNextItemActive();\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Passes relevant key presses to our key manager. */\r\n  _keydown(event: KeyboardEvent) {\r\n    switch (event.keyCode) {\r\n      case SPACE:\r\n      case ENTER:\r\n        if (!this.disabled) {\r\n          this._toggleSelectOnFocusedOption();\r\n\r\n          // Always prevent space from scrolling the page since the list has focus\r\n          event.preventDefault();\r\n        }\r\n        break;\r\n      case HOME:\r\n      case END:\r\n        event.keyCode === HOME ? this._keyManager.setFirstItemActive() :\r\n                                 this._keyManager.setLastItemActive();\r\n        event.preventDefault();\r\n        break;\r\n      default:\r\n        this._keyManager.onKeydown(event);\r\n    }\r\n  }\r\n\r\n  /** Reports a value change to the ControlValueAccessor */\r\n  _reportValueChange() {\r\n    if (this.options) {\r\n      this._onChange(this._getSelectedOptionValues());\r\n    }\r\n  }\r\n\r\n  /** Emits a change event if the selected state of an option changed. */\r\n  _emitChangeEvent(option: MatListOption) {\r\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\r\n  }\r\n\r\n  /** Implemented as part of ControlValueAccessor. */\r\n  writeValue(values: string[]): void {\r\n    if (this.options) {\r\n      this._setOptionsFromValues(values || []);\r\n    } else {\r\n      this._tempValues = values;\r\n    }\r\n  }\r\n\r\n  /** Implemented as a part of ControlValueAccessor. */\r\n  setDisabledState(isDisabled: boolean): void {\r\n    if (this.options) {\r\n      this.options.forEach(option => option.disabled = isDisabled);\r\n    }\r\n  }\r\n\r\n  /** Implemented as part of ControlValueAccessor. */\r\n  registerOnChange(fn: (value: any) => void): void {\r\n    this._onChange = fn;\r\n  }\r\n\r\n  /** Implemented as part of ControlValueAccessor. */\r\n  registerOnTouched(fn: () => void): void {\r\n    this._onTouched = fn;\r\n  }\r\n\r\n  /** Returns the option with the specified value. */\r\n  private _getOptionByValue(value: string): MatListOption | undefined {\r\n    return this.options.find(option => option.value === value);\r\n  }\r\n\r\n  /** Sets the selected options based on the specified values. */\r\n  private _setOptionsFromValues(values: string[]) {\r\n    this.options.forEach(option => option._setSelected(false));\r\n\r\n    values\r\n      .map(value => this._getOptionByValue(value))\r\n      .filter(Boolean)\r\n      .forEach(option => option!._setSelected(true));\r\n  }\r\n\r\n  /** Returns the values of the selected options. */\r\n  private _getSelectedOptionValues(): string[] {\r\n    return this.options.filter(option => option.selected).map(option => option.value);\r\n  }\r\n\r\n  /** Toggles the selected state of the currently focused option. */\r\n  private _toggleSelectOnFocusedOption(): void {\r\n    let focusedIndex = this._keyManager.activeItemIndex;\r\n\r\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\r\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\r\n\r\n      if (focusedOption) {\r\n        focusedOption.toggle();\r\n\r\n        // Emit a change event because the focused option changed its state through user\r\n        // interaction.\r\n        this._emitChangeEvent(focusedOption);\r\n\r\n        // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\r\n        focusedOption._emitDeprecatedChangeEvent();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Utility to ensure all indexes are valid.\r\n   * @param index The index to be checked.\r\n   * @returns True if the index is valid for our list of options.\r\n   */\r\n  private _isValidIndex(index: number): boolean {\r\n    return index >= 0 && index < this.options.length;\r\n  }\r\n\r\n  /** Returns the index of the specified list option. */\r\n  private _getOptionIndex(option: MatListOption): number {\r\n    return this.options.toArray().indexOf(option);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {\r\n  MatCommonModule,\r\n  MatLineModule,\r\n  MatPseudoCheckboxModule,\r\n  MatRippleModule,\r\n} from '@angular/material/core';\r\nimport {\r\n  MatList,\r\n  MatNavList,\r\n  MatListAvatarCssMatStyler,\r\n  MatListIconCssMatStyler,\r\n  MatListItem,\r\n  MatListSubheaderCssMatStyler,\r\n} from './list';\r\nimport {MatListOption, MatSelectionList} from './selection-list';\r\nimport {MatDividerModule} from '@angular/material/divider';\r\n\r\n\r\n@NgModule({\r\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\r\n  exports: [\r\n    MatList,\r\n    MatNavList,\r\n    MatListItem,\r\n    MatListAvatarCssMatStyler,\r\n    MatLineModule,\r\n    MatCommonModule,\r\n    MatListIconCssMatStyler,\r\n    MatListSubheaderCssMatStyler,\r\n    MatPseudoCheckboxModule,\r\n    MatSelectionList,\r\n    MatListOption,\r\n    MatDividerModule\r\n  ],\r\n  declarations: [\r\n    MatList,\r\n    MatNavList,\r\n    MatListItem,\r\n    MatListAvatarCssMatStyler,\r\n    MatListIconCssMatStyler,\r\n    MatListSubheaderCssMatStyler,\r\n    MatSelectionList,\r\n    MatListOption\r\n  ],\r\n})\r\nexport class MatListModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport{\r\n  trigger,\r\n  state,\r\n  style,\r\n  animate,\r\n  transition,\r\n  AnimationTriggerMetadata,\r\n} from '@angular/animations';\r\n\r\n/**\r\n * Animations used by the mat-menu component.\r\n * Animation duration and timing values are based on:\r\n * https://material.io/guidelines/components/menus.html#menus-usage\r\n */\r\nexport const matMenuAnimations: {\r\n  readonly transformMenu: AnimationTriggerMetadata;\r\n  readonly fadeInItems: AnimationTriggerMetadata;\r\n} = {\r\n  /**\r\n   * This animation controls the menu panel's entry and exit from the page.\r\n   *\r\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\r\n   *\r\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\r\n   * delay to display the ripple.\r\n   */\r\n  transformMenu: trigger('transformMenu', [\r\n    // TODO(kara): switch to :enter and :leave once Mobile Safari is sorted out.\r\n    state('void', style({\r\n      opacity: 0,\r\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\r\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\r\n      transform: 'scale(0.01, 0.01)'\r\n    })),\r\n    state('enter-start', style({\r\n      opacity: 1,\r\n      transform: 'scale(1, 0.5)'\r\n    })),\r\n    state('enter', style({\r\n      transform: 'scale(1, 1)'\r\n    })),\r\n    transition('void => enter-start', animate('100ms linear')),\r\n    transition('enter-start => enter', animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\r\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\r\n  ]),\r\n\r\n\r\n  /**\r\n   * This animation fades in the background color and content of the menu panel\r\n   * after its containing element is scaled in.\r\n   */\r\n  fadeInItems: trigger('fadeInItems', [\r\n    state('showing', style({opacity: 1})),\r\n    transition('void => *', [\r\n      style({opacity: 0}),\r\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\r\n    ])\r\n  ])\r\n};\r\n\r\n/**\r\n * @deprecated\r\n * @deletion-target 7.0.0\r\n */\r\nexport const fadeInItems = matMenuAnimations.fadeInItems;\r\n\r\n/**\r\n * @deprecated\r\n * @deletion-target 7.0.0\r\n */\r\nexport const transformMenu = matMenuAnimations.transformMenu;\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ElementRef,\r\n  OnDestroy,\r\n  ViewEncapsulation,\r\n  Inject,\r\n} from '@angular/core';\r\nimport {\r\n  CanDisable,\r\n  CanDisableRipple,\r\n  mixinDisabled,\r\n  mixinDisableRipple\r\n} from '@angular/material/core';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {DOCUMENT} from '@angular/common';\r\n\r\n// Boilerplate for applying mixins to MatMenuItem.\r\n/** @docs-private */\r\nexport class MatMenuItemBase {}\r\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\r\n\r\n/**\r\n * This directive is intended to be used inside an mat-menu tag.\r\n * It exists mostly to set the role attribute.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: '[mat-menu-item]',\r\n  exportAs: 'matMenuItem',\r\n  inputs: ['disabled', 'disableRipple'],\r\n  host: {\r\n    'role': 'menuitem',\r\n    'class': 'mat-menu-item',\r\n    '[class.mat-menu-item-highlighted]': '_highlighted',\r\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\r\n    '[attr.tabindex]': '_getTabIndex()',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n    '[attr.disabled]': 'disabled || null',\r\n    '(click)': '_checkDisabled($event)',\r\n    '(mouseenter)': '_emitHoverEvent()',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  templateUrl: 'menu-item.html',\r\n})\r\nexport class MatMenuItem extends _MatMenuItemMixinBase\r\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\r\n\r\n  private _document: Document;\r\n\r\n  /** Stream that emits when the menu item is hovered. */\r\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\r\n\r\n  /** Whether the menu item is highlighted. */\r\n  _highlighted: boolean = false;\r\n\r\n  /** Whether the menu item acts as a trigger for a sub-menu. */\r\n  _triggersSubmenu: boolean = false;\r\n\r\n  constructor(\r\n    private _elementRef: ElementRef,\r\n    @Inject(DOCUMENT) document?: any,\r\n    private _focusMonitor?: FocusMonitor) {\r\n\r\n    // @deletion-target 6.0.0 make `_focusMonitor` and `document` required params.\r\n    super();\r\n\r\n    if (_focusMonitor) {\r\n      // Start monitoring the element so it gets the appropriate focused classes. We want\r\n      // to show the focus style for menu items only when the focus was not caused by a\r\n      // mouse or touch interaction.\r\n      _focusMonitor.monitor(this._getHostElement(), false);\r\n    }\r\n\r\n    this._document = document;\r\n  }\r\n\r\n  /** Focuses the menu item. */\r\n  focus(origin: FocusOrigin = 'program'): void {\r\n    if (this._focusMonitor) {\r\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\r\n    } else {\r\n      this._getHostElement().focus();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this._focusMonitor) {\r\n      this._focusMonitor.stopMonitoring(this._getHostElement());\r\n    }\r\n\r\n    this._hovered.complete();\r\n  }\r\n\r\n  /** Used to set the `tabindex`. */\r\n  _getTabIndex(): string {\r\n    return this.disabled ? '-1' : '0';\r\n  }\r\n\r\n  /** Returns the host DOM element. */\r\n  _getHostElement(): HTMLElement {\r\n    return this._elementRef.nativeElement;\r\n  }\r\n\r\n  /** Prevents the default element actions if it is disabled. */\r\n  _checkDisabled(event: Event): void {\r\n    if (this.disabled) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n  }\r\n\r\n  /** Emits to the hover stream. */\r\n  _emitHoverEvent() {\r\n    if (!this.disabled) {\r\n      this._hovered.next(this);\r\n    }\r\n  }\r\n\r\n  /** Gets the label to be used when determining whether the option should be focused. */\r\n  getLabel(): string {\r\n    const element: HTMLElement = this._elementRef.nativeElement;\r\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\r\n    let output = '';\r\n\r\n    if (element.childNodes) {\r\n      const length = element.childNodes.length;\r\n\r\n      // Go through all the top-level text nodes and extract their text.\r\n      // We skip anything that's not a text node to prevent the text from\r\n      // being thrown off by something like an icon.\r\n      for (let i = 0; i < length; i++) {\r\n        if (element.childNodes[i].nodeType === textNodeType) {\r\n          output += element.childNodes[i].textContent;\r\n        }\r\n      }\r\n    }\r\n\r\n    return output.trim();\r\n  }\r\n\r\n}\r\n\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  Directive,\r\n  TemplateRef,\r\n  ComponentFactoryResolver,\r\n  ApplicationRef,\r\n  Injector,\r\n  ViewContainerRef,\r\n  Inject,\r\n  OnDestroy,\r\n} from '@angular/core';\r\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\r\nimport {DOCUMENT} from '@angular/common';\r\n\r\n/**\r\n * Menu content that will be rendered lazily once the menu is opened.\r\n */\r\n@Directive({\r\n  selector: 'ng-template[matMenuContent]'\r\n})\r\nexport class MatMenuContent implements OnDestroy {\r\n  private _portal: TemplatePortal<any>;\r\n  private _outlet: DomPortalOutlet;\r\n\r\n  constructor(\r\n    private _template: TemplateRef<any>,\r\n    private _componentFactoryResolver: ComponentFactoryResolver,\r\n    private _appRef: ApplicationRef,\r\n    private _injector: Injector,\r\n    private _viewContainerRef: ViewContainerRef,\r\n    @Inject(DOCUMENT) private _document: any) {}\r\n\r\n  /**\r\n   * Attaches the content with a particular context.\r\n   * @docs-private\r\n   */\r\n  attach(context: any = {}) {\r\n    if (!this._portal) {\r\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\r\n    } else if (this._portal.isAttached) {\r\n      this._portal.detach();\r\n    }\r\n\r\n    if (!this._outlet) {\r\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\r\n          this._componentFactoryResolver, this._appRef, this._injector);\r\n    }\r\n\r\n    const element: HTMLElement = this._template.elementRef.nativeElement;\r\n\r\n    // Because we support opening the same menu from different triggers (which in turn have their\r\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\r\n    // risk it staying attached to a pane that's no longer in the DOM.\r\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\r\n    this._portal.attach(this._outlet, context);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this._outlet) {\r\n      this._outlet.dispose();\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  Directive,\r\n  ElementRef,\r\n  Optional,\r\n  QueryList,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\r\n\r\n// Boilerplate for applying mixins to MatList.\r\n/** @docs-private */\r\nexport class MatListBase {}\r\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\r\n\r\n// Boilerplate for applying mixins to MatListItem.\r\n/** @docs-private */\r\nexport class MatListItemBase {}\r\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-nav-list',\r\n  exportAs: 'matNavList',\r\n  host: {\r\n    'role': 'navigation',\r\n    'class': 'mat-nav-list'\r\n  },\r\n  templateUrl: 'list.html',\r\n  styleUrls: ['list.css'],\r\n  inputs: ['disableRipple'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-list',\r\n  exportAs: 'matList',\r\n  templateUrl: 'list.html',\r\n  host: {'class': 'mat-list'},\r\n  styleUrls: ['list.css'],\r\n  inputs: ['disableRipple'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\r\n\r\n/**\r\n * Directive whose purpose is to add the mat- CSS styling to this selector.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: '[mat-list-avatar], [matListAvatar]',\r\n  host: {'class': 'mat-list-avatar'}\r\n})\r\nexport class MatListAvatarCssMatStyler {}\r\n\r\n/**\r\n * Directive whose purpose is to add the mat- CSS styling to this selector.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: '[mat-list-icon], [matListIcon]',\r\n  host: {'class': 'mat-list-icon'}\r\n})\r\nexport class MatListIconCssMatStyler {}\r\n\r\n/**\r\n * Directive whose purpose is to add the mat- CSS styling to this selector.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: '[mat-subheader], [matSubheader]',\r\n  host: {'class': 'mat-subheader'}\r\n})\r\nexport class MatListSubheaderCssMatStyler {}\r\n\r\n/** An item within a Material Design list. */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-list-item, a[mat-list-item]',\r\n  exportAs: 'matListItem',\r\n  host: {\r\n    'class': 'mat-list-item',\r\n    // @deletion-target 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\r\n    '[class.mat-list-item-avatar]': '_avatar',\r\n    '[class.mat-list-item-with-avatar]': '_avatar',\r\n    '(focus)': '_handleFocus()',\r\n    '(blur)': '_handleBlur()',\r\n  },\r\n  inputs: ['disableRipple'],\r\n  templateUrl: 'list-item.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\r\n    CanDisableRipple {\r\n  private _isNavList: boolean = false;\r\n\r\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\r\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\r\n\r\n  constructor(private _element: ElementRef,\r\n              @Optional() private _navList: MatNavList) {\r\n    super();\r\n    this._isNavList = !!_navList;\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\r\n    // tslint:disable-next-line:no-unused-expression\r\n    new MatLineSetter(this._lines, this._element);\r\n  }\r\n\r\n  /** Whether this list item should show a ripple effect when clicked. */\r\n  _isRippleDisabled() {\r\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\r\n  }\r\n\r\n  _handleFocus() {\r\n    this._element.nativeElement.classList.add('mat-list-item-focus');\r\n  }\r\n\r\n  _handleBlur() {\r\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\r\n  }\r\n\r\n  /** Retrieves the DOM element of the component host. */\r\n  _getHostElement(): HTMLElement {\r\n    return this._element.nativeElement;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {catchError} from 'rxjs/operators/catchError';\r\nimport {tap} from 'rxjs/operators/tap';\r\nimport {finalize} from 'rxjs/operators/finalize';\r\nimport {map} from 'rxjs/operators/map';\r\nimport {share} from 'rxjs/operators/share';\r\nimport {\r\n  Injectable,\r\n  Inject,\r\n  InjectionToken,\r\n  Optional,\r\n  SecurityContext,\r\n  SkipSelf,\r\n} from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {DomSanitizer, SafeResourceUrl} from '@angular/platform-browser';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {forkJoin} from 'rxjs/observable/forkJoin';\r\nimport {of as observableOf} from 'rxjs/observable/of';\r\nimport {_throw as observableThrow} from 'rxjs/observable/throw';\r\nimport {DOCUMENT} from '@angular/common';\r\n\r\n\r\n/**\r\n * Returns an exception to be thrown in the case when attempting to\r\n * load an icon with a name that cannot be found.\r\n * @docs-private\r\n */\r\nexport function getMatIconNameNotFoundError(iconName: string): Error {\r\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\r\n}\r\n\r\n\r\n/**\r\n * Returns an exception to be thrown when the consumer attempts to use\r\n * `<mat-icon>` without including @angular/http.\r\n * @docs-private\r\n */\r\nexport function getMatIconNoHttpProviderError(): Error {\r\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\r\n               'Please include the HttpClientModule from @angular/common/http in your ' +\r\n               'app imports.');\r\n}\r\n\r\n\r\n/**\r\n * Returns an exception to be thrown when a URL couldn't be sanitized.\r\n * @param url URL that was attempted to be sanitized.\r\n * @docs-private\r\n */\r\nexport function getMatIconFailedToSanitizeError(url: SafeResourceUrl): Error {\r\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\r\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\r\n}\r\n\r\n/**\r\n * Configuration for an icon, including the URL and possibly the cached SVG element.\r\n * @docs-private\r\n */\r\nclass SvgIconConfig {\r\n  svgElement: SVGElement | null = null;\r\n  constructor(public url: SafeResourceUrl) { }\r\n}\r\n\r\n/**\r\n * Service to register and display icons used by the `<mat-icon>` component.\r\n * - Registers icon URLs by namespace and name.\r\n * - Registers icon set URLs by namespace.\r\n * - Registers aliases for CSS classes, for use with icon fonts.\r\n * - Loads icons from URLs and extracts individual icons from icon sets.\r\n */\r\n@Injectable()\r\nexport class MatIconRegistry {\r\n  private _document: Document;\r\n\r\n  /**\r\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\r\n   */\r\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\r\n\r\n  /**\r\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\r\n   * Multiple icon sets can be registered under the same namespace.\r\n   */\r\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\r\n\r\n  /** Cache for icons loaded by direct URLs. */\r\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\r\n\r\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\r\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\r\n\r\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\r\n  private _fontCssClassesByAlias = new Map<string, string>();\r\n\r\n  /**\r\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\r\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\r\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\r\n   */\r\n  private _defaultFontSetClass = 'material-icons';\r\n\r\n  constructor(\r\n    @Optional() private _httpClient: HttpClient,\r\n    private _sanitizer: DomSanitizer,\r\n    @Optional() @Inject(DOCUMENT) document?: any) {\r\n      // TODO(crisbeto): make _document required next major release.\r\n      this._document = document;\r\n    }\r\n\r\n  /**\r\n   * Registers an icon by URL in the default namespace.\r\n   * @param iconName Name under which the icon should be registered.\r\n   * @param url\r\n   */\r\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\r\n    return this.addSvgIconInNamespace('', iconName, url);\r\n  }\r\n\r\n  /**\r\n   * Registers an icon by URL in the specified namespace.\r\n   * @param namespace Namespace in which the icon should be registered.\r\n   * @param iconName Name under which the icon should be registered.\r\n   * @param url\r\n   */\r\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\r\n    const key = iconKey(namespace, iconName);\r\n    this._svgIconConfigs.set(key, new SvgIconConfig(url));\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Registers an icon set by URL in the default namespace.\r\n   * @param url\r\n   */\r\n  addSvgIconSet(url: SafeResourceUrl): this {\r\n    return this.addSvgIconSetInNamespace('', url);\r\n  }\r\n\r\n  /**\r\n   * Registers an icon set by URL in the specified namespace.\r\n   * @param namespace Namespace in which to register the icon set.\r\n   * @param url\r\n   */\r\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\r\n    const config = new SvgIconConfig(url);\r\n    const configNamespace = this._iconSetConfigs.get(namespace);\r\n\r\n    if (configNamespace) {\r\n      configNamespace.push(config);\r\n    } else {\r\n      this._iconSetConfigs.set(namespace, [config]);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\r\n   * component with the alias as the fontSet input will cause the class name to be applied\r\n   * to the `<mat-icon>` element.\r\n   *\r\n   * @param alias Alias for the font.\r\n   * @param className Class name override to be used instead of the alias.\r\n   */\r\n  registerFontClassAlias(alias: string, className: string = alias): this {\r\n    this._fontCssClassesByAlias.set(alias, className);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Returns the CSS class name associated with the alias by a previous call to\r\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\r\n   */\r\n  classNameForFontAlias(alias: string): string {\r\n    return this._fontCssClassesByAlias.get(alias) || alias;\r\n  }\r\n\r\n  /**\r\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\r\n   * have a fontSet input value, and is not loading an icon by name or URL.\r\n   *\r\n   * @param className\r\n   */\r\n  setDefaultFontSetClass(className: string): this {\r\n    this._defaultFontSetClass = className;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\r\n   * have a fontSet input value, and is not loading an icon by name or URL.\r\n   */\r\n  getDefaultFontSetClass(): string {\r\n    return this._defaultFontSetClass;\r\n  }\r\n\r\n  /**\r\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\r\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\r\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\r\n   * it will not contain any modifications made to elements previously returned).\r\n   *\r\n   * @param safeUrl URL from which to fetch the SVG icon.\r\n   */\r\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\r\n    let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\r\n\r\n    if (!url) {\r\n      throw getMatIconFailedToSanitizeError(safeUrl);\r\n    }\r\n\r\n    let cachedIcon = this._cachedIconsByUrl.get(url);\r\n\r\n    if (cachedIcon) {\r\n      return observableOf(cloneSvg(cachedIcon));\r\n    }\r\n\r\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\r\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\r\n      map(svg => cloneSvg(svg)),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\r\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\r\n   * if not, the Observable will throw an error.\r\n   *\r\n   * @param name Name of the icon to be retrieved.\r\n   * @param namespace Namespace in which to look for the icon.\r\n   */\r\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\r\n    // Return (copy of) cached icon if possible.\r\n    const key = iconKey(namespace, name);\r\n    const config = this._svgIconConfigs.get(key);\r\n\r\n    if (config) {\r\n      return this._getSvgFromConfig(config);\r\n    }\r\n\r\n    // See if we have any icon sets registered for the namespace.\r\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\r\n\r\n    if (iconSetConfigs) {\r\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\r\n    }\r\n\r\n    return observableThrow(getMatIconNameNotFoundError(key));\r\n  }\r\n\r\n  /**\r\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\r\n   */\r\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\r\n    if (config.svgElement) {\r\n      // We already have the SVG element for this icon, return a copy.\r\n      return observableOf(cloneSvg(config.svgElement));\r\n    } else {\r\n      // Fetch the icon from the config's URL, cache it, and return a copy.\r\n      return this._loadSvgIconFromConfig(config).pipe(\r\n        tap(svg => config.svgElement = svg),\r\n        map(svg => cloneSvg(svg)),\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\r\n   * First searches the available cached icons for a nested element with a matching name, and\r\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\r\n   * that have not been cached, and searches again after all fetches are completed.\r\n   * The returned Observable produces the SVG element if possible, and throws\r\n   * an error if no icon with the specified name can be found.\r\n   */\r\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\r\n      Observable<SVGElement> {\r\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\r\n    // requested name.\r\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\r\n\r\n    if (namedIcon) {\r\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\r\n      // time anyway, there's probably not much advantage compared to just always extracting\r\n      // it from the icon set.\r\n      return observableOf(namedIcon);\r\n    }\r\n\r\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\r\n    // fetched, fetch them now and look for iconName in the results.\r\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\r\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\r\n      .map(iconSetConfig => {\r\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\r\n          catchError((err: any): Observable<SVGElement | null> => {\r\n            let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\r\n\r\n            // Swallow errors fetching individual URLs so the combined Observable won't\r\n            // necessarily fail.\r\n            console.log(`Loading icon set URL: ${url} failed: ${err}`);\r\n            return observableOf(null);\r\n          })\r\n        );\r\n      });\r\n\r\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\r\n    // cached SVG element (unless the request failed), and we can check again for the icon.\r\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\r\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\r\n\r\n      if (!foundIcon) {\r\n        throw getMatIconNameNotFoundError(name);\r\n      }\r\n\r\n      return foundIcon;\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\r\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\r\n   * returns it. Returns null if no matching element is found.\r\n   */\r\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\r\n      SVGElement | null {\r\n    // Iterate backwards, so icon sets added later have precedence.\r\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\r\n      const config = iconSetConfigs[i];\r\n      if (config.svgElement) {\r\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\r\n        if (foundIcon) {\r\n          return foundIcon;\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\r\n   * from it.\r\n   */\r\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\r\n    return this._fetchUrl(config.url)\r\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\r\n  }\r\n\r\n  /**\r\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\r\n   * from it.\r\n   */\r\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\r\n    // If the SVG for this icon set has already been parsed, do nothing.\r\n    if (config.svgElement) {\r\n      return observableOf(config.svgElement);\r\n    }\r\n\r\n    return this._fetchUrl(config.url).pipe(map(svgText => {\r\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\r\n      // only needs to occur if the cache is yet unset.\r\n      if (!config.svgElement) {\r\n        config.svgElement = this._svgElementFromString(svgText);\r\n      }\r\n\r\n      return config.svgElement;\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Creates a DOM element from the given SVG string, and adds default attributes.\r\n   */\r\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\r\n    const svg = this._svgElementFromString(responseText);\r\n    this._setSvgAttributes(svg);\r\n    return svg;\r\n  }\r\n\r\n  /**\r\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\r\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\r\n   * returns it. Returns null if no matching element is found.\r\n   */\r\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\r\n    const iconSource = iconSet.querySelector('#' + iconName);\r\n\r\n    if (!iconSource) {\r\n      return null;\r\n    }\r\n\r\n    // Clone the element and remove the ID to prevent multiple elements from being added\r\n    // to the page with the same ID.\r\n    const iconElement = iconSource.cloneNode(true) as Element;\r\n    iconElement.id = '';\r\n\r\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\r\n    // the content of a new <svg> node.\r\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\r\n      return this._setSvgAttributes(iconElement as SVGElement);\r\n    }\r\n\r\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\r\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\r\n    // tag is problematic on Firefox, because it needs to include the current page path.\r\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\r\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\r\n    }\r\n\r\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\r\n    // the correct nodes, but the SVG content doesn't render. Instead we\r\n    // have to create an empty SVG node using innerHTML and append its content.\r\n    // Elements created using DOMParser.parseFromString have the same problem.\r\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\r\n    const svg = this._svgElementFromString('<svg></svg>');\r\n    // Clone the node so we don't remove it from the parent icon set element.\r\n    svg.appendChild(iconElement);\r\n\r\n    return this._setSvgAttributes(svg);\r\n  }\r\n\r\n  /**\r\n   * Creates a DOM element from the given SVG string.\r\n   */\r\n  private _svgElementFromString(str: string): SVGElement {\r\n    if (this._document || typeof document !== 'undefined') {\r\n      const div = (this._document || document).createElement('DIV');\r\n      div.innerHTML = str;\r\n      const svg = div.querySelector('svg') as SVGElement;\r\n      if (!svg) {\r\n        throw Error('<svg> tag not found');\r\n      }\r\n      return svg;\r\n    }\r\n\r\n    throw new Error('MatIconRegistry could not resolve document.');\r\n  }\r\n\r\n  /**\r\n   * Converts an element into an SVG node by cloning all of its children.\r\n   */\r\n  private _toSvgElement(element: Element): SVGElement {\r\n    let svg = this._svgElementFromString('<svg></svg>');\r\n\r\n    for (let i = 0; i < element.childNodes.length; i++) {\r\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\r\n        svg.appendChild(element.childNodes[i].cloneNode(true));\r\n      }\r\n    }\r\n\r\n    return svg;\r\n  }\r\n\r\n  /**\r\n   * Sets the default attributes for an SVG element to be used as an icon.\r\n   */\r\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\r\n    if (!svg.getAttribute('xmlns')) {\r\n      svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\r\n    }\r\n    svg.setAttribute('fit', '');\r\n    svg.setAttribute('height', '100%');\r\n    svg.setAttribute('width', '100%');\r\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\r\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\r\n    return svg;\r\n  }\r\n\r\n  /**\r\n   * Returns an Observable which produces the string contents of the given URL. Results may be\r\n   * cached, so future calls with the same URL may not cause another HTTP request.\r\n   */\r\n  private _fetchUrl(safeUrl: SafeResourceUrl): Observable<string> {\r\n    if (!this._httpClient) {\r\n      throw getMatIconNoHttpProviderError();\r\n    }\r\n\r\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\r\n\r\n    if (!url) {\r\n      throw getMatIconFailedToSanitizeError(safeUrl);\r\n    }\r\n\r\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\r\n    // already a request in progress for that URL. It's necessary to call share() on the\r\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\r\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\r\n\r\n    if (inProgressFetch) {\r\n      return inProgressFetch;\r\n    }\r\n\r\n    // TODO(jelbourn): for some reason, the `finally` operator \"loses\" the generic type on the\r\n    // Observable. Figure out why and fix it.\r\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\r\n      finalize(() => this._inProgressUrlFetches.delete(url)),\r\n      share(),\r\n    );\r\n\r\n    this._inProgressUrlFetches.set(url, req);\r\n    return req;\r\n  }\r\n}\r\n\r\n/** @docs-private */\r\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\r\n  parentRegistry: MatIconRegistry,\r\n  httpClient: HttpClient,\r\n  sanitizer: DomSanitizer,\r\n  document?: any) {\r\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\r\n}\r\n\r\n/** @docs-private */\r\nexport const ICON_REGISTRY_PROVIDER = {\r\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\r\n  provide: MatIconRegistry,\r\n  deps: [\r\n    [new Optional(), new SkipSelf(), MatIconRegistry],\r\n    [new Optional(), HttpClient],\r\n    DomSanitizer,\r\n    [new Optional(), DOCUMENT as InjectionToken<any>],\r\n  ],\r\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\r\n};\r\n\r\n/** Clones an SVGElement while preserving type information. */\r\nfunction cloneSvg(svg: SVGElement): SVGElement {\r\n  return svg.cloneNode(true) as SVGElement;\r\n}\r\n\r\n/** Returns the cache key to use for an icon namespace and name. */\r\nfunction iconKey(namespace: string, name: string) {\r\n  return namespace + ':' + name;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {take} from 'rxjs/operators/take';\r\nimport {\r\n  Attribute,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ElementRef,\r\n  Input,\r\n  OnChanges,\r\n  OnInit,\r\n  SimpleChanges,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {CanColor, mixinColor} from '@angular/material/core';\r\nimport {MatIconRegistry} from './icon-registry';\r\n\r\n\r\n// Boilerplate for applying mixins to MatIcon.\r\n/** @docs-private */\r\nexport class MatIconBase {\r\n  constructor(public _elementRef: ElementRef) {}\r\n}\r\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\r\n\r\n\r\n/**\r\n * Component to display an icon. It can be used in the following ways:\r\n *\r\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\r\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\r\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\r\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\r\n *   Examples:\r\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\r\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\r\n *\r\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\r\n *   component. By default the Material icons font is used as described at\r\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\r\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\r\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\r\n *   Examples:\r\n *     `<mat-icon>home</mat-icon>\r\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\r\n *\r\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\r\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\r\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\r\n *   https://fortawesome.github.io/Font-Awesome/examples/\r\n *   Example:\r\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  template: '<ng-content></ng-content>',\r\n  selector: 'mat-icon',\r\n  exportAs: 'matIcon',\r\n  styleUrls: ['icon.css'],\r\n  inputs: ['color'],\r\n  host: {\r\n    'role': 'img',\r\n    'class': 'mat-icon',\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\r\n\r\n  /** Name of the icon in the SVG icon set. */\r\n  @Input() svgIcon: string;\r\n\r\n  /** Font set that the icon is a part of. */\r\n  @Input()\r\n  get fontSet(): string { return this._fontSet; }\r\n  set fontSet(value: string) {\r\n    this._fontSet = this._cleanupFontValue(value);\r\n  }\r\n  private _fontSet: string;\r\n\r\n  /** Name of an icon within a font set. */\r\n  @Input()\r\n  get fontIcon(): string { return this._fontIcon; }\r\n  set fontIcon(value: string) {\r\n    this._fontIcon = this._cleanupFontValue(value);\r\n  }\r\n  private _fontIcon: string;\r\n\r\n  private _previousFontSetClass: string;\r\n  private _previousFontIconClass: string;\r\n\r\n  constructor(\r\n      elementRef: ElementRef,\r\n      private _iconRegistry: MatIconRegistry,\r\n      @Attribute('aria-hidden') ariaHidden: string) {\r\n    super(elementRef);\r\n\r\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\r\n    // the right thing to do for the majority of icon use-cases.\r\n    if (!ariaHidden) {\r\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Splits an svgIcon binding value into its icon set and icon name components.\r\n   * Returns a 2-element array of [(icon set), (icon name)].\r\n   * The separator for the two fields is ':'. If there is no separator, an empty\r\n   * string is returned for the icon set and the entire value is returned for\r\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\r\n   * Throws an error if the name contains two or more ':' separators.\r\n   * Examples:\r\n   *   `'social:cake' -> ['social', 'cake']\r\n   *   'penguin' -> ['', 'penguin']\r\n   *   null -> ['', '']\r\n   *   'a:b:c' -> (throws Error)`\r\n   */\r\n  private _splitIconName(iconName: string): [string, string] {\r\n    if (!iconName) {\r\n      return ['', ''];\r\n    }\r\n    const parts = iconName.split(':');\r\n    switch (parts.length) {\r\n      case 1: return ['', parts[0]]; // Use default namespace.\r\n      case 2: return <[string, string]>parts;\r\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\r\n    if (changes.svgIcon) {\r\n      if (this.svgIcon) {\r\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\r\n\r\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\r\n          svg => this._setSvgElement(svg),\r\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\r\n        );\r\n      } else {\r\n        this._clearSvgElement();\r\n      }\r\n    }\r\n\r\n    if (this._usingFontIcon()) {\r\n      this._updateFontIconClasses();\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\r\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\r\n    if (this._usingFontIcon()) {\r\n      this._updateFontIconClasses();\r\n    }\r\n  }\r\n\r\n  private _usingFontIcon(): boolean {\r\n    return !this.svgIcon;\r\n  }\r\n\r\n  private _setSvgElement(svg: SVGElement) {\r\n    this._clearSvgElement();\r\n    this._elementRef.nativeElement.appendChild(svg);\r\n  }\r\n\r\n  private _clearSvgElement() {\r\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\r\n    const childCount = layoutElement.childNodes.length;\r\n\r\n    // Remove existing child nodes and add the new SVG element. Note that we can't\r\n    // use innerHTML, because IE will throw if the element has a data binding.\r\n    for (let i = 0; i < childCount; i++) {\r\n      layoutElement.removeChild(layoutElement.childNodes[i]);\r\n    }\r\n  }\r\n\r\n  private _updateFontIconClasses() {\r\n    if (!this._usingFontIcon()) {\r\n      return;\r\n    }\r\n\r\n    const elem: HTMLElement = this._elementRef.nativeElement;\r\n    const fontSetClass = this.fontSet ?\r\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\r\n        this._iconRegistry.getDefaultFontSetClass();\r\n\r\n    if (fontSetClass != this._previousFontSetClass) {\r\n      if (this._previousFontSetClass) {\r\n        elem.classList.remove(this._previousFontSetClass);\r\n      }\r\n      if (fontSetClass) {\r\n        elem.classList.add(fontSetClass);\r\n      }\r\n      this._previousFontSetClass = fontSetClass;\r\n    }\r\n\r\n    if (this.fontIcon != this._previousFontIconClass) {\r\n      if (this._previousFontIconClass) {\r\n        elem.classList.remove(this._previousFontIconClass);\r\n      }\r\n      if (this.fontIcon) {\r\n        elem.classList.add(this.fontIcon);\r\n      }\r\n      this._previousFontIconClass = this.fontIcon;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cleans up a value to be used as a fontIcon or fontSet.\r\n   * Since the value ends up being assigned as a CSS class, we\r\n   * have to trim the value and omit space-separated values.\r\n   */\r\n  private _cleanupFontValue(value: string) {\r\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {MatCommonModule} from '@angular/material/core';\r\nimport {MatIcon} from './icon';\r\nimport {ICON_REGISTRY_PROVIDER} from './icon-registry';\r\n\r\n\r\n@NgModule({\r\n  imports: [MatCommonModule],\r\n  exports: [MatIcon, MatCommonModule],\r\n  declarations: [MatIcon],\r\n  providers: [ICON_REGISTRY_PROVIDER],\r\n})\r\nexport class MatIconModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {ESCAPE} from '@angular/cdk/keycodes';\r\nimport {\r\n  Overlay,\r\n  OverlayConfig,\r\n  OverlayRef,\r\n  PositionStrategy,\r\n  RepositionScrollStrategy,\r\n  ScrollStrategy,\r\n} from '@angular/cdk/overlay';\r\nimport {ComponentPortal} from '@angular/cdk/portal';\r\nimport {take} from 'rxjs/operators/take';\r\nimport {filter} from 'rxjs/operators/filter';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ComponentRef,\r\n  EventEmitter,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  ViewChild,\r\n  ViewContainerRef,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {DateAdapter} from '@angular/material/core';\r\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {merge} from 'rxjs/observable/merge';\r\nimport {MatCalendar} from './calendar';\r\nimport {createMissingDateImplError} from './datepicker-errors';\r\nimport {MatDatepickerInput} from './datepicker-input';\r\n\r\n\r\n/** Used to generate a unique ID for each datepicker instance. */\r\nlet datepickerUid = 0;\r\n\r\n/** Injection token that determines the scroll handling while the calendar is open. */\r\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\r\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\r\n\r\n/** @docs-private */\r\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\r\n    () => RepositionScrollStrategy {\r\n  return () => overlay.scrollStrategies.reposition();\r\n}\r\n\r\n/** @docs-private */\r\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER = {\r\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\r\n  deps: [Overlay],\r\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,\r\n};\r\n\r\n\r\n/**\r\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\r\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\r\n * place to put additional features of the popup that are not part of the calendar itself in the\r\n * future. (e.g. confirmation buttons).\r\n * @docs-private\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-datepicker-content',\r\n  templateUrl: 'datepicker-content.html',\r\n  styleUrls: ['datepicker-content.css'],\r\n  host: {\r\n    'class': 'mat-datepicker-content',\r\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\r\n  },\r\n  exportAs: 'matDatepickerContent',\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatDatepickerContent<D> implements AfterContentInit {\r\n  datepicker: MatDatepicker<D>;\r\n\r\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\r\n\r\n  ngAfterContentInit() {\r\n    this._calendar._focusActiveCell();\r\n  }\r\n}\r\n\r\n\r\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\r\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\r\n// if angular adds support for `exportAs: '$implicit'` on directives.\r\n/** Component responsible for managing the datepicker popup/dialog. */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-datepicker',\r\n  template: '',\r\n  exportAs: 'matDatepicker',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n})\r\nexport class MatDatepicker<D> implements OnDestroy {\r\n  /** The date to open the calendar to initially. */\r\n  @Input()\r\n  get startAt(): D | null {\r\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\r\n    // selected value is.\r\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\r\n  }\r\n  set startAt(value: D | null) {\r\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _startAt: D | null;\r\n\r\n  /** The view that the calendar should start in. */\r\n  @Input() startView: 'month' | 'year' = 'month';\r\n\r\n  /**\r\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\r\n   * than a popup and elements have more padding to allow for bigger touch targets.\r\n   */\r\n  @Input()\r\n  get touchUi(): boolean { return this._touchUi; }\r\n  set touchUi(value: boolean) {\r\n    this._touchUi = coerceBooleanProperty(value);\r\n  }\r\n  private _touchUi = false;\r\n\r\n  /** Whether the datepicker pop-up should be disabled. */\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return this._disabled === undefined && this._datepickerInput ?\r\n        this._datepickerInput.disabled : !!this._disabled;\r\n  }\r\n  set disabled(value: boolean) {\r\n    const newValue = coerceBooleanProperty(value);\r\n\r\n    if (newValue !== this._disabled) {\r\n      this._disabled = newValue;\r\n      this._disabledChange.next(newValue);\r\n    }\r\n  }\r\n  private _disabled: boolean;\r\n\r\n  /**\r\n   * Emits new selected date when selected date changes.\r\n   * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\r\n   * @deletion-target 6.0.0\r\n   */\r\n  @Output() readonly selectedChanged: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\r\n  @Input() panelClass: string | string[];\r\n\r\n  /** Emits when the datepicker has been opened. */\r\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /** Emits when the datepicker has been closed. */\r\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /** Whether the calendar is open. */\r\n  @Input()\r\n  get opened(): boolean { return this._opened; }\r\n  set opened(value: boolean) { value ? this.open() : this.close(); }\r\n  private _opened = false;\r\n\r\n  /** The id for the datepicker calendar. */\r\n  id: string = `mat-datepicker-${datepickerUid++}`;\r\n\r\n  /** The currently selected date. */\r\n  get _selected(): D | null { return this._validSelected; }\r\n  set _selected(value: D | null) { this._validSelected = value; }\r\n  private _validSelected: D | null = null;\r\n\r\n  /** The minimum selectable date. */\r\n  get _minDate(): D | null {\r\n    return this._datepickerInput && this._datepickerInput.min;\r\n  }\r\n\r\n  /** The maximum selectable date. */\r\n  get _maxDate(): D | null {\r\n    return this._datepickerInput && this._datepickerInput.max;\r\n  }\r\n\r\n  get _dateFilter(): (date: D | null) => boolean {\r\n    return this._datepickerInput && this._datepickerInput._dateFilter;\r\n  }\r\n\r\n  /** A reference to the overlay when the calendar is opened as a popup. */\r\n  private _popupRef: OverlayRef;\r\n\r\n  /** A reference to the dialog when the calendar is opened as a dialog. */\r\n  private _dialogRef: MatDialogRef<any> | null;\r\n\r\n  /** A portal containing the calendar for this datepicker. */\r\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\r\n\r\n  /** The element that was focused before the datepicker was opened. */\r\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\r\n\r\n  private _inputSubscription = Subscription.EMPTY;\r\n\r\n  /** The input element this datepicker is associated with. */\r\n  _datepickerInput: MatDatepickerInput<D>;\r\n\r\n  /** Emits when the datepicker is disabled. */\r\n  readonly _disabledChange = new Subject<boolean>();\r\n\r\n  constructor(private _dialog: MatDialog,\r\n              private _overlay: Overlay,\r\n              private _ngZone: NgZone,\r\n              private _viewContainerRef: ViewContainerRef,\r\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\r\n              @Optional() private _dateAdapter: DateAdapter<D>,\r\n              @Optional() private _dir: Directionality,\r\n              @Optional() @Inject(DOCUMENT) private _document: any) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('DateAdapter');\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.close();\r\n    this._inputSubscription.unsubscribe();\r\n    this._disabledChange.complete();\r\n\r\n    if (this._popupRef) {\r\n      this._popupRef.dispose();\r\n    }\r\n  }\r\n\r\n  /** Selects the given date */\r\n  _select(date: D): void {\r\n    let oldValue = this._selected;\r\n    this._selected = date;\r\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\r\n      this.selectedChanged.emit(date);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Register an input with this datepicker.\r\n   * @param input The datepicker input to register with this datepicker.\r\n   */\r\n  _registerInput(input: MatDatepickerInput<D>): void {\r\n    if (this._datepickerInput) {\r\n      throw Error('A MatDatepicker can only be associated with a single input.');\r\n    }\r\n    this._datepickerInput = input;\r\n    this._inputSubscription =\r\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\r\n  }\r\n\r\n  /** Open the calendar. */\r\n  open(): void {\r\n    if (this._opened || this.disabled) {\r\n      return;\r\n    }\r\n    if (!this._datepickerInput) {\r\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\r\n    }\r\n    if (this._document) {\r\n      this._focusedElementBeforeOpen = this._document.activeElement;\r\n    }\r\n\r\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\r\n    this._opened = true;\r\n    this.openedStream.emit();\r\n  }\r\n\r\n  /** Close the calendar. */\r\n  close(): void {\r\n    if (!this._opened) {\r\n      return;\r\n    }\r\n    if (this._popupRef && this._popupRef.hasAttached()) {\r\n      this._popupRef.detach();\r\n    }\r\n    if (this._dialogRef) {\r\n      this._dialogRef.close();\r\n      this._dialogRef = null;\r\n    }\r\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\r\n      this._calendarPortal.detach();\r\n    }\r\n\r\n    const completeClose = () => {\r\n      // The `_opened` could've been reset already if\r\n      // we got two events in quick succession.\r\n      if (this._opened) {\r\n        this._opened = false;\r\n        this.closedStream.emit();\r\n        this._focusedElementBeforeOpen = null;\r\n      }\r\n    };\r\n\r\n    if (this._focusedElementBeforeOpen &&\r\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\r\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\r\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\r\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\r\n      // able to close the calendar at all. We work around it by making the logic, that marks\r\n      // the datepicker as closed, async as well.\r\n      this._focusedElementBeforeOpen.focus();\r\n      setTimeout(completeClose);\r\n    } else {\r\n      completeClose();\r\n    }\r\n  }\r\n\r\n  /** Open the calendar as a dialog. */\r\n  private _openAsDialog(): void {\r\n    this._dialogRef = this._dialog.open(MatDatepickerContent, {\r\n      direction: this._dir ? this._dir.value : 'ltr',\r\n      viewContainerRef: this._viewContainerRef,\r\n      panelClass: 'mat-datepicker-dialog',\r\n    });\r\n    this._dialogRef.afterClosed().subscribe(() => this.close());\r\n    this._dialogRef.componentInstance.datepicker = this;\r\n  }\r\n\r\n  /** Open the calendar as a popup. */\r\n  private _openAsPopup(): void {\r\n    if (!this._calendarPortal) {\r\n      this._calendarPortal = new ComponentPortal(MatDatepickerContent, this._viewContainerRef);\r\n    }\r\n\r\n    if (!this._popupRef) {\r\n      this._createPopup();\r\n    }\r\n\r\n    if (!this._popupRef.hasAttached()) {\r\n      let componentRef: ComponentRef<MatDatepickerContent<D>> =\r\n          this._popupRef.attach(this._calendarPortal);\r\n      componentRef.instance.datepicker = this;\r\n\r\n      // Update the position once the calendar has rendered.\r\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\r\n        this._popupRef.updatePosition();\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Create the popup. */\r\n  private _createPopup(): void {\r\n    const overlayConfig = new OverlayConfig({\r\n      positionStrategy: this._createPopupPositionStrategy(),\r\n      hasBackdrop: true,\r\n      backdropClass: 'mat-overlay-transparent-backdrop',\r\n      direction: this._dir ? this._dir.value : 'ltr',\r\n      scrollStrategy: this._scrollStrategy(),\r\n      panelClass: 'mat-datepicker-popup',\r\n    });\r\n\r\n    this._popupRef = this._overlay.create(overlayConfig);\r\n\r\n    merge(\r\n      this._popupRef.backdropClick(),\r\n      this._popupRef.detachments(),\r\n      this._popupRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\r\n    ).subscribe(() => this.close());\r\n  }\r\n\r\n  /** Create the popup PositionStrategy. */\r\n  private _createPopupPositionStrategy(): PositionStrategy {\r\n    const fallbackOffset = this._datepickerInput._getPopupFallbackOffset();\r\n\r\n    return this._overlay.position()\r\n      .connectedTo(this._datepickerInput.getPopupConnectionElementRef(),\r\n        {originX: 'start', originY: 'bottom'},\r\n        {overlayX: 'start', overlayY: 'top'}\r\n      )\r\n      .withFallbackPosition(\r\n        {originX: 'start', originY: 'top'},\r\n        {overlayX: 'start', overlayY: 'bottom'},\r\n        undefined,\r\n        fallbackOffset\r\n      )\r\n      .withFallbackPosition(\r\n        {originX: 'end', originY: 'bottom'},\r\n        {overlayX: 'end', overlayY: 'top'}\r\n      )\r\n      .withFallbackPosition(\r\n        {originX: 'end', originY: 'top'},\r\n        {overlayX: 'end', overlayY: 'bottom'},\r\n        undefined,\r\n        fallbackOffset\r\n      );\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\r\nimport {\r\n  AfterContentInit,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Inject,\r\n  Input,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n} from '@angular/core';\r\nimport {\r\n  AbstractControl,\r\n  ControlValueAccessor,\r\n  NG_VALIDATORS,\r\n  NG_VALUE_ACCESSOR,\r\n  ValidationErrors,\r\n  Validator,\r\n  ValidatorFn,\r\n  Validators\r\n} from '@angular/forms';\r\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\r\nimport {MatFormField} from '@angular/material/form-field';\r\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {MatDatepicker} from './datepicker';\r\nimport {createMissingDateImplError} from './datepicker-errors';\r\n\r\n\r\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MatDatepickerInput),\r\n  multi: true\r\n};\r\n\r\n\r\nexport const MAT_DATEPICKER_VALIDATORS: any = {\r\n  provide: NG_VALIDATORS,\r\n  useExisting: forwardRef(() => MatDatepickerInput),\r\n  multi: true\r\n};\r\n\r\n\r\n/**\r\n * An event used for datepicker input and change events. We don't always have access to a native\r\n * input or change event because the event may have been triggered by the user clicking on the\r\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\r\n */\r\nexport class MatDatepickerInputEvent<D> {\r\n  /** The new value for the target datepicker input. */\r\n  value: D | null;\r\n\r\n  constructor(\r\n    /** Reference to the datepicker input component that emitted the event. */\r\n    public target: MatDatepickerInput<D>,\r\n    /** Reference to the native input element associated with the datepicker input. */\r\n    public targetElement: HTMLElement) {\r\n    this.value = this.target.value;\r\n  }\r\n}\r\n\r\n\r\n/** Directive used to connect an input to a MatDatepicker. */\r\n@Directive({\r\n  selector: 'input[matDatepicker]',\r\n  providers: [\r\n    MAT_DATEPICKER_VALUE_ACCESSOR,\r\n    MAT_DATEPICKER_VALIDATORS,\r\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\r\n  ],\r\n  host: {\r\n    '[attr.aria-haspopup]': 'true',\r\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\r\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\r\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\r\n    '[disabled]': 'disabled',\r\n    '(input)': '_onInput($event.target.value)',\r\n    '(change)': '_onChange()',\r\n    '(blur)': '_onTouched()',\r\n    '(keydown)': '_onKeydown($event)',\r\n  },\r\n  exportAs: 'matDatepickerInput',\r\n})\r\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\r\n    Validator {\r\n  /** The datepicker that this input is associated with. */\r\n  @Input()\r\n  set matDatepicker(value: MatDatepicker<D>) {\r\n    this.registerDatepicker(value);\r\n  }\r\n  _datepicker: MatDatepicker<D>;\r\n\r\n  private registerDatepicker(value: MatDatepicker<D>) {\r\n    if (value) {\r\n      this._datepicker = value;\r\n      this._datepicker._registerInput(this);\r\n    }\r\n  }\r\n\r\n  /** Function that can be used to filter out dates within the datepicker. */\r\n  @Input()\r\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\r\n    this._dateFilter = value;\r\n    this._validatorOnChange();\r\n  }\r\n  _dateFilter: (date: D | null) => boolean;\r\n\r\n  /** The value of the input. */\r\n  @Input()\r\n  get value(): D | null { return this._value; }\r\n  set value(value: D | null) {\r\n    value = this._dateAdapter.deserialize(value);\r\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\r\n    value = this._getValidDateOrNull(value);\r\n    let oldDate = this.value;\r\n    this._value = value;\r\n    this._elementRef.nativeElement.value =\r\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\r\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\r\n      this._valueChange.emit(value);\r\n    }\r\n  }\r\n  private _value: D | null;\r\n\r\n  /** The minimum valid date. */\r\n  @Input()\r\n  get min(): D | null { return this._min; }\r\n  set min(value: D | null) {\r\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    this._validatorOnChange();\r\n  }\r\n  private _min: D | null;\r\n\r\n  /** The maximum valid date. */\r\n  @Input()\r\n  get max(): D | null { return this._max; }\r\n  set max(value: D | null) {\r\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    this._validatorOnChange();\r\n  }\r\n  private _max: D | null;\r\n\r\n  /** Whether the datepicker-input is disabled. */\r\n  @Input()\r\n  get disabled(): boolean { return !!this._disabled; }\r\n  set disabled(value: boolean) {\r\n    const newValue = coerceBooleanProperty(value);\r\n\r\n    if (this._disabled !== newValue) {\r\n      this._disabled = newValue;\r\n      this._disabledChange.emit(newValue);\r\n    }\r\n\r\n    if (newValue) {\r\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\r\n      // is problematic, because it would mean that it triggers another change detection cycle,\r\n      // which then causes a changed after checked error if the input element was focused before.\r\n      this._elementRef.nativeElement.blur();\r\n    }\r\n  }\r\n  private _disabled: boolean;\r\n\r\n  /** Emits when a `change` event is fired on this `<input>`. */\r\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\r\n      new EventEmitter<MatDatepickerInputEvent<D>>();\r\n\r\n  /** Emits when an `input` event is fired on this `<input>`. */\r\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\r\n      new EventEmitter<MatDatepickerInputEvent<D>>();\r\n\r\n  /** Emits when the value changes (either due to user input or programmatic change). */\r\n  _valueChange = new EventEmitter<D | null>();\r\n\r\n  /** Emits when the disabled state has changed */\r\n  _disabledChange = new EventEmitter<boolean>();\r\n\r\n  _onTouched = () => {};\r\n\r\n  private _cvaOnChange: (value: any) => void = () => {};\r\n\r\n  private _validatorOnChange = () => {};\r\n\r\n  private _datepickerSubscription = Subscription.EMPTY;\r\n\r\n  private _localeSubscription = Subscription.EMPTY;\r\n\r\n  /** The form control validator for whether the input parses. */\r\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\r\n    return this._lastValueValid ?\r\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\r\n  }\r\n\r\n  /** The form control validator for the min date. */\r\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\r\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\r\n    return (!this.min || !controlValue ||\r\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\r\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\r\n  }\r\n\r\n  /** The form control validator for the max date. */\r\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\r\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\r\n    return (!this.max || !controlValue ||\r\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\r\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\r\n  }\r\n\r\n  /** The form control validator for the date filter. */\r\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\r\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\r\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\r\n        null : {'matDatepickerFilter': true};\r\n  }\r\n\r\n  /** The combined form control validator for this input. */\r\n  private _validator: ValidatorFn | null =\r\n      Validators.compose(\r\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\r\n\r\n  /** Whether the last value set on the input was valid. */\r\n  private _lastValueValid = false;\r\n\r\n  constructor(\r\n      private _elementRef: ElementRef,\r\n      @Optional() public _dateAdapter: DateAdapter<D>,\r\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\r\n      @Optional() private _formField: MatFormField) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('DateAdapter');\r\n    }\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\r\n    }\r\n\r\n    // Update the displayed date when the locale changes.\r\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\r\n      this.value = this.value;\r\n    });\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    if (this._datepicker) {\r\n      this._datepickerSubscription =\r\n          this._datepicker.selectedChanged.subscribe((selected: D) => {\r\n            this.value = selected;\r\n            this._cvaOnChange(selected);\r\n            this._onTouched();\r\n            this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\r\n            this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\r\n          });\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._datepickerSubscription.unsubscribe();\r\n    this._localeSubscription.unsubscribe();\r\n    this._valueChange.complete();\r\n    this._disabledChange.complete();\r\n  }\r\n\r\n  /** @docs-private */\r\n  registerOnValidatorChange(fn: () => void): void {\r\n    this._validatorOnChange = fn;\r\n  }\r\n\r\n  /** @docs-private */\r\n  validate(c: AbstractControl): ValidationErrors | null {\r\n    return this._validator ? this._validator(c) : null;\r\n  }\r\n\r\n  /**\r\n   * Gets the element that the datepicker popup should be connected to.\r\n   * @return The element to connect the popup to.\r\n   */\r\n  getPopupConnectionElementRef(): ElementRef {\r\n    return this._formField ? this._formField.underlineRef : this._elementRef;\r\n  }\r\n\r\n  /**\r\n   * Determines the offset to be used when the calendar goes into a fallback position.\r\n   * Primarily used to prevent the calendar from overlapping the input.\r\n   */\r\n  _getPopupFallbackOffset(): number {\r\n    return this._formField ? -this._formField._inputContainerRef.nativeElement.clientHeight : 0;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  writeValue(value: D): void {\r\n    this.value = value;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnChange(fn: (value: any) => void): void {\r\n    this._cvaOnChange = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnTouched(fn: () => void): void {\r\n    this._onTouched = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n  }\r\n\r\n  _onKeydown(event: KeyboardEvent) {\r\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\r\n      this._datepicker.open();\r\n      event.preventDefault();\r\n    }\r\n  }\r\n\r\n  _onInput(value: string) {\r\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\r\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\r\n    date = this._getValidDateOrNull(date);\r\n    this._value = date;\r\n    this._cvaOnChange(date);\r\n    this._valueChange.emit(date);\r\n    this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\r\n  }\r\n\r\n  _onChange() {\r\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  SimpleChanges,\r\n  ViewEncapsulation,\r\n  Directive,\r\n  ContentChild,\r\n} from '@angular/core';\r\nimport {merge} from 'rxjs/observable/merge';\r\nimport {of as observableOf} from 'rxjs/observable/of';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {MatDatepicker} from './datepicker';\r\nimport {MatDatepickerIntl} from './datepicker-intl';\r\n\r\n\r\n/** Can be used to override the icon of a `matDatepickerToggle`. */\r\n@Directive({\r\n  selector: '[matDatepickerToggleIcon]'\r\n})\r\nexport class MatDatepickerToggleIcon {}\r\n\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-datepicker-toggle',\r\n  templateUrl: 'datepicker-toggle.html',\r\n  styleUrls: ['datepicker-toggle.css'],\r\n  host: {\r\n    'class': 'mat-datepicker-toggle',\r\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\r\n  },\r\n  exportAs: 'matDatepickerToggle',\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\r\n  private _stateChanges = Subscription.EMPTY;\r\n\r\n  /** Datepicker instance that the button will toggle. */\r\n  @Input('for') datepicker: MatDatepicker<D>;\r\n\r\n  /** Whether the toggle button is disabled. */\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\r\n  }\r\n  set disabled(value: boolean) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n  }\r\n  private _disabled: boolean;\r\n\r\n  /** Custom icon set by the consumer. */\r\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\r\n\r\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.datepicker) {\r\n      this._watchStateChanges();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._stateChanges.unsubscribe();\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._watchStateChanges();\r\n  }\r\n\r\n  _open(event: Event): void {\r\n    if (this.datepicker && !this.disabled) {\r\n      this.datepicker.open();\r\n      event.stopPropagation();\r\n    }\r\n  }\r\n\r\n  private _watchStateChanges() {\r\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\r\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\r\n        this.datepicker._datepickerInput._disabledChange : observableOf();\r\n    const datepickerToggled = this.datepicker ?\r\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\r\n        observableOf();\r\n\r\n    this._stateChanges.unsubscribe();\r\n    this._stateChanges = merge(\r\n      this._intl.changes,\r\n      datepickerDisabled,\r\n      inputDisabled,\r\n      datepickerToggled\r\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {A11yModule} from '@angular/cdk/a11y';\r\nimport {OverlayModule} from '@angular/cdk/overlay';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {MatButtonModule} from '@angular/material/button';\r\nimport {MatDialogModule} from '@angular/material/dialog';\r\nimport {MatCalendar} from './calendar';\r\nimport {MatCalendarBody} from './calendar-body';\r\nimport {\r\n  MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\r\n  MatDatepicker,\r\n  MatDatepickerContent,\r\n} from './datepicker';\r\nimport {MatDatepickerInput} from './datepicker-input';\r\nimport {MatDatepickerIntl} from './datepicker-intl';\r\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\r\nimport {MatMonthView} from './month-view';\r\nimport {MatMultiYearView} from './multi-year-view';\r\nimport {MatYearView} from './year-view';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatButtonModule,\r\n    MatDialogModule,\r\n    OverlayModule,\r\n    A11yModule,\r\n  ],\r\n  exports: [\r\n    MatCalendar,\r\n    MatCalendarBody,\r\n    MatDatepicker,\r\n    MatDatepickerContent,\r\n    MatDatepickerInput,\r\n    MatDatepickerToggle,\r\n    MatDatepickerToggleIcon,\r\n    MatMonthView,\r\n    MatYearView,\r\n    MatMultiYearView,\r\n  ],\r\n  declarations: [\r\n    MatCalendar,\r\n    MatCalendarBody,\r\n    MatDatepicker,\r\n    MatDatepickerContent,\r\n    MatDatepickerInput,\r\n    MatDatepickerToggle,\r\n    MatDatepickerToggleIcon,\r\n    MatMonthView,\r\n    MatYearView,\r\n    MatMultiYearView,\r\n  ],\r\n  providers: [\r\n    MatDatepickerIntl,\r\n    MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\r\n  ],\r\n  entryComponents: [\r\n    MatDatepickerContent,\r\n  ]\r\n})\r\nexport class MatDatepickerModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-divider',\r\n  host: {\r\n    'role': 'separator',\r\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\r\n    '[class.mat-divider-vertical]': 'vertical',\r\n    '[class.mat-divider-inset]': 'inset',\r\n    'class': 'mat-divider'\r\n  },\r\n  template: '',\r\n  styleUrls: ['divider.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  preserveWhitespaces: false,\r\n})\r\nexport class MatDivider {\r\n  /** Whether the divider is vertically aligned. */\r\n  @Input()\r\n  get vertical(): boolean { return this._vertical; }\r\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\r\n  private _vertical: boolean = false;\r\n\r\n  /** Whether the divider is an inset divider. */\r\n  @Input()\r\n  get inset(): boolean { return this._inset; }\r\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\r\n  private _inset: boolean = false;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {MatCommonModule} from '@angular/material/core';\r\nimport {MatDivider} from './divider';\r\n\r\n\r\n@NgModule({\r\n  imports: [MatCommonModule, CommonModule],\r\n  exports: [\r\n    MatDivider,\r\n    MatCommonModule,\r\n  ],\r\n  declarations: [\r\n    MatDivider,\r\n  ],\r\n})\r\nexport class MatDividerModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, Input} from '@angular/core';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {CdkAccordion} from '@angular/cdk/accordion';\r\n\r\n/** MatAccordion's display modes. */\r\nexport type MatAccordionDisplayMode = 'default' | 'flat';\r\n\r\n/**\r\n * Directive for a Material Design Accordion.\r\n */\r\n@Directive({\r\n  selector: 'mat-accordion',\r\n  exportAs: 'matAccordion',\r\n  host: {\r\n    class: 'mat-accordion'\r\n  }\r\n})\r\nexport class MatAccordion extends CdkAccordion {\r\n  /** Whether the expansion indicator should be hidden. */\r\n  @Input()\r\n  get hideToggle(): boolean { return this._hideToggle; }\r\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\r\n  private _hideToggle: boolean = false;\r\n\r\n  /**\r\n   * The display mode used for all expansion panels in the accordion. Currently two display\r\n   * modes exist:\r\n   *   default - a gutter-like spacing is placed around any expanded panel, placing the expanded\r\n   *     panel at a different elevation from the reset of the accordion.\r\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\r\n   *     elevation.\r\n   */\r\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, TemplateRef} from '@angular/core';\r\n\r\n/**\r\n * Expansion panel content that will be rendered lazily\r\n * after the panel is opened for the first time.\r\n */\r\n@Directive({\r\n  selector: 'ng-template[matExpansionPanelContent]'\r\n})\r\nexport class MatExpansionPanelContent {\r\n  constructor(public _template: TemplateRef<any>) {}\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {AnimationEvent} from '@angular/animations';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Directive,\r\n  Host,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Optional,\r\n  SimpleChanges,\r\n  ViewEncapsulation,\r\n  ViewContainerRef,\r\n  AfterContentInit,\r\n  ContentChild,\r\n} from '@angular/core';\r\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\r\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\r\nimport {TemplatePortal} from '@angular/cdk/portal';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {take} from 'rxjs/operators/take';\r\nimport {filter} from 'rxjs/operators/filter';\r\nimport {startWith} from 'rxjs/operators/startWith';\r\nimport {MatAccordion} from './accordion';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {MatExpansionPanelContent} from './expansion-panel-content';\r\nimport {matExpansionAnimations} from './expansion-animations';\r\n\r\n/** MatExpansionPanel's states. */\r\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\r\n\r\n/** Counter for generating unique element ids. */\r\nlet uniqueId = 0;\r\n\r\n/**\r\n * `<mat-expansion-panel>`\r\n *\r\n * This component can be used as a single element to show expandable content, or as one of\r\n * multiple children of an element with the MdAccordion directive attached.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  styleUrls: ['./expansion-panel.css'],\r\n  selector: 'mat-expansion-panel',\r\n  exportAs: 'matExpansionPanel',\r\n  templateUrl: './expansion-panel.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  inputs: ['disabled', 'expanded'],\r\n  outputs: ['opened', 'closed', 'expandedChange'],\r\n  animations: [matExpansionAnimations.bodyExpansion],\r\n  host: {\r\n    'class': 'mat-expansion-panel',\r\n    '[class.mat-expanded]': 'expanded',\r\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\r\n  }\r\n})\r\nexport class MatExpansionPanel extends CdkAccordionItem\r\n    implements AfterContentInit, OnChanges, OnDestroy {\r\n  /** Whether the toggle indicator should be hidden. */\r\n  @Input()\r\n  get hideToggle(): boolean { return this._hideToggle; }\r\n  set hideToggle(value: boolean) {\r\n    this._hideToggle = coerceBooleanProperty(value);\r\n  }\r\n  private _hideToggle = false;\r\n\r\n  /** Stream that emits for changes in `@Input` properties. */\r\n  readonly _inputChanges = new Subject<SimpleChanges>();\r\n\r\n  /** Optionally defined accordion the expansion panel belongs to. */\r\n  accordion: MatAccordion;\r\n\r\n  /** Content that will be rendered lazily. */\r\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\r\n\r\n  /** Portal holding the user's content. */\r\n  _portal: TemplatePortal;\r\n\r\n  /** ID for the associated header element. Used for a11y labelling. */\r\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\r\n\r\n  constructor(@Optional() @Host() accordion: MatAccordion,\r\n              _changeDetectorRef: ChangeDetectorRef,\r\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\r\n              private _viewContainerRef: ViewContainerRef) {\r\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\r\n    this.accordion = accordion;\r\n  }\r\n\r\n  /** Whether the expansion indicator should be hidden. */\r\n  _getHideToggle(): boolean {\r\n    if (this.accordion) {\r\n      return this.accordion.hideToggle;\r\n    }\r\n    return this.hideToggle;\r\n  }\r\n\r\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\r\n  _hasSpacing(): boolean {\r\n    if (this.accordion) {\r\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Gets the expanded state string. */\r\n  _getExpandedState(): MatExpansionPanelState {\r\n    return this.expanded ? 'expanded' : 'collapsed';\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    if (this._lazyContent) {\r\n      // Render the content as soon as the panel becomes open.\r\n      this.opened.pipe(\r\n        startWith(null!),\r\n        filter(() => this.expanded && !this._portal),\r\n        take(1)\r\n      ).subscribe(() => {\r\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\r\n      });\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    this._inputChanges.next(changes);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    super.ngOnDestroy();\r\n    this._inputChanges.complete();\r\n  }\r\n\r\n  _bodyAnimation(event: AnimationEvent) {\r\n    const classList = event.element.classList;\r\n    const cssClass = 'mat-expanded';\r\n    const {phaseName, toState} = event;\r\n\r\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\r\n    // order to prevent the cases where switching too early would cause the animation to jump.\r\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\r\n    // with doing it via change detection.\r\n    if (phaseName === 'done' && toState === 'expanded') {\r\n      classList.add(cssClass);\r\n    } else if (phaseName === 'start' && toState === 'collapsed') {\r\n      classList.remove(cssClass);\r\n    }\r\n  }\r\n}\r\n\r\n@Directive({\r\n  selector: 'mat-action-row',\r\n  host: {\r\n    class: 'mat-action-row'\r\n  }\r\n})\r\nexport class MatExpansionPanelActionRow {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FocusMonitor} from '@angular/cdk/a11y';\r\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\r\nimport {filter} from 'rxjs/operators/filter';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Directive,\r\n  ElementRef,\r\n  Host,\r\n  Input,\r\n  OnDestroy,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {merge} from 'rxjs/observable/merge';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {MatExpansionPanel} from './expansion-panel';\r\nimport {matExpansionAnimations} from './expansion-animations';\r\n\r\n\r\n/**\r\n * `<mat-expansion-panel-header>`\r\n *\r\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-expansion-panel-header',\r\n  styleUrls: ['./expansion-panel-header.css'],\r\n  templateUrl: './expansion-panel-header.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    matExpansionAnimations.indicatorRotate,\r\n    matExpansionAnimations.expansionHeaderHeight\r\n  ],\r\n  host: {\r\n    'class': 'mat-expansion-panel-header',\r\n    'role': 'button',\r\n    '[attr.id]': 'panel._headerId',\r\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\r\n    '[attr.aria-controls]': '_getPanelId()',\r\n    '[attr.aria-expanded]': '_isExpanded()',\r\n    '[attr.aria-disabled]': 'panel.disabled',\r\n    '[class.mat-expanded]': '_isExpanded()',\r\n    '(click)': '_toggle()',\r\n    '(keydown)': '_keydown($event)',\r\n    '[@expansionHeight]': `{\r\n        value: _getExpandedState(),\r\n        params: {\r\n          collapsedHeight: collapsedHeight,\r\n          expandedHeight: expandedHeight\r\n        }\r\n    }`,\r\n  },\r\n})\r\nexport class MatExpansionPanelHeader implements OnDestroy {\r\n  private _parentChangeSubscription = Subscription.EMPTY;\r\n\r\n  constructor(\r\n    @Host() public panel: MatExpansionPanel,\r\n    private _element: ElementRef,\r\n    private _focusMonitor: FocusMonitor,\r\n    private _changeDetectorRef: ChangeDetectorRef) {\r\n\r\n    // Since the toggle state depends on an @Input on the panel, we\r\n    // need to  subscribe and trigger change detection manually.\r\n    this._parentChangeSubscription = merge(\r\n      panel.opened,\r\n      panel.closed,\r\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\r\n    )\r\n    .subscribe(() => this._changeDetectorRef.markForCheck());\r\n\r\n    _focusMonitor.monitor(_element.nativeElement);\r\n  }\r\n\r\n  /** Height of the header while the panel is expanded. */\r\n  @Input() expandedHeight: string;\r\n\r\n  /** Height of the header while the panel is collapsed. */\r\n  @Input() collapsedHeight: string;\r\n\r\n  /** Toggles the expanded state of the panel. */\r\n  _toggle(): void {\r\n    this.panel.toggle();\r\n  }\r\n\r\n  /** Gets whether the panel is expanded. */\r\n  _isExpanded(): boolean {\r\n    return this.panel.expanded;\r\n  }\r\n\r\n  /** Gets the expanded state string of the panel. */\r\n  _getExpandedState(): string {\r\n    return this.panel._getExpandedState();\r\n  }\r\n\r\n  /** Gets the panel id. */\r\n  _getPanelId(): string {\r\n    return this.panel.id;\r\n  }\r\n\r\n  /** Gets whether the expand indicator should be shown. */\r\n  _showToggle(): boolean {\r\n    return !this.panel.hideToggle && !this.panel.disabled;\r\n  }\r\n\r\n  /** Handle keydown event calling to toggle() if appropriate. */\r\n  _keydown(event: KeyboardEvent) {\r\n    switch (event.keyCode) {\r\n      // Toggle for space and enter keys.\r\n      case SPACE:\r\n      case ENTER:\r\n        event.preventDefault();\r\n        this._toggle();\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._parentChangeSubscription.unsubscribe();\r\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\r\n  }\r\n}\r\n\r\n/**\r\n * `<mat-panel-description>`\r\n *\r\n * This direction is to be used inside of the MatExpansionPanelHeader component.\r\n */\r\n@Directive({\r\n  selector: 'mat-panel-description',\r\n  host : {\r\n    class: 'mat-expansion-panel-header-description'\r\n  }\r\n})\r\nexport class MatExpansionPanelDescription {}\r\n\r\n/**\r\n * `<mat-panel-title>`\r\n *\r\n * This direction is to be used inside of the MatExpansionPanelHeader component.\r\n */\r\n@Directive({\r\n  selector: 'mat-panel-title',\r\n  host : {\r\n    class: 'mat-expansion-panel-header-title'\r\n  }\r\n})\r\nexport class MatExpansionPanelTitle {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\r\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\r\nimport {A11yModule} from '@angular/cdk/a11y';\r\nimport {PortalModule} from '@angular/cdk/portal';\r\nimport {MatAccordion} from './accordion';\r\nimport {MatExpansionPanelContent} from './expansion-panel-content';\r\nimport {\r\n  MatExpansionPanel,\r\n  MatExpansionPanelActionRow\r\n} from './expansion-panel';\r\nimport {\r\n  MatExpansionPanelDescription,\r\n  MatExpansionPanelHeader,\r\n  MatExpansionPanelTitle,\r\n} from './expansion-panel-header';\r\n\r\n\r\n@NgModule({\r\n  imports: [CommonModule, A11yModule, CdkAccordionModule, PortalModule],\r\n  exports: [\r\n    MatAccordion,\r\n    MatExpansionPanel,\r\n    MatExpansionPanelActionRow,\r\n    MatExpansionPanelHeader,\r\n    MatExpansionPanelTitle,\r\n    MatExpansionPanelDescription,\r\n    MatExpansionPanelContent,\r\n  ],\r\n  declarations: [\r\n    MatAccordion,\r\n    MatExpansionPanel,\r\n    MatExpansionPanelActionRow,\r\n    MatExpansionPanelHeader,\r\n    MatExpansionPanelTitle,\r\n    MatExpansionPanelDescription,\r\n    MatExpansionPanelContent,\r\n  ],\r\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\r\n})\r\nexport class MatExpansionModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  Component,\r\n  ViewEncapsulation,\r\n  ElementRef,\r\n  Input,\r\n  ContentChildren,\r\n  QueryList,\r\n  AfterContentInit,\r\n  Directive,\r\n  ChangeDetectionStrategy,\r\n} from '@angular/core';\r\nimport {MatLine, MatLineSetter} from '@angular/material/core';\r\nimport {coerceToNumber} from './grid-list-measure';\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-grid-tile',\r\n  exportAs: 'matGridTile',\r\n  host: {\r\n    'class': 'mat-grid-tile',\r\n  },\r\n  templateUrl: 'grid-tile.html',\r\n  styleUrls: ['grid-list.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatGridTile {\r\n  _rowspan: number = 1;\r\n  _colspan: number = 1;\r\n\r\n  constructor(private _element: ElementRef) {}\r\n\r\n  /** Amount of rows that the grid tile takes up. */\r\n  @Input()\r\n  get rowspan(): number { return this._rowspan; }\r\n  set rowspan(value: number) { this._rowspan = coerceToNumber(value); }\r\n\r\n  /** Amount of columns that the grid tile takes up. */\r\n  @Input()\r\n  get colspan(): number { return this._colspan; }\r\n  set colspan(value: number) { this._colspan = coerceToNumber(value); }\r\n\r\n  /**\r\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\r\n   * \"Changed after checked\" errors that would occur with HostBinding.\r\n   */\r\n  _setStyle(property: string, value: any): void {\r\n    this._element.nativeElement.style[property] = value;\r\n  }\r\n}\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\r\n  templateUrl: 'grid-tile-text.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n})\r\nexport class MatGridTileText implements AfterContentInit {\r\n  /**\r\n   *  Helper that watches the number of lines in a text area and sets\r\n   * a class on the host element that matches the line count.\r\n   */\r\n  _lineSetter: MatLineSetter;\r\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\r\n\r\n  constructor(private _element: ElementRef) {}\r\n\r\n  ngAfterContentInit() {\r\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\r\n  }\r\n}\r\n\r\n/**\r\n * Directive whose purpose is to add the mat- CSS styling to this selector.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: '[mat-grid-avatar], [matGridAvatar]',\r\n  host: {'class': 'mat-grid-avatar'}\r\n})\r\nexport class MatGridAvatarCssMatStyler {}\r\n\r\n/**\r\n * Directive whose purpose is to add the mat- CSS styling to this selector.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: 'mat-grid-tile-header',\r\n  host: {'class': 'mat-grid-tile-header'}\r\n})\r\nexport class MatGridTileHeaderCssMatStyler {}\r\n\r\n/**\r\n * Directive whose purpose is to add the mat- CSS styling to this selector.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: 'mat-grid-tile-footer',\r\n  host: {'class': 'mat-grid-tile-footer'}\r\n})\r\nexport class MatGridTileFooterCssMatStyler {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {QueryList} from '@angular/core';\r\nimport {MatGridTile} from './grid-tile';\r\n\r\n/**\r\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\r\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\r\n * because the tiles can have a rowspan.\r\n *\r\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\r\n * large enough to accommodate it so that the tiles still render in the same order in which they\r\n * are given.\r\n *\r\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\r\n * element of the array corresponds to a column, and the value indicates how many cells in that\r\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\r\n * decrements each value in the tracking array (indicating that the column is one cell closer to\r\n * being free).\r\n *\r\n * @docs-private\r\n */\r\nexport class TileCoordinator {\r\n  /** Tracking array (see class description). */\r\n  tracker: number[];\r\n\r\n  /** Index at which the search for the next gap will start. */\r\n  columnIndex: number = 0;\r\n\r\n  /** The current row index. */\r\n  rowIndex: number = 0;\r\n\r\n  /** Gets the total number of rows occupied by tiles */\r\n  get rowCount(): number { return this.rowIndex + 1; }\r\n\r\n  /**\r\n   * Gets the total span of rows occupied by tiles.\r\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\r\n   */\r\n  get rowspan() {\r\n    let lastRowMax = Math.max(...this.tracker);\r\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\r\n    // add the difference to the rowcount\r\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\r\n  }\r\n\r\n  /** The computed (row, col) position of each tile (the output). */\r\n  positions: TilePosition[];\r\n\r\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\r\n    this.tracker = new Array(numColumns);\r\n    this.tracker.fill(0, 0, this.tracker.length);\r\n\r\n    this.positions = tiles.map(tile => this._trackTile(tile));\r\n  }\r\n\r\n  /** Calculates the row and col position of a tile. */\r\n  private _trackTile(tile: MatGridTile): TilePosition {\r\n    // Find a gap large enough for this tile.\r\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\r\n\r\n    // Place tile in the resulting gap.\r\n    this._markTilePosition(gapStartIndex, tile);\r\n\r\n    // The next time we look for a gap, the search will start at columnIndex, which should be\r\n    // immediately after the tile that has just been placed.\r\n    this.columnIndex = gapStartIndex + tile.colspan;\r\n\r\n    return new TilePosition(this.rowIndex, gapStartIndex);\r\n  }\r\n\r\n  /** Finds the next available space large enough to fit the tile. */\r\n  private _findMatchingGap(tileCols: number): number {\r\n    if (tileCols > this.tracker.length) {\r\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\r\n                      `grid with cols=\"${this.tracker.length}\".`);\r\n    }\r\n\r\n    // Start index is inclusive, end index is exclusive.\r\n    let gapStartIndex = -1;\r\n    let gapEndIndex = -1;\r\n\r\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\r\n    do {\r\n      // If we've reached the end of the row, go to the next row.\r\n      if (this.columnIndex + tileCols > this.tracker.length) {\r\n        this._nextRow();\r\n        continue;\r\n      }\r\n\r\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\r\n\r\n      // If there are no more empty spaces in this row at all, move on to the next row.\r\n      if (gapStartIndex == -1) {\r\n        this._nextRow();\r\n        continue;\r\n      }\r\n\r\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\r\n\r\n      // If a gap large enough isn't found, we want to start looking immediately after the current\r\n      // gap on the next iteration.\r\n      this.columnIndex = gapStartIndex + 1;\r\n\r\n      // Continue iterating until we find a gap wide enough for this tile.\r\n    } while (gapEndIndex - gapStartIndex < tileCols);\r\n\r\n    // If we still didn't manage to find a gap, ensure that the index is\r\n    // at least zero so the tile doesn't get pulled out of the grid.\r\n    return Math.max(gapStartIndex, 0);\r\n  }\r\n\r\n  /** Move \"down\" to the next row. */\r\n  private _nextRow(): void {\r\n    this.columnIndex = 0;\r\n    this.rowIndex++;\r\n\r\n    // Decrement all spaces by one to reflect moving down one row.\r\n    for (let i = 0; i < this.tracker.length; i++) {\r\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\r\n   * The gap ends when a non-zero value is found.\r\n   */\r\n  private _findGapEndIndex(gapStartIndex: number): number {\r\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\r\n      if (this.tracker[i] != 0) {\r\n        return i;\r\n      }\r\n    }\r\n\r\n    // The gap ends with the end of the row.\r\n    return this.tracker.length;\r\n  }\r\n\r\n  /** Update the tile tracker to account for the given tile in the given space. */\r\n  private _markTilePosition(start: number, tile: MatGridTile): void {\r\n    for (let i = 0; i < tile.colspan; i++) {\r\n      this.tracker[start + i] = tile.rowspan;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Simple data structure for tile position (row, col).\r\n * @docs-private\r\n */\r\nexport class TilePosition {\r\n  constructor(public row: number, public col: number) {}\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {MatGridList} from './grid-list';\r\nimport {MatGridTile} from './grid-tile';\r\nimport {TileCoordinator} from './tile-coordinator';\r\n\r\n/**\r\n * Sets the style properties for an individual tile, given the position calculated by the\r\n * Tile Coordinator.\r\n * @docs-private\r\n */\r\nexport abstract class TileStyler {\r\n  _gutterSize: string;\r\n  _rows: number = 0;\r\n  _rowspan: number = 0;\r\n  _cols: number;\r\n  _direction: string;\r\n\r\n  /**\r\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\r\n   * because these properties haven't been calculated by that point.\r\n   *\r\n   * @param gutterSize Size of the grid's gutter.\r\n   * @param tracker Instance of the TileCoordinator.\r\n   * @param cols Amount of columns in the grid.\r\n   * @param direction Layout direction of the grid.\r\n   */\r\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\r\n    this._gutterSize = normalizeUnits(gutterSize);\r\n    this._rows = tracker.rowCount;\r\n    this._rowspan = tracker.rowspan;\r\n    this._cols = cols;\r\n    this._direction = direction;\r\n  }\r\n\r\n  /**\r\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\r\n   * Used as a basis for other calculations.\r\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\r\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\r\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\r\n   */\r\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\r\n    // Take the base size percent (as would be if evenly dividing the size between cells),\r\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\r\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\r\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\r\n    // edge evenly among the cells).\r\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\r\n  }\r\n\r\n\r\n  /**\r\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\r\n   * @param offset Number of tiles that have already been rendered in the row/column.\r\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\r\n   * @return Position of the tile as a CSS calc() expression.\r\n   */\r\n  getTilePosition(baseSize: string, offset: number): string {\r\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\r\n    // row/column (offset).\r\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\r\n  }\r\n\r\n\r\n  /**\r\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\r\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\r\n   * @param span The tile's rowspan or colspan.\r\n   * @return Size of the tile as a CSS calc() expression.\r\n   */\r\n  getTileSize(baseSize: string, span: number): string {\r\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\r\n  }\r\n\r\n\r\n  /**\r\n   * Sets the style properties to be applied to a tile for the given row and column index.\r\n   * @param tile Tile to which to apply the styling.\r\n   * @param rowIndex Index of the tile's row.\r\n   * @param colIndex Index of the tile's column.\r\n   */\r\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\r\n    // Percent of the available horizontal space that one column takes up.\r\n    let percentWidthPerTile = 100 / this._cols;\r\n\r\n    // Fraction of the vertical gutter size that each column takes up.\r\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\r\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\r\n\r\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\r\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\r\n  }\r\n\r\n  /** Sets the horizontal placement of the tile in the list. */\r\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\r\n               gutterWidth: number) {\r\n    // Base horizontal size of a column.\r\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\r\n\r\n    // The width and horizontal position of each tile is always calculated the same way, but the\r\n    // height and vertical position depends on the rowMode.\r\n    let side = this._direction === 'rtl' ? 'right' : 'left';\r\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\r\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\r\n  }\r\n\r\n  /**\r\n   * Calculates the total size taken up by gutters across one axis of a list.\r\n   */\r\n  getGutterSpan(): string {\r\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\r\n  }\r\n\r\n  /**\r\n   * Calculates the total size taken up by tiles across one axis of a list.\r\n   * @param tileHeight Height of the tile.\r\n   */\r\n  getTileSpan(tileHeight: string): string {\r\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\r\n  }\r\n\r\n  /**\r\n   * Sets the vertical placement of the tile in the list.\r\n   * This method will be implemented by each type of TileStyler.\r\n   * @docs-private\r\n   */\r\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\r\n                        gutterWidth: number);\r\n\r\n  /**\r\n   * Calculates the computed height and returns the correct style property to set.\r\n   * This method can be implemented by each type of TileStyler.\r\n   * @docs-private\r\n   */\r\n  getComputedHeight(): [string, string] | null { return null; }\r\n\r\n  /**\r\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\r\n   * @param list Grid list that the styler was attached to.\r\n   * @docs-private\r\n   */\r\n  abstract reset(list: MatGridList);\r\n}\r\n\r\n\r\n/**\r\n * This type of styler is instantiated when the user passes in a fixed row height.\r\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\r\n * @docs-private\r\n */\r\nexport class FixedTileStyler extends TileStyler {\r\n\r\n  constructor(public fixedRowHeight: string) { super(); }\r\n\r\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\r\n    super.init(gutterSize, tracker, cols, direction);\r\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\r\n  }\r\n\r\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\r\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\r\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\r\n  }\r\n\r\n  getComputedHeight(): [string, string] {\r\n    return [\r\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\r\n    ];\r\n  }\r\n\r\n  reset(list: MatGridList) {\r\n    list._setListStyle(['height', null]);\r\n\r\n    list._tiles.forEach(tile => {\r\n      tile._setStyle('top', null);\r\n      tile._setStyle('height', null);\r\n    });\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * This type of styler is instantiated when the user passes in a width:height ratio\r\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\r\n * @docs-private\r\n */\r\nexport class RatioTileStyler extends TileStyler {\r\n\r\n  /** Ratio width:height given by user to determine row height. */\r\n  rowHeightRatio: number;\r\n  baseTileHeight: string;\r\n\r\n  constructor(value: string) {\r\n    super();\r\n    this._parseRatio(value);\r\n  }\r\n\r\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\r\n               gutterWidth: number): void {\r\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\r\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\r\n\r\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\r\n    // a percentage-based value for these properties is applied versus the *width* of the\r\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\r\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\r\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\r\n  }\r\n\r\n  getComputedHeight(): [string, string] {\r\n    return [\r\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\r\n    ];\r\n  }\r\n\r\n  reset(list: MatGridList) {\r\n    list._setListStyle(['paddingBottom', null]);\r\n\r\n    list._tiles.forEach(tile => {\r\n      tile._setStyle('marginTop', null);\r\n      tile._setStyle('paddingTop', null);\r\n    });\r\n  }\r\n\r\n  private _parseRatio(value: string): void {\r\n    const ratioParts = value.split(':');\r\n\r\n    if (ratioParts.length !== 2) {\r\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\r\n    }\r\n\r\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\r\n  }\r\n}\r\n\r\n/**\r\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\r\n * In other words, the row height will reflect the total height of the container divided\r\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\r\n *\r\n * @docs-private\r\n */\r\nexport class FitTileStyler extends TileStyler {\r\n\r\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\r\n    // Percent of the available vertical space that one row takes up.\r\n    let percentHeightPerTile = 100 / this._rowspan;\r\n\r\n    // Fraction of the horizontal gutter size that each column takes up.\r\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\r\n\r\n    // Base vertical size of a column.\r\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\r\n\r\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\r\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\r\n  }\r\n\r\n  reset(list: MatGridList) {\r\n    list._tiles.forEach(tile => {\r\n      tile._setStyle('top', null);\r\n      tile._setStyle('height', null);\r\n    });\r\n  }\r\n}\r\n\r\n\r\n/** Wraps a CSS string in a calc function */\r\nfunction calc(exp: string): string { return `calc(${exp})`; }\r\n\r\n\r\n/** Appends pixels to a CSS string if no units are given. */\r\nfunction normalizeUnits(value: string): string {\r\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\r\n}\r\n\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  Component,\r\n  ViewEncapsulation,\r\n  AfterContentChecked,\r\n  OnInit,\r\n  Input,\r\n  ContentChildren,\r\n  QueryList,\r\n  ElementRef,\r\n  Optional,\r\n  ChangeDetectionStrategy,\r\n} from '@angular/core';\r\nimport {MatGridTile} from './grid-tile';\r\nimport {TileCoordinator} from './tile-coordinator';\r\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {\r\n  coerceToString,\r\n  coerceToNumber,\r\n} from './grid-list-measure';\r\n\r\n\r\n// TODO(kara): Conditional (responsive) column count / row size.\r\n// TODO(kara): Re-layout on window resize / media change (debounced).\r\n// TODO(kara): gridTileHeader and gridTileFooter.\r\n\r\nconst MAT_FIT_MODE = 'fit';\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-grid-list',\r\n  exportAs: 'matGridList',\r\n  templateUrl: 'grid-list.html',\r\n  styleUrls: ['grid-list.css'],\r\n  host: {\r\n    'class': 'mat-grid-list',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n})\r\nexport class MatGridList implements OnInit, AfterContentChecked {\r\n  /** Number of columns being rendered. */\r\n  private _cols: number;\r\n\r\n  /**\r\n   * Row height value passed in by user. This can be one of three types:\r\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\r\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\r\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\r\n   */\r\n  private _rowHeight: string;\r\n\r\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\r\n  private _gutter: string = '1px';\r\n\r\n  /** Sets position and size styles for a tile */\r\n  private _tileStyler: TileStyler;\r\n\r\n  /** Query list of tiles that are being rendered. */\r\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\r\n\r\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\r\n\r\n  /** Amount of columns in the grid list. */\r\n  @Input()\r\n  get cols(): number { return this._cols; }\r\n  set cols(value: number) { this._cols = coerceToNumber(value); }\r\n\r\n  /** Size of the grid list's gutter in pixels. */\r\n  @Input()\r\n  get gutterSize(): string { return this._gutter; }\r\n  set gutterSize(value: string) { this._gutter = coerceToString(value); }\r\n\r\n  /** Set internal representation of row height from the user-provided value. */\r\n  @Input()\r\n  set rowHeight(value: string | number) {\r\n    const newValue = coerceToString(value);\r\n\r\n    if (newValue !== this._rowHeight) {\r\n      this._rowHeight = newValue;\r\n      this._setTileStyler(this._rowHeight);\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    this._checkCols();\r\n    this._checkRowHeight();\r\n  }\r\n\r\n  /**\r\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\r\n   * to run it frequently.\r\n   */\r\n  ngAfterContentChecked() {\r\n    this._layoutTiles();\r\n  }\r\n\r\n  /** Throw a friendly error if cols property is missing */\r\n  private _checkCols() {\r\n    if (!this.cols) {\r\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\r\n                  `Example: <mat-grid-list cols=\"3\">`);\r\n    }\r\n  }\r\n\r\n  /** Default to equal width:height if rowHeight property is missing */\r\n  private _checkRowHeight(): void {\r\n    if (!this._rowHeight) {\r\n      this._setTileStyler('1:1');\r\n    }\r\n  }\r\n\r\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\r\n  private _setTileStyler(rowHeight: string): void {\r\n    if (this._tileStyler) {\r\n      this._tileStyler.reset(this);\r\n    }\r\n\r\n    if (rowHeight === MAT_FIT_MODE) {\r\n      this._tileStyler = new FitTileStyler();\r\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\r\n      this._tileStyler = new RatioTileStyler(rowHeight);\r\n    } else {\r\n      this._tileStyler = new FixedTileStyler(rowHeight);\r\n    }\r\n  }\r\n\r\n  /** Computes and applies the size and position for all children grid tiles. */\r\n  private _layoutTiles(): void {\r\n    const tracker = new TileCoordinator(this.cols, this._tiles);\r\n    const direction = this._dir ? this._dir.value : 'ltr';\r\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\r\n\r\n    this._tiles.forEach((tile, index) => {\r\n      const pos = tracker.positions[index];\r\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\r\n    });\r\n\r\n    this._setListStyle(this._tileStyler.getComputedHeight());\r\n  }\r\n\r\n  /** Sets style on the main grid-list element, given the style name and value. */\r\n  _setListStyle(style: [string, string | null] | null): void {\r\n    if (style) {\r\n      this._element.nativeElement.style[style[0]] = style[1];\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\r\nimport {\r\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\r\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\r\n} from './grid-tile';\r\nimport {MatGridList} from './grid-list';\r\n\r\n\r\n@NgModule({\r\n  imports: [MatLineModule, MatCommonModule],\r\n  exports: [\r\n    MatGridList,\r\n    MatGridTile,\r\n    MatGridTileText,\r\n    MatLineModule,\r\n    MatCommonModule,\r\n    MatGridTileHeaderCssMatStyler,\r\n    MatGridTileFooterCssMatStyler,\r\n    MatGridAvatarCssMatStyler\r\n  ],\r\n  declarations: [\r\n    MatGridList,\r\n    MatGridTile,\r\n    MatGridTileText,\r\n    MatGridTileHeaderCssMatStyler,\r\n    MatGridTileFooterCssMatStyler,\r\n    MatGridAvatarCssMatStyler\r\n  ],\r\n})\r\nexport class MatGridListModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  Optional,\r\n  Output,\r\n  ViewEncapsulation,\r\n  ChangeDetectorRef,\r\n} from '@angular/core';\r\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\r\nimport {MatCalendarCell} from './calendar-body';\r\nimport {createMissingDateImplError} from './datepicker-errors';\r\n\r\n\r\nconst DAYS_PER_WEEK = 7;\r\n\r\n\r\n/**\r\n * An internal component used to display a single month in the datepicker.\r\n * @docs-private\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-month-view',\r\n  templateUrl: 'month-view.html',\r\n  exportAs: 'matMonthView',\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatMonthView<D> implements AfterContentInit {\r\n  /**\r\n   * The date to display in this month view (everything other than the month and year is ignored).\r\n   */\r\n  @Input()\r\n  get activeDate(): D { return this._activeDate; }\r\n  set activeDate(value: D) {\r\n    let oldActiveDate = this._activeDate;\r\n    this._activeDate =\r\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\r\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\r\n      this._init();\r\n    }\r\n  }\r\n  private _activeDate: D;\r\n\r\n  /** The currently selected date. */\r\n  @Input()\r\n  get selected(): D | null { return this._selected; }\r\n  set selected(value: D | null) {\r\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\r\n  }\r\n  private _selected: D | null;\r\n\r\n  /** The minimum selectable date. */\r\n  @Input()\r\n  get minDate(): D | null { return this._minDate; }\r\n  set minDate(value: D | null) {\r\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _minDate: D | null;\r\n\r\n  /** The maximum selectable date. */\r\n  @Input()\r\n  get maxDate(): D | null { return this._maxDate; }\r\n  set maxDate(value: D | null) {\r\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _maxDate: D | null;\r\n\r\n  /** A function used to filter which dates are selectable. */\r\n  @Input() dateFilter: (date: D) => boolean;\r\n\r\n  /** Emits when a new date is selected. */\r\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\r\n\r\n  /** Emits when any date is selected. */\r\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /** The label for this month (e.g. \"January 2017\"). */\r\n  _monthLabel: string;\r\n\r\n  /** Grid of calendar cells representing the dates of the month. */\r\n  _weeks: MatCalendarCell[][];\r\n\r\n  /** The number of blank cells in the first row before the 1st of the month. */\r\n  _firstWeekOffset: number;\r\n\r\n  /**\r\n   * The date of the month that the currently selected Date falls on.\r\n   * Null if the currently selected Date is in another month.\r\n   */\r\n  _selectedDate: number | null;\r\n\r\n  /** The date of the month that today falls on. Null if today is in another month. */\r\n  _todayDate: number | null;\r\n\r\n  /** The names of the weekdays. */\r\n  _weekdays: {long: string, narrow: string}[];\r\n\r\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\r\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\r\n              private _changeDetectorRef: ChangeDetectorRef) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('DateAdapter');\r\n    }\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\r\n    }\r\n\r\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\r\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\r\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\r\n\r\n    // Rotate the labels for days of the week based on the configured first day of the week.\r\n    let weekdays = longWeekdays.map((long, i) => {\r\n      return {long, narrow: narrowWeekdays[i]};\r\n    });\r\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\r\n\r\n    this._activeDate = this._dateAdapter.today();\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._init();\r\n  }\r\n\r\n  /** Handles when a new date is selected. */\r\n  _dateSelected(date: number) {\r\n    if (this._selectedDate != date) {\r\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\r\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\r\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\r\n\r\n      this.selectedChange.emit(selectedDate);\r\n    }\r\n\r\n    this._userSelection.emit();\r\n  }\r\n\r\n  /** Initializes this month view. */\r\n  _init() {\r\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\r\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\r\n    this._monthLabel =\r\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\r\n            .toLocaleUpperCase();\r\n\r\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\r\n        this._dateAdapter.getMonth(this.activeDate), 1);\r\n    this._firstWeekOffset =\r\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\r\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\r\n\r\n    this._createWeekCells();\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /** Creates MatCalendarCells for the dates in this month. */\r\n  private _createWeekCells() {\r\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\r\n    const dateNames = this._dateAdapter.getDateNames();\r\n    this._weeks = [[]];\r\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\r\n      if (cell == DAYS_PER_WEEK) {\r\n        this._weeks.push([]);\r\n        cell = 0;\r\n      }\r\n      const date = this._dateAdapter.createDate(\r\n            this._dateAdapter.getYear(this.activeDate),\r\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\r\n      const enabled = this._shouldEnableDate(date);\r\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\r\n      this._weeks[this._weeks.length - 1]\r\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\r\n    }\r\n  }\r\n\r\n  /** Date filter for the month */\r\n  private _shouldEnableDate(date: D): boolean {\r\n    return !!date &&\r\n        (!this.dateFilter || this.dateFilter(date)) &&\r\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\r\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\r\n  }\r\n\r\n  /**\r\n   * Gets the date in this month that the given Date falls on.\r\n   * Returns null if the given Date is in another month.\r\n   */\r\n  private _getDateInCurrentMonth(date: D | null): number | null {\r\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\r\n        this._dateAdapter.getDate(date) : null;\r\n  }\r\n\r\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\r\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\r\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\r\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  Optional,\r\n  Output,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport {DateAdapter} from '@angular/material/core';\r\nimport {MatCalendarCell} from './calendar-body';\r\nimport {createMissingDateImplError} from './datepicker-errors';\r\n\r\n\r\nexport const yearsPerPage = 24;\r\n\r\nexport const yearsPerRow = 4;\r\n\r\n\r\n/**\r\n * An internal component used to display a year selector in the datepicker.\r\n * @docs-private\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-multi-year-view',\r\n  templateUrl: 'multi-year-view.html',\r\n  exportAs: 'matMultiYearView',\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatMultiYearView<D> implements AfterContentInit {\r\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\r\n  @Input()\r\n  get activeDate(): D { return this._activeDate; }\r\n  set activeDate(value: D) {\r\n    let oldActiveDate = this._activeDate;\r\n    this._activeDate =\r\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\r\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\r\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\r\n      this._init();\r\n    }\r\n  }\r\n  private _activeDate: D;\r\n\r\n  /** The currently selected date. */\r\n  @Input()\r\n  get selected(): D | null { return this._selected; }\r\n  set selected(value: D | null) {\r\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\r\n  }\r\n  private _selected: D | null;\r\n\r\n  /** The minimum selectable date. */\r\n  @Input()\r\n  get minDate(): D | null { return this._minDate; }\r\n  set minDate(value: D | null) {\r\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _minDate: D | null;\r\n\r\n  /** The maximum selectable date. */\r\n  @Input()\r\n  get maxDate(): D | null { return this._maxDate; }\r\n  set maxDate(value: D | null) {\r\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _maxDate: D | null;\r\n\r\n  /** A function used to filter which dates are selectable. */\r\n  @Input() dateFilter: (date: D) => boolean;\r\n\r\n  /** Emits when a new month is selected. */\r\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** Grid of calendar cells representing the currently displayed years. */\r\n  _years: MatCalendarCell[][];\r\n\r\n  /** The year that today falls on. */\r\n  _todayYear: number;\r\n\r\n  /** The year of the selected date. Null if the selected date is null. */\r\n  _selectedYear: number | null;\r\n\r\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\r\n              private _changeDetectorRef: ChangeDetectorRef) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('DateAdapter');\r\n    }\r\n\r\n    this._activeDate = this._dateAdapter.today();\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._init();\r\n  }\r\n\r\n  /** Initializes this multi-year view. */\r\n  _init() {\r\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\r\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\r\n    let activeOffset = activeYear % yearsPerPage;\r\n    this._years = [];\r\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\r\n      row.push(activeYear - activeOffset + i);\r\n      if (row.length == yearsPerRow) {\r\n        this._years.push(row.map(year => this._createCellForYear(year)));\r\n        row = [];\r\n      }\r\n    }\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /** Handles when a new year is selected. */\r\n  _yearSelected(year: number) {\r\n    let month = this._dateAdapter.getMonth(this.activeDate);\r\n    let daysInMonth =\r\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\r\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\r\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\r\n  }\r\n\r\n  _getActiveCell(): number {\r\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\r\n  }\r\n\r\n  /** Creates an MatCalendarCell for the given year. */\r\n  private _createCellForYear(year: number) {\r\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\r\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\r\n  }\r\n\r\n  /** Whether the given year is enabled. */\r\n  private _shouldEnableYear(year: number) {\r\n    // disable if the year is greater than maxDate lower than minDate\r\n    if (year === undefined || year === null ||\r\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\r\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\r\n      return false;\r\n    }\r\n\r\n    // enable if it reaches here and there's no filter defined\r\n    if (!this.dateFilter) {\r\n      return true;\r\n    }\r\n\r\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\r\n\r\n    // If any date in the year is enabled count the year as enabled.\r\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\r\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\r\n      if (this.dateFilter(date)) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  Optional,\r\n  Output,\r\n  ViewEncapsulation,\r\n  ChangeDetectorRef,\r\n} from '@angular/core';\r\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\r\nimport {MatCalendarCell} from './calendar-body';\r\nimport {createMissingDateImplError} from './datepicker-errors';\r\n\r\n\r\n/**\r\n * An internal component used to display a single year in the datepicker.\r\n * @docs-private\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-year-view',\r\n  templateUrl: 'year-view.html',\r\n  exportAs: 'matYearView',\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatYearView<D> implements AfterContentInit {\r\n  /** The date to display in this year view (everything other than the year is ignored). */\r\n  @Input()\r\n  get activeDate(): D { return this._activeDate; }\r\n  set activeDate(value: D) {\r\n    let oldActiveDate = this._activeDate;\r\n    this._activeDate =\r\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\r\n    if (this._dateAdapter.getYear(oldActiveDate) != this._dateAdapter.getYear(this._activeDate)) {\r\n      this._init();\r\n    }\r\n  }\r\n  private _activeDate: D;\r\n\r\n  /** The currently selected date. */\r\n  @Input()\r\n  get selected(): D | null { return this._selected; }\r\n  set selected(value: D | null) {\r\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\r\n  }\r\n  private _selected: D | null;\r\n\r\n  /** The minimum selectable date. */\r\n  @Input()\r\n  get minDate(): D | null { return this._minDate; }\r\n  set minDate(value: D | null) {\r\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _minDate: D | null;\r\n\r\n  /** The maximum selectable date. */\r\n  @Input()\r\n  get maxDate(): D | null { return this._maxDate; }\r\n  set maxDate(value: D | null) {\r\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _maxDate: D | null;\r\n\r\n  /** A function used to filter which dates are selectable. */\r\n  @Input() dateFilter: (date: D) => boolean;\r\n\r\n  /** Emits when a new month is selected. */\r\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** Grid of calendar cells representing the months of the year. */\r\n  _months: MatCalendarCell[][];\r\n\r\n  /** The label for this year (e.g. \"2017\"). */\r\n  _yearLabel: string;\r\n\r\n  /** The month in this year that today falls on. Null if today is in a different year. */\r\n  _todayMonth: number | null;\r\n\r\n  /**\r\n   * The month in this year that the selected Date falls on.\r\n   * Null if the selected Date is in a different year.\r\n   */\r\n  _selectedMonth: number | null;\r\n\r\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\r\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\r\n              private _changeDetectorRef: ChangeDetectorRef) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('DateAdapter');\r\n    }\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\r\n    }\r\n\r\n    this._activeDate = this._dateAdapter.today();\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._init();\r\n  }\r\n\r\n  /** Handles when a new month is selected. */\r\n  _monthSelected(month: number) {\r\n    let daysInMonth = this._dateAdapter.getNumDaysInMonth(\r\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1));\r\n    this.selectedChange.emit(this._dateAdapter.createDate(\r\n        this._dateAdapter.getYear(this.activeDate), month,\r\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\r\n  }\r\n\r\n  /** Initializes this year view. */\r\n  _init() {\r\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\r\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\r\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\r\n\r\n    let monthNames = this._dateAdapter.getMonthNames('short');\r\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\r\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\r\n        month => this._createCellForMonth(month, monthNames[month])));\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /**\r\n   * Gets the month in this year that the given Date falls on.\r\n   * Returns null if the given Date is in another year.\r\n   */\r\n  private _getMonthInCurrentYear(date: D | null) {\r\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\r\n        this._dateAdapter.getMonth(date) : null;\r\n  }\r\n\r\n  /** Creates an MatCalendarCell for the given month. */\r\n  private _createCellForMonth(month: number, monthName: string) {\r\n    let ariaLabel = this._dateAdapter.format(\r\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\r\n        this._dateFormats.display.monthYearA11yLabel);\r\n    return new MatCalendarCell(\r\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\r\n  }\r\n\r\n  /** Whether the given month is enabled. */\r\n  private _shouldEnableMonth(month: number) {\r\n\r\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\r\n\r\n    if (month === undefined || month === null ||\r\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\r\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\r\n      return false;\r\n    }\r\n\r\n    if (!this.dateFilter) {\r\n      return true;\r\n    }\r\n\r\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\r\n\r\n    // If any date in the month is enabled count the month as enabled.\r\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\r\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\r\n      if (this.dateFilter(date)) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Tests whether the combination month/year is after this.maxDate, considering\r\n   * just the month and year of this.maxDate\r\n   */\r\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\r\n    if (this.maxDate) {\r\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\r\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\r\n\r\n      return year > maxYear || (year === maxYear && month > maxMonth);\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Tests whether the combination month/year is before this.minDate, considering\r\n   * just the month and year of this.minDate\r\n   */\r\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\r\n    if (this.minDate) {\r\n      const minYear = this._dateAdapter.getYear(this.minDate);\r\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\r\n\r\n      return year < minYear || (year === minYear && month < minMonth);\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  DOWN_ARROW,\r\n  END,\r\n  ENTER,\r\n  HOME,\r\n  LEFT_ARROW,\r\n  PAGE_DOWN,\r\n  PAGE_UP,\r\n  RIGHT_ARROW,\r\n  UP_ARROW,\r\n} from '@angular/cdk/keycodes';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  NgZone,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  SimpleChanges,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\r\nimport {take} from 'rxjs/operators/take';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {createMissingDateImplError} from './datepicker-errors';\r\nimport {MatDatepickerIntl} from './datepicker-intl';\r\nimport {MatMonthView} from './month-view';\r\nimport {MatMultiYearView, yearsPerPage, yearsPerRow} from './multi-year-view';\r\nimport {MatYearView} from './year-view';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\n\r\n\r\n/**\r\n * A calendar that is used as part of the datepicker.\r\n * @docs-private\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-calendar',\r\n  templateUrl: 'calendar.html',\r\n  styleUrls: ['calendar.css'],\r\n  host: {\r\n    'class': 'mat-calendar',\r\n  },\r\n  exportAs: 'matCalendar',\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatCalendar<D> implements AfterContentInit, OnDestroy, OnChanges {\r\n  private _intlChanges: Subscription;\r\n\r\n  /** A date representing the period (month or year) to start the calendar in. */\r\n  @Input()\r\n  get startAt(): D | null { return this._startAt; }\r\n  set startAt(value: D | null) {\r\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _startAt: D | null;\r\n\r\n  /** Whether the calendar should be started in month or year view. */\r\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\r\n\r\n  /** The currently selected date. */\r\n  @Input()\r\n  get selected(): D | null { return this._selected; }\r\n  set selected(value: D | null) {\r\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _selected: D | null;\r\n\r\n  /** The minimum selectable date. */\r\n  @Input()\r\n  get minDate(): D | null { return this._minDate; }\r\n  set minDate(value: D | null) {\r\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _minDate: D | null;\r\n\r\n  /** The maximum selectable date. */\r\n  @Input()\r\n  get maxDate(): D | null { return this._maxDate; }\r\n  set maxDate(value: D | null) {\r\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _maxDate: D | null;\r\n\r\n  /** A function used to filter which dates are selectable. */\r\n  @Input() dateFilter: (date: D) => boolean;\r\n\r\n  /** Emits when the currently selected date changes. */\r\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** Emits when any date is selected. */\r\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /** Reference to the current month view component. */\r\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\r\n\r\n  /** Reference to the current year view component. */\r\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\r\n\r\n  /** Reference to the current multi-year view component. */\r\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\r\n\r\n  /**\r\n   * The current active date. This determines which time period is shown and which date is\r\n   * highlighted when using keyboard navigation.\r\n   */\r\n  get _activeDate(): D { return this._clampedActiveDate; }\r\n  set _activeDate(value: D) {\r\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\r\n  }\r\n  private _clampedActiveDate: D;\r\n\r\n  /** Whether the calendar is in month view. */\r\n  _currentView: 'month' | 'year' | 'multi-year';\r\n\r\n  /** The label for the current calendar view. */\r\n  get _periodButtonText(): string {\r\n    if (this._currentView == 'month') {\r\n      return this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel)\r\n          .toLocaleUpperCase();\r\n    }\r\n    if (this._currentView == 'year') {\r\n      return this._dateAdapter.getYearName(this._activeDate);\r\n    }\r\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\r\n    const firstYearInView = this._dateAdapter.getYearName(\r\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\r\n    const lastYearInView = this._dateAdapter.getYearName(\r\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\r\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\r\n  }\r\n\r\n  get _periodButtonLabel(): string {\r\n    return this._currentView == 'month' ?\r\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\r\n  }\r\n\r\n  /** The label for the the previous button. */\r\n  get _prevButtonLabel(): string {\r\n    return {\r\n      'month': this._intl.prevMonthLabel,\r\n      'year': this._intl.prevYearLabel,\r\n      'multi-year': this._intl.prevMultiYearLabel\r\n    }[this._currentView];\r\n  }\r\n\r\n  /** The label for the the next button. */\r\n  get _nextButtonLabel(): string {\r\n    return {\r\n      'month': this._intl.nextMonthLabel,\r\n      'year': this._intl.nextYearLabel,\r\n      'multi-year': this._intl.nextMultiYearLabel\r\n    }[this._currentView];\r\n  }\r\n\r\n  constructor(private _elementRef: ElementRef,\r\n              private _intl: MatDatepickerIntl,\r\n              private _ngZone: NgZone,\r\n              @Optional() private _dateAdapter: DateAdapter<D>,\r\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\r\n              changeDetectorRef: ChangeDetectorRef,\r\n              @Optional() private _dir?: Directionality) {\r\n\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('DateAdapter');\r\n    }\r\n\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\r\n    }\r\n\r\n    this._intlChanges = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._activeDate = this.startAt || this._dateAdapter.today();\r\n    this._focusActiveCell();\r\n    this._currentView = this.startView;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._intlChanges.unsubscribe();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\r\n\r\n    if (change && !change.firstChange) {\r\n      const view = this.monthView || this.yearView || this.multiYearView;\r\n\r\n      if (view) {\r\n        view._init();\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Handles date selection in the month view. */\r\n  _dateSelected(date: D): void {\r\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\r\n      this.selectedChange.emit(date);\r\n    }\r\n  }\r\n\r\n  _userSelected(): void {\r\n    this._userSelection.emit();\r\n  }\r\n\r\n  /** Handles month selection in the multi-year view. */\r\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\r\n    this._activeDate = date;\r\n    this._currentView = view;\r\n  }\r\n\r\n  /** Handles user clicks on the period label. */\r\n  _currentPeriodClicked(): void {\r\n    this._currentView = this._currentView == 'month' ? 'multi-year' : 'month';\r\n  }\r\n\r\n  /** Handles user clicks on the previous button. */\r\n  _previousClicked(): void {\r\n    this._activeDate = this._currentView == 'month' ?\r\n        this._dateAdapter.addCalendarMonths(this._activeDate, -1) :\r\n        this._dateAdapter.addCalendarYears(\r\n            this._activeDate, this._currentView == 'year' ? -1 : -yearsPerPage);\r\n  }\r\n\r\n  /** Handles user clicks on the next button. */\r\n  _nextClicked(): void {\r\n    this._activeDate = this._currentView == 'month' ?\r\n        this._dateAdapter.addCalendarMonths(this._activeDate, 1) :\r\n        this._dateAdapter.addCalendarYears(\r\n            this._activeDate, this._currentView == 'year' ? 1 : yearsPerPage);\r\n  }\r\n\r\n  /** Whether the previous period button is enabled. */\r\n  _previousEnabled(): boolean {\r\n    if (!this.minDate) {\r\n      return true;\r\n    }\r\n    return !this.minDate || !this._isSameView(this._activeDate, this.minDate);\r\n  }\r\n\r\n  /** Whether the next period button is enabled. */\r\n  _nextEnabled(): boolean {\r\n    return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);\r\n  }\r\n\r\n  /** Handles keydown events on the calendar body. */\r\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\r\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\r\n    // disabled ones from being selected. This may not be ideal, we should look into whether\r\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\r\n    if (this._currentView == 'month') {\r\n      this._handleCalendarBodyKeydownInMonthView(event);\r\n    } else if (this._currentView == 'year') {\r\n      this._handleCalendarBodyKeydownInYearView(event);\r\n    } else {\r\n      this._handleCalendarBodyKeydownInMultiYearView(event);\r\n    }\r\n  }\r\n\r\n  /** Focuses the active cell after the microtask queue is empty. */\r\n  _focusActiveCell() {\r\n    this._ngZone.runOutsideAngular(() => {\r\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\r\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\r\n      });\r\n    });\r\n  }\r\n\r\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\r\n  private _isSameView(date1: D, date2: D): boolean {\r\n    if (this._currentView == 'month') {\r\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\r\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\r\n    }\r\n    if (this._currentView == 'year') {\r\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\r\n    }\r\n    // Otherwise we are in 'multi-year' view.\r\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\r\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\r\n  }\r\n\r\n  /** Handles keydown events on the calendar body when calendar is in month view. */\r\n  private _handleCalendarBodyKeydownInMonthView(event: KeyboardEvent): void {\r\n    const isRtl = this._isRtl();\r\n\r\n    switch (event.keyCode) {\r\n      case LEFT_ARROW:\r\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\r\n        break;\r\n      case RIGHT_ARROW:\r\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\r\n        break;\r\n      case UP_ARROW:\r\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\r\n        break;\r\n      case DOWN_ARROW:\r\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\r\n        break;\r\n      case HOME:\r\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\r\n            1 - this._dateAdapter.getDate(this._activeDate));\r\n        break;\r\n      case END:\r\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\r\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\r\n             this._dateAdapter.getDate(this._activeDate)));\r\n        break;\r\n      case PAGE_UP:\r\n        this._activeDate = event.altKey ?\r\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\r\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\r\n        break;\r\n      case PAGE_DOWN:\r\n        this._activeDate = event.altKey ?\r\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\r\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\r\n        break;\r\n      case ENTER:\r\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\r\n          this._dateSelected(this._activeDate);\r\n          this._userSelected();\r\n          // Prevent unexpected default actions such as form submission.\r\n          event.preventDefault();\r\n        }\r\n        return;\r\n      default:\r\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\r\n        return;\r\n    }\r\n\r\n    this._focusActiveCell();\r\n    // Prevent unexpected default actions such as form submission.\r\n    event.preventDefault();\r\n  }\r\n\r\n  /** Handles keydown events on the calendar body when calendar is in year view. */\r\n  private _handleCalendarBodyKeydownInYearView(event: KeyboardEvent): void {\r\n    const isRtl = this._isRtl();\r\n\r\n    switch (event.keyCode) {\r\n      case LEFT_ARROW:\r\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\r\n        break;\r\n      case RIGHT_ARROW:\r\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\r\n        break;\r\n      case UP_ARROW:\r\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\r\n        break;\r\n      case DOWN_ARROW:\r\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\r\n        break;\r\n      case HOME:\r\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\r\n            -this._dateAdapter.getMonth(this._activeDate));\r\n        break;\r\n      case END:\r\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\r\n            11 - this._dateAdapter.getMonth(this._activeDate));\r\n        break;\r\n      case PAGE_UP:\r\n        this._activeDate =\r\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\r\n        break;\r\n      case PAGE_DOWN:\r\n        this._activeDate =\r\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\r\n        break;\r\n      case ENTER:\r\n        this._goToDateInView(this._activeDate, 'month');\r\n        break;\r\n      default:\r\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\r\n        return;\r\n    }\r\n\r\n    this._focusActiveCell();\r\n    // Prevent unexpected default actions such as form submission.\r\n    event.preventDefault();\r\n  }\r\n\r\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\r\n  private _handleCalendarBodyKeydownInMultiYearView(event: KeyboardEvent): void {\r\n    switch (event.keyCode) {\r\n      case LEFT_ARROW:\r\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -1);\r\n        break;\r\n      case RIGHT_ARROW:\r\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, 1);\r\n        break;\r\n      case UP_ARROW:\r\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\r\n        break;\r\n      case DOWN_ARROW:\r\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\r\n        break;\r\n      case HOME:\r\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\r\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\r\n        break;\r\n      case END:\r\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\r\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\r\n        break;\r\n      case PAGE_UP:\r\n        this._activeDate =\r\n            this._dateAdapter.addCalendarYears(\r\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\r\n        break;\r\n      case PAGE_DOWN:\r\n        this._activeDate =\r\n            this._dateAdapter.addCalendarYears(\r\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\r\n        break;\r\n      case ENTER:\r\n        this._goToDateInView(this._activeDate, 'year');\r\n        break;\r\n      default:\r\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\r\n        return;\r\n    }\r\n\r\n    this._focusActiveCell();\r\n    // Prevent unexpected default actions such as form submission.\r\n    event.preventDefault();\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\r\n  }\r\n\r\n  /** Determines whether the user has the RTL layout direction. */\r\n  private _isRtl() {\r\n    return this._dir && this._dir.value === 'rtl';\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FocusKeyManager} from '@angular/cdk/a11y';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {SelectionModel} from '@angular/cdk/collections';\r\nimport {BACKSPACE} from '@angular/cdk/keycodes';\r\nimport {startWith} from 'rxjs/operators/startWith';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChildren,\r\n  DoCheck,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  Self,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {\r\n  ControlValueAccessor,\r\n  FormGroupDirective,\r\n  NgControl,\r\n  NgForm\r\n} from '@angular/forms';\r\nimport {ErrorStateMatcher, mixinErrorState, CanUpdateErrorState} from '@angular/material/core';\r\nimport {MatFormFieldControl} from '@angular/material/form-field';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {merge} from 'rxjs/observable/merge';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\r\nimport {MatChipInput} from './chip-input';\r\n\r\n// Boilerplate for applying mixins to MatChipList.\r\n/** @docs-private */\r\nexport class MatChipListBase {\r\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\r\n              public _parentForm: NgForm,\r\n              public _parentFormGroup: FormGroupDirective,\r\n              /** @docs-private */\r\n              public ngControl: NgControl) {}\r\n}\r\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\r\n\r\n\r\n// Increasing integer for generating unique ids for chip-list components.\r\nlet nextUniqueId = 0;\r\n\r\n/** Change event object that is emitted when the chip list value has changed. */\r\nexport class MatChipListChange {\r\n  constructor(\r\n    /** Chip list that emitted the event. */\r\n    public source: MatChipList,\r\n    /** Value of the chip list when the event was emitted. */\r\n    public value: any) { }\r\n}\r\n\r\n\r\n/**\r\n * A material design chips component (named ChipList for it's similarity to the List component).\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-chip-list',\r\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\r\n  exportAs: 'matChipList',\r\n  host: {\r\n    '[attr.tabindex]': '_tabIndex',\r\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\r\n    '[attr.aria-required]': 'required.toString()',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n    '[attr.aria-invalid]': 'errorState',\r\n    '[attr.aria-multiselectable]': 'multiple',\r\n    '[attr.role]': 'role',\r\n    '[class.mat-chip-list-disabled]': 'disabled',\r\n    '[class.mat-chip-list-invalid]': 'errorState',\r\n    '[class.mat-chip-list-required]': 'required',\r\n    '[attr.aria-orientation]': 'ariaOrientation',\r\n    'class': 'mat-chip-list',\r\n    '(focus)': 'focus()',\r\n    '(blur)': '_blur()',\r\n    '(keydown)': '_keydown($event)'\r\n  },\r\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\r\n  styleUrls: ['chips.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\r\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  readonly controlType: string = 'mat-chip-list';\r\n\r\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\r\n  protected _lastDestroyedIndex: number|null = null;\r\n\r\n  /** Track which chips we're listening to for focus/destruction. */\r\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\r\n\r\n  /** Subscription to tabbing out from the chip list. */\r\n  private _tabOutSubscription = Subscription.EMPTY;\r\n\r\n  /** Subscription to changes in the chip list. */\r\n  private _changeSubscription: Subscription;\r\n\r\n  /** Subscription to focus changes in the chips. */\r\n  private _chipFocusSubscription: Subscription | null;\r\n\r\n  /** Subscription to blur changes in the chips. */\r\n  private _chipBlurSubscription: Subscription | null;\r\n\r\n  /** Subscription to selection changes in chips. */\r\n  private _chipSelectionSubscription: Subscription | null;\r\n\r\n  /** Subscription to remove changes in chips. */\r\n  private _chipRemoveSubscription: Subscription | null;\r\n\r\n  /** The chip input to add more chips */\r\n  protected _chipInput: MatChipInput;\r\n\r\n  /** Uid of the chip list */\r\n  protected _uid: string = `mat-chip-list-${nextUniqueId++}`;\r\n\r\n  /** The aria-describedby attribute on the chip list for improved a11y. */\r\n  _ariaDescribedby: string;\r\n\r\n  /** Tab index for the chip list. */\r\n  _tabIndex = 0;\r\n\r\n  /**\r\n   * User defined tab index.\r\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\r\n   */\r\n  _userTabIndex: number | null = null;\r\n\r\n  /** The FocusKeyManager which handles focus. */\r\n  _keyManager: FocusKeyManager<MatChip>;\r\n\r\n  /** Function when touched */\r\n  _onTouched = () => {};\r\n\r\n  /** Function when changed */\r\n  _onChange: (value: any) => void = () => {};\r\n\r\n  _selectionModel: SelectionModel<MatChip>;\r\n\r\n  /** The array of selected chips inside chip list. */\r\n  get selected(): MatChip[] | MatChip {\r\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\r\n  }\r\n\r\n  /** The ARIA role applied to the chip list. */\r\n  get role(): string | null { return this.empty ? null : 'listbox'; }\r\n\r\n  /** An object used to control when error messages are shown. */\r\n  @Input() errorStateMatcher: ErrorStateMatcher;\r\n\r\n  /** Whether the user should be allowed to select multiple chips. */\r\n  @Input()\r\n  get multiple(): boolean { return this._multiple; }\r\n  set multiple(value: boolean) {\r\n    this._multiple = coerceBooleanProperty(value);\r\n  }\r\n  private _multiple: boolean = false;\r\n\r\n  /**\r\n   * A function to compare the option values with the selected values. The first argument\r\n   * is a value from an option. The second is a value from the selection. A boolean\r\n   * should be returned.\r\n   */\r\n  @Input()\r\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\r\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\r\n    this._compareWith = fn;\r\n    if (this._selectionModel) {\r\n      // A different comparator means the selection could change.\r\n      this._initializeSelection();\r\n    }\r\n  }\r\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  @Input()\r\n  get value(): any { return this._value; }\r\n  set value(value: any) {\r\n    this.writeValue(value);\r\n    this._value = value;\r\n  }\r\n  protected _value: any;\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  @Input()\r\n  get id(): string { return this._id || this._uid; }\r\n  set id(value: string) {\r\n    this._id = value;\r\n    this.stateChanges.next();\r\n  }\r\n  protected _id: string;\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  @Input()\r\n  get required(): boolean { return this._required; }\r\n  set required(value: boolean) {\r\n    this._required = coerceBooleanProperty(value);\r\n    this.stateChanges.next();\r\n  }\r\n  protected _required: boolean = false;\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  @Input()\r\n  get placeholder(): string {\r\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\r\n  }\r\n  set placeholder(value: string) {\r\n    this._placeholder = value;\r\n    this.stateChanges.next();\r\n  }\r\n  protected _placeholder: string;\r\n\r\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\r\n  get focused(): boolean {\r\n    return this.chips.some(chip => chip._hasFocus) ||\r\n      (this._chipInput && this._chipInput.focused);\r\n  }\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  get empty(): boolean {\r\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\r\n  }\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  @Input()\r\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\r\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\r\n  protected _disabled: boolean = false;\r\n\r\n  /** Orientation of the chip list. */\r\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\r\n\r\n  /**\r\n   * Whether or not this chip is selectable. When a chip is not selectable,\r\n   * its selected state is always ignored.\r\n   */\r\n  @Input()\r\n  get selectable(): boolean { return this._selectable; }\r\n  set selectable(value: boolean) { this._selectable = coerceBooleanProperty(value); }\r\n  protected _selectable: boolean = true;\r\n\r\n  @Input()\r\n  set tabIndex(value: number) {\r\n    this._userTabIndex = value;\r\n    this._tabIndex = value;\r\n  }\r\n\r\n  /** Combined stream of all of the child chips' selection change events. */\r\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\r\n    return merge(...this.chips.map(chip => chip.selectionChange));\r\n  }\r\n\r\n  /** Combined stream of all of the child chips' focus change events. */\r\n  get chipFocusChanges(): Observable<MatChipEvent> {\r\n    return merge(...this.chips.map(chip => chip._onFocus));\r\n  }\r\n\r\n  /** Combined stream of all of the child chips' blur change events. */\r\n  get chipBlurChanges(): Observable<MatChipEvent> {\r\n    return merge(...this.chips.map(chip => chip._onBlur));\r\n  }\r\n\r\n  /** Combined stream of all of the child chips' remove change events. */\r\n  get chipRemoveChanges(): Observable<MatChipEvent> {\r\n    return merge(...this.chips.map(chip => chip.destroy));\r\n  }\r\n\r\n  /** Event emitted when the selected chip list value has been changed by the user. */\r\n  @Output() readonly change: EventEmitter<MatChipListChange> =\r\n      new EventEmitter<MatChipListChange>();\r\n\r\n  /**\r\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\r\n   * to facilitate the two-way binding for the `value` input.\r\n   * @docs-private\r\n   */\r\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  /** The chip components contained within this chip list. */\r\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\r\n\r\n  constructor(protected _elementRef: ElementRef,\r\n              private _changeDetectorRef: ChangeDetectorRef,\r\n              @Optional() private _dir: Directionality,\r\n              @Optional() _parentForm: NgForm,\r\n              @Optional() _parentFormGroup: FormGroupDirective,\r\n              _defaultErrorStateMatcher: ErrorStateMatcher,\r\n              /** @docs-private */\r\n              @Optional() @Self() public ngControl: NgControl) {\r\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\r\n    if (this.ngControl) {\r\n      this.ngControl.valueAccessor = this;\r\n    }\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\r\n      .withWrap()\r\n      .withVerticalOrientation()\r\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\r\n\r\n    // Prevents the chip list from capturing focus and redirecting\r\n    // it back to the first chip when the user tabs out.\r\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\r\n      this._tabIndex = -1;\r\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\r\n    });\r\n\r\n    // When the list changes, re-subscribe\r\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\r\n      this._resetChips();\r\n\r\n      // Reset chips selected/deselected status\r\n      this._initializeSelection();\r\n\r\n      // Check to see if we need to update our tab index\r\n      this._updateTabIndex();\r\n\r\n      // Check to see if we have a destroyed chip and need to refocus\r\n      this._updateFocusForDestroyedChips();\r\n\r\n      this.stateChanges.next();\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  ngDoCheck() {\r\n    if (this.ngControl) {\r\n      // We need to re-evaluate this on every change detection cycle, because there are some\r\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\r\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\r\n      this.updateErrorState();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._tabOutSubscription.unsubscribe();\r\n\r\n    if (this._changeSubscription) {\r\n      this._changeSubscription.unsubscribe();\r\n    }\r\n\r\n    if (this._chipRemoveSubscription) {\r\n      this._chipRemoveSubscription.unsubscribe();\r\n    }\r\n\r\n    this._dropSubscriptions();\r\n    this.stateChanges.complete();\r\n  }\r\n\r\n\r\n  /** Associates an HTML input element with this chip list. */\r\n  registerInput(inputElement: MatChipInput): void {\r\n    this._chipInput = inputElement;\r\n  }\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  writeValue(value: any): void {\r\n    if (this.chips) {\r\n      this._setSelectionByValue(value, false);\r\n    }\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnChange(fn: (value: any) => void): void {\r\n    this._onChange = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnTouched(fn: () => void): void {\r\n    this._onTouched = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n    this._elementRef.nativeElement.disabled = isDisabled;\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  onContainerClick() { this.focus(); }\r\n\r\n  /**\r\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\r\n   * are no eligible chips.\r\n   */\r\n  focus(): void {\r\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\r\n    // Focus on first element if there's no chipInput inside chip-list\r\n    if (this._chipInput && this._chipInput.focused) {\r\n      // do nothing\r\n    } else if (this.chips.length > 0) {\r\n      this._keyManager.setFirstItemActive();\r\n      this.stateChanges.next();\r\n    } else {\r\n      this._focusInput();\r\n      this.stateChanges.next();\r\n    }\r\n  }\r\n\r\n  /** Attempt to focus an input if we have one. */\r\n  _focusInput() {\r\n    if (this._chipInput) {\r\n      this._chipInput.focus();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Pass events to the keyboard manager. Available here for tests.\r\n   */\r\n  _keydown(event: KeyboardEvent) {\r\n    const target = event.target as HTMLElement;\r\n\r\n    // If they are on an empty input and hit backspace, focus the last chip\r\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\r\n      this._keyManager.setLastItemActive();\r\n      event.preventDefault();\r\n    } else if (target && target.classList.contains('mat-chip')) {\r\n      this._keyManager.onKeydown(event);\r\n      this.stateChanges.next();\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Check the tab index as you should not be allowed to focus an empty list.\r\n   */\r\n  protected _updateTabIndex(): void {\r\n    // If we have 0 chips, we should not allow keyboard focus\r\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\r\n  }\r\n\r\n  /**\r\n   * Update key manager's active item when chip is deleted.\r\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\r\n   * Otherwise focus the next chip in the list.\r\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\r\n   */\r\n  protected _updateKeyManager(chip: MatChip) {\r\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\r\n    if (this._isValidIndex(chipIndex)) {\r\n      if (chip._hasFocus) {\r\n        // Check whether the chip is not the last item\r\n        if (chipIndex < this.chips.length - 1) {\r\n          this._keyManager.setActiveItem(chipIndex);\r\n        } else if (chipIndex - 1 >= 0) {\r\n          this._keyManager.setActiveItem(chipIndex - 1);\r\n        }\r\n      }\r\n      if (this._keyManager.activeItemIndex === chipIndex) {\r\n        this._lastDestroyedIndex = chipIndex;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\r\n   * one.\r\n   */\r\n  protected _updateFocusForDestroyedChips() {\r\n    let chipsArray = this.chips;\r\n\r\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0) {\r\n      // Check whether the destroyed chip was the last item\r\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\r\n      this._keyManager.setActiveItem(newFocusIndex);\r\n      let focusChip = this._keyManager.activeItem;\r\n      // Focus the chip\r\n      if (focusChip) {\r\n        focusChip.focus();\r\n      }\r\n    }\r\n\r\n    // Reset our destroyed index\r\n    this._lastDestroyedIndex = null;\r\n  }\r\n\r\n  /**\r\n   * Utility to ensure all indexes are valid.\r\n   *\r\n   * @param index The index to be checked.\r\n   * @returns True if the index is valid for our list of chips.\r\n   */\r\n  private _isValidIndex(index: number): boolean {\r\n    return index >= 0 && index < this.chips.length;\r\n  }\r\n\r\n  private _isInputEmpty(element: HTMLElement): boolean {\r\n    if (element && element.nodeName.toLowerCase() === 'input') {\r\n      let input = element as HTMLInputElement;\r\n      return !input.value;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\r\n    this._clearSelection();\r\n    this.chips.forEach(chip => chip.deselect());\r\n\r\n    if (Array.isArray(value)) {\r\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\r\n      this._sortValues();\r\n    } else {\r\n      const correspondingChip = this._selectValue(value, isUserInput);\r\n\r\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\r\n      // mode, because we don't know what chip the user interacted with last.\r\n      if (correspondingChip) {\r\n        const correspondingChipIndex = this.chips.toArray().indexOf(correspondingChip);\r\n\r\n        if (isUserInput) {\r\n          this._keyManager.setActiveItem(correspondingChipIndex);\r\n        } else {\r\n          this._keyManager.updateActiveItemIndex(correspondingChipIndex);\r\n        }\r\n\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Finds and selects the chip based on its value.\r\n   * @returns Chip that has the corresponding value.\r\n   */\r\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\r\n\r\n    const correspondingChip = this.chips.find(chip => {\r\n      return chip.value != null && this._compareWith(chip.value,  value);\r\n    });\r\n\r\n    if (correspondingChip) {\r\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\r\n      this._selectionModel.select(correspondingChip);\r\n    }\r\n\r\n    return correspondingChip;\r\n  }\r\n\r\n  private _initializeSelection(): void {\r\n    // Defer setting the value in order to avoid the \"Expression\r\n    // has changed after it was checked\" errors from Angular.\r\n    Promise.resolve().then(() => {\r\n      if (this.ngControl || this._value) {\r\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\r\n        this.stateChanges.next();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Deselects every chip in the list.\r\n   * @param skip Chip that should not be deselected.\r\n   */\r\n  private _clearSelection(skip?: MatChip): void {\r\n    this._selectionModel.clear();\r\n    this.chips.forEach(chip => {\r\n      if (chip !== skip) {\r\n        chip.deselect();\r\n      }\r\n    });\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  /**\r\n   * Sorts the model values, ensuring that they keep the same\r\n   * order that they have in the panel.\r\n   */\r\n  private _sortValues(): void {\r\n    if (this._multiple) {\r\n      this._selectionModel.clear();\r\n\r\n      this.chips.forEach(chip => {\r\n        if (chip.selected) {\r\n          this._selectionModel.select(chip);\r\n        }\r\n      });\r\n      this.stateChanges.next();\r\n    }\r\n  }\r\n\r\n  /** Emits change event to set the model value. */\r\n  private _propagateChanges(fallbackValue?: any): void {\r\n    let valueToEmit: any = null;\r\n\r\n    if (Array.isArray(this.selected)) {\r\n      valueToEmit = this.selected.map(chip => chip.value);\r\n    } else {\r\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\r\n    }\r\n    this._value = valueToEmit;\r\n    this.change.emit(new MatChipListChange(this, valueToEmit));\r\n    this.valueChange.emit(valueToEmit);\r\n    this._onChange(valueToEmit);\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\r\n  _blur() {\r\n    if (!this.disabled) {\r\n      if (this._chipInput) {\r\n        // If there's a chip input, we should check whether the focus moved to chip input.\r\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\r\n        // to chip input, do nothing.\r\n        // Timeout is needed to wait for the focus() event trigger on chip input.\r\n        setTimeout(() => {\r\n          if (!this.focused) {\r\n            this._markAsTouched();\r\n          }\r\n        });\r\n      } else {\r\n        // If there's no chip input, then mark the field as touched.\r\n        this._markAsTouched();\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Mark the field as touched */\r\n  _markAsTouched() {\r\n    this._onTouched();\r\n    this._changeDetectorRef.markForCheck();\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  private _resetChips() {\r\n    this._dropSubscriptions();\r\n    this._listenToChipsFocus();\r\n    this._listenToChipsSelection();\r\n    this._listenToChipsRemoved();\r\n  }\r\n\r\n\r\n  private _dropSubscriptions() {\r\n    if (this._chipFocusSubscription) {\r\n      this._chipFocusSubscription.unsubscribe();\r\n      this._chipFocusSubscription = null;\r\n    }\r\n\r\n    if (this._chipBlurSubscription) {\r\n      this._chipBlurSubscription.unsubscribe();\r\n      this._chipBlurSubscription = null;\r\n    }\r\n\r\n    if (this._chipSelectionSubscription) {\r\n      this._chipSelectionSubscription.unsubscribe();\r\n      this._chipSelectionSubscription = null;\r\n    }\r\n  }\r\n\r\n  /** Listens to user-generated selection events on each chip. */\r\n  private _listenToChipsSelection(): void {\r\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\r\n      event.source.selected\r\n        ? this._selectionModel.select(event.source)\r\n        : this._selectionModel.deselect(event.source);\r\n\r\n      // For single selection chip list, make sure the deselected value is unselected.\r\n      if (!this.multiple) {\r\n        this.chips.forEach(chip => {\r\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\r\n            chip.deselect();\r\n          }\r\n        });\r\n      }\r\n\r\n      if (event.isUserInput) {\r\n        this._propagateChanges();\r\n      }\r\n    });\r\n  }\r\n\r\n  /** Listens to user-generated selection events on each chip. */\r\n  private _listenToChipsFocus(): void {\r\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\r\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\r\n\r\n      if (this._isValidIndex(chipIndex)) {\r\n        this._keyManager.updateActiveItemIndex(chipIndex);\r\n      }\r\n      this.stateChanges.next();\r\n    });\r\n\r\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\r\n      this._blur();\r\n      this.stateChanges.next();\r\n    });\r\n  }\r\n\r\n  private _listenToChipsRemoved(): void {\r\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\r\n      this._updateKeyManager(event.chip);\r\n    });\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {ENTER} from '@angular/cdk/keycodes';\r\nimport {Directive, ElementRef, EventEmitter, Input, Output} from '@angular/core';\r\nimport {MatChipList} from './chip-list';\r\n\r\n\r\n/** Represents an input event on a `matChipInput`. */\r\nexport interface MatChipInputEvent {\r\n  /** The native `<input>` element that the event is being fired for. */\r\n  input: HTMLInputElement;\r\n\r\n  /** The value of the input. */\r\n  value: string;\r\n}\r\n\r\n/**\r\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\r\n * May be placed inside or outside of an `<mat-chip-list>`.\r\n */\r\n@Directive({\r\n  selector: 'input[matChipInputFor]',\r\n  exportAs: 'matChipInput, matChipInputFor',\r\n  host: {\r\n    'class': 'mat-chip-input mat-input-element',\r\n    '(keydown)': '_keydown($event)',\r\n    '(blur)': '_blur()',\r\n    '(focus)': '_focus()',\r\n    '(input)': '_onInput()',\r\n  }\r\n})\r\nexport class MatChipInput {\r\n  /** Whether the control is focused. */\r\n  focused: boolean = false;\r\n  _chipList: MatChipList;\r\n\r\n  /** Register input for chip list */\r\n  @Input('matChipInputFor')\r\n  set chipList(value: MatChipList) {\r\n    if (value) {\r\n      this._chipList = value;\r\n      this._chipList.registerInput(this);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\r\n   */\r\n  @Input('matChipInputAddOnBlur')\r\n  get addOnBlur(): boolean { return this._addOnBlur; }\r\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\r\n  _addOnBlur: boolean = false;\r\n\r\n  /**\r\n   * The list of key codes that will trigger a chipEnd event.\r\n   *\r\n   * Defaults to `[ENTER]`.\r\n   */\r\n  // TODO(tinayuangao): Support Set here\r\n  @Input('matChipInputSeparatorKeyCodes') separatorKeyCodes: number[] = [ENTER];\r\n\r\n  /** Emitted when a chip is to be added. */\r\n  @Output('matChipInputTokenEnd')\r\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\r\n\r\n  /** The input's placeholder text. */\r\n  @Input() placeholder: string = '';\r\n\r\n  /** Whether the input is empty. */\r\n  get empty(): boolean { return !this._inputElement.value; }\r\n\r\n  /** The native input element to which this directive is attached. */\r\n  protected _inputElement: HTMLInputElement;\r\n\r\n  constructor(protected _elementRef: ElementRef) {\r\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\r\n  }\r\n\r\n  /** Utility method to make host definition/tests more clear. */\r\n  _keydown(event?: KeyboardEvent) {\r\n    this._emitChipEnd(event);\r\n  }\r\n\r\n  /** Checks to see if the blur should emit the (chipEnd) event. */\r\n  _blur() {\r\n    if (this.addOnBlur) {\r\n      this._emitChipEnd();\r\n    }\r\n    this.focused = false;\r\n    // Blur the chip list if it is not focused\r\n    if (!this._chipList.focused) {\r\n      this._chipList._blur();\r\n    }\r\n    this._chipList.stateChanges.next();\r\n  }\r\n\r\n  _focus() {\r\n    this.focused = true;\r\n    this._chipList.stateChanges.next();\r\n  }\r\n\r\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\r\n  _emitChipEnd(event?: KeyboardEvent) {\r\n    if (!this._inputElement.value && !!event) {\r\n      this._chipList._keydown(event);\r\n    }\r\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\r\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\r\n\r\n      if (event) {\r\n        event.preventDefault();\r\n      }\r\n    }\r\n  }\r\n\r\n  _onInput() {\r\n    // Let chip list know whenever the value changes.\r\n    this._chipList.stateChanges.next();\r\n  }\r\n\r\n  /** Focuses the input. */\r\n  focus(): void { this._inputElement.focus(); }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {ErrorStateMatcher} from '@angular/material/core';\r\nimport {MatChipList} from './chip-list';\r\nimport {MatBasicChip, MatChip, MatChipRemove} from './chip';\r\nimport {MatChipInput} from './chip-input';\r\n\r\n\r\n@NgModule({\r\n  imports: [],\r\n  exports: [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipRemove, MatBasicChip],\r\n  declarations: [MatChipList, MatChip, MatChipInput, MatChipRemove,  MatChipRemove, MatBasicChip],\r\n  providers: [ErrorStateMatcher]\r\n})\r\nexport class MatChipsModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ViewContainerRef} from '@angular/core';\r\nimport {Direction} from '@angular/cdk/bidi';\r\nimport {ScrollStrategy} from '@angular/cdk/overlay';\r\n\r\n/** Valid ARIA roles for a dialog element. */\r\nexport type DialogRole = 'dialog' | 'alertdialog';\r\n\r\n/** Possible overrides for a dialog's position. */\r\nexport interface DialogPosition {\r\n  /** Override for the dialog's top position. */\r\n  top?: string;\r\n\r\n  /** Override for the dialog's bottom position. */\r\n  bottom?: string;\r\n\r\n  /** Override for the dialog's left position. */\r\n  left?: string;\r\n\r\n  /** Override for the dialog's right position. */\r\n  right?: string;\r\n}\r\n\r\n/**\r\n * Configuration for opening a modal dialog with the MatDialog service.\r\n */\r\nexport class MatDialogConfig<D = any> {\r\n\r\n  /**\r\n   * Where the attached component should live in Angular's *logical* component tree.\r\n   * This affects what is available for injection and the change detection order for the\r\n   * component instantiated inside of the dialog. This does not affect where the dialog\r\n   * content will be rendered.\r\n   */\r\n  viewContainerRef?: ViewContainerRef;\r\n\r\n  /** ID for the dialog. If omitted, a unique one will be generated. */\r\n  id?: string;\r\n\r\n  /** The ARIA role of the dialog element. */\r\n  role?: DialogRole = 'dialog';\r\n\r\n  /** Custom class for the overlay pane. */\r\n  panelClass?: string | string[] = '';\r\n\r\n  /** Whether the dialog has a backdrop. */\r\n  hasBackdrop?: boolean = true;\r\n\r\n  /** Custom class for the backdrop, */\r\n  backdropClass?: string = '';\r\n\r\n  /** Whether the user can use escape or clicking outside to close a modal. */\r\n  disableClose?: boolean = false;\r\n\r\n  /** Width of the dialog. */\r\n  width?: string = '';\r\n\r\n  /** Height of the dialog. */\r\n  height?: string = '';\r\n\r\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\r\n  minWidth?: number | string;\r\n\r\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\r\n  minHeight?: number | string;\r\n\r\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\r\n  maxWidth?: number | string = '80vw';\r\n\r\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\r\n  maxHeight?: number | string;\r\n\r\n  /** Position overrides. */\r\n  position?: DialogPosition;\r\n\r\n  /** Data being injected into the child component. */\r\n  data?: D | null = null;\r\n\r\n  /** Layout direction for the dialog's content. */\r\n  direction?: Direction = 'ltr';\r\n\r\n  /** ID of the element that describes the dialog. */\r\n  ariaDescribedBy?: string | null = null;\r\n\r\n  /** Aria label to assign to the dialog element */\r\n  ariaLabel?: string | null = null;\r\n\r\n  /** Whether the dialog should focus the first focusable element on open. */\r\n  autoFocus?: boolean = true;\r\n\r\n  /** Scroll strategy to be used for the dialog. */\r\n  scrollStrategy?: ScrollStrategy;\r\n\r\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\r\n  closeOnNavigation?: boolean = true;\r\n\r\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {\r\n  animate,\r\n  state,\r\n  style,\r\n  transition,\r\n  trigger,\r\n  AnimationTriggerMetadata,\r\n} from '@angular/animations';\r\n\r\n/** Animations used by MatDialog. */\r\nexport const matDialogAnimations: {\r\n  readonly slideDialog: AnimationTriggerMetadata;\r\n} = {\r\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\r\n  slideDialog: trigger('slideDialog', [\r\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\r\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\r\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\r\n    // solves both issues.\r\n    state('enter', style({ transform: 'none', opacity: 1 })),\r\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\r\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\r\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\r\n  ])\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  Component,\r\n  ComponentRef,\r\n  ElementRef,\r\n  EmbeddedViewRef,\r\n  EventEmitter,\r\n  Inject,\r\n  Optional,\r\n  ChangeDetectorRef,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n} from '@angular/core';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {AnimationEvent} from '@angular/animations';\r\nimport {matDialogAnimations} from './dialog-animations';\r\nimport {\r\n  BasePortalOutlet,\r\n  ComponentPortal,\r\n  CdkPortalOutlet,\r\n  TemplatePortal\r\n} from '@angular/cdk/portal';\r\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\r\nimport {MatDialogConfig} from './dialog-config';\r\n\r\n\r\n/**\r\n * Throws an exception for the case when a ComponentPortal is\r\n * attached to a DomPortalOutlet without an origin.\r\n * @docs-private\r\n */\r\nexport function throwMatDialogContentAlreadyAttachedError() {\r\n  throw Error('Attempting to attach dialog content after content is already attached');\r\n}\r\n\r\n/**\r\n * Internal component that wraps user-provided dialog content.\r\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\r\n * @docs-private\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-dialog-container',\r\n  templateUrl: 'dialog-container.html',\r\n  styleUrls: ['dialog.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\r\n  // tslint:disable-next-line:validate-decorators\r\n  changeDetection: ChangeDetectionStrategy.Default,\r\n  animations: [matDialogAnimations.slideDialog],\r\n  host: {\r\n    'class': 'mat-dialog-container',\r\n    'tabindex': '-1',\r\n    '[attr.id]': '_id',\r\n    '[attr.role]': '_config?.role',\r\n    '[attr.aria-labelledby]': '_config?.ariaLabel ? null : _ariaLabelledBy',\r\n    '[attr.aria-label]': '_config?.ariaLabel',\r\n    '[attr.aria-describedby]': '_config?.ariaDescribedBy || null',\r\n    '[@slideDialog]': '_state',\r\n    '(@slideDialog.start)': '_onAnimationStart($event)',\r\n    '(@slideDialog.done)': '_onAnimationDone($event)',\r\n  },\r\n})\r\nexport class MatDialogContainer extends BasePortalOutlet {\r\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\r\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\r\n\r\n  /** The class that traps and manages focus within the dialog. */\r\n  private _focusTrap: FocusTrap;\r\n\r\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\r\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\r\n\r\n  /** The dialog configuration. */\r\n  _config: MatDialogConfig;\r\n\r\n  /** State of the dialog animation. */\r\n  _state: 'void' | 'enter' | 'exit' = 'enter';\r\n\r\n  /** Emits when an animation state changes. */\r\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\r\n\r\n  /** ID of the element that should be considered as the dialog's label. */\r\n  _ariaLabelledBy: string | null = null;\r\n\r\n  /** ID for the container DOM element. */\r\n  _id: string;\r\n\r\n  constructor(\r\n    private _elementRef: ElementRef,\r\n    private _focusTrapFactory: FocusTrapFactory,\r\n    private _changeDetectorRef: ChangeDetectorRef,\r\n    @Optional() @Inject(DOCUMENT) private _document: any) {\r\n\r\n    super();\r\n  }\r\n\r\n  /**\r\n   * Attach a ComponentPortal as content to this dialog container.\r\n   * @param portal Portal to be attached as the dialog content.\r\n   */\r\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\r\n    if (this._portalOutlet.hasAttached()) {\r\n      throwMatDialogContentAlreadyAttachedError();\r\n    }\r\n\r\n    this._savePreviouslyFocusedElement();\r\n    return this._portalOutlet.attachComponentPortal(portal);\r\n  }\r\n\r\n  /**\r\n   * Attach a TemplatePortal as content to this dialog container.\r\n   * @param portal Portal to be attached as the dialog content.\r\n   */\r\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\r\n    if (this._portalOutlet.hasAttached()) {\r\n      throwMatDialogContentAlreadyAttachedError();\r\n    }\r\n\r\n    this._savePreviouslyFocusedElement();\r\n    return this._portalOutlet.attachTemplatePortal(portal);\r\n  }\r\n\r\n  /** Moves the focus inside the focus trap. */\r\n  private _trapFocus() {\r\n    if (!this._focusTrap) {\r\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\r\n    }\r\n\r\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\r\n    // ready in instances where change detection has to run first. To deal with this, we simply\r\n    // wait for the microtask queue to be empty.\r\n    if (this._config.autoFocus) {\r\n      this._focusTrap.focusInitialElementWhenReady();\r\n    }\r\n  }\r\n\r\n  /** Restores focus to the element that was focused before the dialog opened. */\r\n  private _restoreFocus() {\r\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\r\n\r\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\r\n    if (toFocus && typeof toFocus.focus === 'function') {\r\n      toFocus.focus();\r\n    }\r\n\r\n    if (this._focusTrap) {\r\n      this._focusTrap.destroy();\r\n    }\r\n  }\r\n\r\n  /** Saves a reference to the element that was focused before the dialog was opened. */\r\n  private _savePreviouslyFocusedElement() {\r\n    if (this._document) {\r\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\r\n\r\n      // Note that there is no focus method when rendering on the server.\r\n      if (this._elementRef.nativeElement.focus) {\r\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\r\n        // opening multiple dialogs at the same time. Needs to be async, because the element\r\n        // may not be focusable immediately.\r\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Callback, invoked whenever an animation on the host completes. */\r\n  _onAnimationDone(event: AnimationEvent) {\r\n    if (event.toState === 'enter') {\r\n      this._trapFocus();\r\n    } else if (event.toState === 'exit') {\r\n      this._restoreFocus();\r\n    }\r\n\r\n    this._animationStateChanged.emit(event);\r\n  }\r\n\r\n  /** Callback, invoked when an animation on the host starts. */\r\n  _onAnimationStart(event: AnimationEvent) {\r\n    this._animationStateChanged.emit(event);\r\n  }\r\n\r\n  /** Starts the dialog exit animation. */\r\n  _startExitAnimation(): void {\r\n    this._state = 'exit';\r\n\r\n    // Mark the container for check so it can react if the\r\n    // view container is using OnPush change detection.\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {OverlayRef, GlobalPositionStrategy} from '@angular/cdk/overlay';\r\nimport {ESCAPE} from '@angular/cdk/keycodes';\r\nimport {Location} from '@angular/common';\r\nimport {filter} from 'rxjs/operators/filter';\r\nimport {take} from 'rxjs/operators/take';\r\nimport {DialogPosition} from './dialog-config';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {Subscription, ISubscription} from 'rxjs/Subscription';\r\nimport {MatDialogContainer} from './dialog-container';\r\n\r\n\r\n// TODO(jelbourn): resizing\r\n\r\n// Counter for unique dialog ids.\r\nlet uniqueId = 0;\r\n\r\n/**\r\n * Reference to a dialog opened via the MatDialog service.\r\n */\r\nexport class MatDialogRef<T, R = any> {\r\n  /** The instance of component opened into the dialog. */\r\n  componentInstance: T;\r\n\r\n  /** Whether the user is allowed to close the dialog. */\r\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\r\n\r\n  /** Subject for notifying the user that the dialog has finished opening. */\r\n  private readonly _afterOpen = new Subject<void>();\r\n\r\n  /** Subject for notifying the user that the dialog has finished closing. */\r\n  private readonly _afterClosed = new Subject<R | undefined>();\r\n\r\n  /** Subject for notifying the user that the dialog has started closing. */\r\n  private readonly _beforeClose = new Subject<R | undefined>();\r\n\r\n  /** Result to be passed to afterClosed. */\r\n  private _result: R | undefined;\r\n\r\n  /** Subscription to changes in the user's location. */\r\n  private _locationChanges: ISubscription = Subscription.EMPTY;\r\n\r\n  constructor(\r\n    private _overlayRef: OverlayRef,\r\n    public _containerInstance: MatDialogContainer,\r\n    location?: Location,\r\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\r\n\r\n    // Pass the id along to the container.\r\n    _containerInstance._id = id;\r\n\r\n    // Emit when opening animation completes\r\n    _containerInstance._animationStateChanged.pipe(\r\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\r\n      take(1)\r\n    )\r\n    .subscribe(() => {\r\n      this._afterOpen.next();\r\n      this._afterOpen.complete();\r\n    });\r\n\r\n    // Dispose overlay when closing animation is complete\r\n    _containerInstance._animationStateChanged.pipe(\r\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\r\n      take(1)\r\n    )\r\n    .subscribe(() => {\r\n      this._overlayRef.dispose();\r\n      this._locationChanges.unsubscribe();\r\n      this._afterClosed.next(this._result);\r\n      this._afterClosed.complete();\r\n      this.componentInstance = null!;\r\n    });\r\n\r\n    _overlayRef.keydownEvents()\r\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\r\n      .subscribe(() => this.close());\r\n\r\n    if (location) {\r\n      // Close the dialog when the user goes forwards/backwards in history or when the location\r\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\r\n      // is using the `HashLocationStrategy`).\r\n      this._locationChanges = location.subscribe(() => {\r\n        if (this._containerInstance._config.closeOnNavigation) {\r\n          this.close();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Close the dialog.\r\n   * @param dialogResult Optional result to return to the dialog opener.\r\n   */\r\n  close(dialogResult?: R): void {\r\n    this._result = dialogResult;\r\n\r\n    // Transition the backdrop in parallel to the dialog.\r\n    this._containerInstance._animationStateChanged.pipe(\r\n      filter(event => event.phaseName === 'start'),\r\n      take(1)\r\n    )\r\n    .subscribe(() => {\r\n      this._beforeClose.next(dialogResult);\r\n      this._beforeClose.complete();\r\n      this._overlayRef.detachBackdrop();\r\n    });\r\n\r\n    this._containerInstance._startExitAnimation();\r\n  }\r\n\r\n  /**\r\n   * Gets an observable that is notified when the dialog is finished opening.\r\n   */\r\n  afterOpen(): Observable<void> {\r\n    return this._afterOpen.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Gets an observable that is notified when the dialog is finished closing.\r\n   */\r\n  afterClosed(): Observable<R | undefined> {\r\n    return this._afterClosed.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Gets an observable that is notified when the dialog has started closing.\r\n   */\r\n  beforeClose(): Observable<R | undefined> {\r\n    return this._beforeClose.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\r\n   */\r\n  backdropClick(): Observable<MouseEvent> {\r\n    return this._overlayRef.backdropClick();\r\n  }\r\n\r\n  /**\r\n   * Gets an observable that emits when keydown events are targeted on the overlay.\r\n   */\r\n  keydownEvents(): Observable<KeyboardEvent> {\r\n    return this._overlayRef.keydownEvents();\r\n  }\r\n\r\n  /**\r\n   * Updates the dialog's position.\r\n   * @param position New dialog position.\r\n   */\r\n  updatePosition(position?: DialogPosition): this {\r\n    let strategy = this._getPositionStrategy();\r\n\r\n    if (position && (position.left || position.right)) {\r\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\r\n    } else {\r\n      strategy.centerHorizontally();\r\n    }\r\n\r\n    if (position && (position.top || position.bottom)) {\r\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\r\n    } else {\r\n      strategy.centerVertically();\r\n    }\r\n\r\n    this._overlayRef.updatePosition();\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Updates the dialog's width and height.\r\n   * @param width New width of the dialog.\r\n   * @param height New height of the dialog.\r\n   */\r\n  updateSize(width: string = 'auto', height: string = 'auto'): this {\r\n    this._getPositionStrategy().width(width).height(height);\r\n    this._overlayRef.updatePosition();\r\n    return this;\r\n  }\r\n\r\n  /** Fetches the position strategy object from the overlay ref. */\r\n  private _getPositionStrategy(): GlobalPositionStrategy {\r\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {\r\n  Overlay,\r\n  OverlayConfig,\r\n  OverlayRef,\r\n  ScrollStrategy,\r\n  OverlayContainer,\r\n} from '@angular/cdk/overlay';\r\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\r\nimport {Location} from '@angular/common';\r\nimport {\r\n  ComponentRef,\r\n  Inject,\r\n  Injectable,\r\n  InjectionToken,\r\n  Injector,\r\n  Optional,\r\n  SkipSelf,\r\n  TemplateRef,\r\n} from '@angular/core';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {defer} from 'rxjs/observable/defer';\r\nimport {of as observableOf} from 'rxjs/observable/of';\r\nimport {startWith} from 'rxjs/operators/startWith';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {MatDialogConfig} from './dialog-config';\r\nimport {MatDialogContainer} from './dialog-container';\r\nimport {MatDialogRef} from './dialog-ref';\r\n\r\n/** Injection token that can be used to access the data that was passed in to a dialog. */\r\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\r\n\r\n/** Injection token that can be used to specify default dialog options. */\r\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\r\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\r\n\r\n/** Injection token that determines the scroll handling while the dialog is open. */\r\nexport const MAT_DIALOG_SCROLL_STRATEGY =\r\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\r\n\r\n/** @docs-private */\r\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\r\n    () => ScrollStrategy {\r\n  return () => overlay.scrollStrategies.block();\r\n}\r\n\r\n/** @docs-private */\r\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\r\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\r\n  deps: [Overlay],\r\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\r\n};\r\n\r\n\r\n/**\r\n * Service to open Material Design modal dialogs.\r\n */\r\n@Injectable()\r\nexport class MatDialog {\r\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\r\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\r\n  private readonly _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\r\n  private _ariaHiddenElements = new Map<Element, string|null>();\r\n\r\n  /** Keeps track of the currently-open dialogs. */\r\n  get openDialogs(): MatDialogRef<any>[] {\r\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\r\n  }\r\n\r\n  /** Stream that emits when a dialog has been opened. */\r\n  get afterOpen(): Subject<MatDialogRef<any>> {\r\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\r\n  }\r\n\r\n  get _afterAllClosed() {\r\n    const parent = this._parentDialog;\r\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\r\n  }\r\n\r\n  /**\r\n   * Stream that emits when all open dialog have finished closing.\r\n   * Will emit on subscribe if there are no open dialogs to begin with.\r\n   */\r\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\r\n      this._afterAllClosed :\r\n      this._afterAllClosed.pipe(startWith(undefined)));\r\n\r\n  constructor(\r\n      private _overlay: Overlay,\r\n      private _injector: Injector,\r\n      @Optional() private _location: Location,\r\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\r\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\r\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\r\n      private _overlayContainer: OverlayContainer) {}\r\n\r\n  /**\r\n   * Opens a modal dialog containing the given component.\r\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\r\n   *     or a TemplateRef to instantiate as the dialog content.\r\n   * @param config Extra configuration options.\r\n   * @returns Reference to the newly-opened dialog.\r\n   */\r\n  open<T, D = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\r\n          config?: MatDialogConfig<D>): MatDialogRef<T> {\r\n\r\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\r\n\r\n    if (config.id && this.getDialogById(config.id)) {\r\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\r\n    }\r\n\r\n    const overlayRef = this._createOverlay(config);\r\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\r\n    const dialogRef =\r\n        this._attachDialogContent<T>(componentOrTemplateRef, dialogContainer, overlayRef, config);\r\n\r\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\r\n    if (!this.openDialogs.length) {\r\n      this._hideNonDialogContentFromAssistiveTechnology();\r\n    }\r\n\r\n    this.openDialogs.push(dialogRef);\r\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\r\n    this.afterOpen.next(dialogRef);\r\n\r\n    return dialogRef;\r\n  }\r\n\r\n  /**\r\n   * Closes all of the currently-open dialogs.\r\n   */\r\n  closeAll(): void {\r\n    let i = this.openDialogs.length;\r\n\r\n    while (i--) {\r\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\r\n      // runs on the next microtask, in addition to modifying the array as we're going\r\n      // through it. We loop through all of them and call close without assuming that\r\n      // they'll be removed from the list instantaneously.\r\n      this.openDialogs[i].close();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Finds an open dialog by its id.\r\n   * @param id ID to use when looking up the dialog.\r\n   */\r\n  getDialogById(id: string): MatDialogRef<any> | undefined {\r\n    return this.openDialogs.find(dialog => dialog.id === id);\r\n  }\r\n\r\n  /**\r\n   * Creates the overlay into which the dialog will be loaded.\r\n   * @param config The dialog configuration.\r\n   * @returns A promise resolving to the OverlayRef for the created overlay.\r\n   */\r\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\r\n    const overlayConfig = this._getOverlayConfig(config);\r\n    return this._overlay.create(overlayConfig);\r\n  }\r\n\r\n  /**\r\n   * Creates an overlay config from a dialog config.\r\n   * @param dialogConfig The dialog configuration.\r\n   * @returns The overlay configuration.\r\n   */\r\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\r\n    const state = new OverlayConfig({\r\n      positionStrategy: this._overlay.position().global(),\r\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\r\n      panelClass: dialogConfig.panelClass,\r\n      hasBackdrop: dialogConfig.hasBackdrop,\r\n      direction: dialogConfig.direction,\r\n      minWidth: dialogConfig.minWidth,\r\n      minHeight: dialogConfig.minHeight,\r\n      maxWidth: dialogConfig.maxWidth,\r\n      maxHeight: dialogConfig.maxHeight\r\n    });\r\n\r\n    if (dialogConfig.backdropClass) {\r\n      state.backdropClass = dialogConfig.backdropClass;\r\n    }\r\n\r\n    return state;\r\n  }\r\n\r\n  /**\r\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\r\n   * @param overlay Reference to the dialog's underlying overlay.\r\n   * @param config The dialog configuration.\r\n   * @returns A promise resolving to a ComponentRef for the attached container.\r\n   */\r\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\r\n    let containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef);\r\n    let containerRef: ComponentRef<MatDialogContainer> = overlay.attach(containerPortal);\r\n    containerRef.instance._config = config;\r\n\r\n    return containerRef.instance;\r\n  }\r\n\r\n  /**\r\n   * Attaches the user-provided component to the already-created MatDialogContainer.\r\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\r\n   *     or a TemplateRef to instantiate as the content.\r\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\r\n   * @param overlayRef Reference to the overlay in which the dialog resides.\r\n   * @param config The dialog configuration.\r\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\r\n   */\r\n  private _attachDialogContent<T>(\r\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\r\n      dialogContainer: MatDialogContainer,\r\n      overlayRef: OverlayRef,\r\n      config: MatDialogConfig): MatDialogRef<T> {\r\n\r\n    // Create a reference to the dialog we're creating in order to give the user a handle\r\n    // to modify and close it.\r\n    const dialogRef = new MatDialogRef<T>(overlayRef, dialogContainer, this._location, config.id);\r\n\r\n    // When the dialog backdrop is clicked, we want to close it.\r\n    if (config.hasBackdrop) {\r\n      overlayRef.backdropClick().subscribe(() => {\r\n        if (!dialogRef.disableClose) {\r\n          dialogRef.close();\r\n        }\r\n      });\r\n    }\r\n\r\n    if (componentOrTemplateRef instanceof TemplateRef) {\r\n      dialogContainer.attachTemplatePortal(\r\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\r\n          <any>{ $implicit: config.data, dialogRef }));\r\n    } else {\r\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\r\n      const contentRef = dialogContainer.attachComponentPortal<T>(\r\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\r\n      dialogRef.componentInstance = contentRef.instance;\r\n    }\r\n\r\n    dialogRef\r\n      .updateSize(config.width, config.height)\r\n      .updatePosition(config.position);\r\n\r\n    return dialogRef;\r\n  }\r\n\r\n  /**\r\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\r\n   * of a dialog to close itself and, optionally, to return a value.\r\n   * @param config Config object that is used to construct the dialog.\r\n   * @param dialogRef Reference to the dialog.\r\n   * @param container Dialog container element that wraps all of the contents.\r\n   * @returns The custom injector that can be used inside the dialog.\r\n   */\r\n  private _createInjector<T>(\r\n      config: MatDialogConfig,\r\n      dialogRef: MatDialogRef<T>,\r\n      dialogContainer: MatDialogContainer): PortalInjector {\r\n\r\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\r\n    const injectionTokens = new WeakMap();\r\n\r\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\r\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\r\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\r\n    // added to the injection tokens.\r\n    injectionTokens\r\n      .set(MatDialogContainer, dialogContainer)\r\n      .set(MAT_DIALOG_DATA, config.data)\r\n      .set(MatDialogRef, dialogRef);\r\n\r\n    if (!userInjector || !userInjector.get(Directionality, null)) {\r\n      injectionTokens.set(Directionality, {\r\n        value: config.direction,\r\n        change: observableOf()\r\n      });\r\n    }\r\n\r\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\r\n  }\r\n\r\n  /**\r\n   * Removes a dialog from the array of open dialogs.\r\n   * @param dialogRef Dialog to be removed.\r\n   */\r\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\r\n    const index = this.openDialogs.indexOf(dialogRef);\r\n\r\n    if (index > -1) {\r\n      this.openDialogs.splice(index, 1);\r\n\r\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\r\n      // to a the siblings and emit to the `afterAllClosed` stream.\r\n      if (!this.openDialogs.length) {\r\n        this._ariaHiddenElements.forEach((previousValue, element) => {\r\n          if (previousValue) {\r\n            element.setAttribute('aria-hidden', previousValue);\r\n          } else {\r\n            element.removeAttribute('aria-hidden');\r\n          }\r\n        });\r\n\r\n        this._ariaHiddenElements.clear();\r\n        this._afterAllClosed.next();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Hides all of the content that isn't an overlay from assistive technology.\r\n   */\r\n  private _hideNonDialogContentFromAssistiveTechnology() {\r\n    const overlayContainer = this._overlayContainer.getContainerElement();\r\n\r\n    // Ensure that the overlay container is attached to the DOM.\r\n    if (overlayContainer.parentElement) {\r\n      const siblings = overlayContainer.parentElement.children;\r\n\r\n      for (let i = siblings.length - 1; i > -1; i--) {\r\n        let sibling = siblings[i];\r\n\r\n        if (sibling !== overlayContainer &&\r\n          sibling.nodeName !== 'SCRIPT' &&\r\n          sibling.nodeName !== 'STYLE' &&\r\n          !sibling.hasAttribute('aria-live')) {\r\n\r\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\r\n          sibling.setAttribute('aria-hidden', 'true');\r\n        }\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Applies default options to the dialog config.\r\n * @param config Config to be modified.\r\n * @param defaultOptions Default options provided.\r\n * @returns The new configuration object.\r\n */\r\nfunction _applyConfigDefaults(\r\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\r\n  return {...defaultOptions, ...config};\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  Directive,\r\n  Input,\r\n  OnChanges,\r\n  OnInit,\r\n  Optional,\r\n  SimpleChanges,\r\n  ElementRef,\r\n} from '@angular/core';\r\nimport {MatDialog} from './dialog';\r\nimport {MatDialogRef} from './dialog-ref';\r\n\r\n/** Counter used to generate unique IDs for dialog elements. */\r\nlet dialogElementUid = 0;\r\n\r\n/**\r\n * Button that will close the current dialog.\r\n */\r\n@Directive({\r\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\r\n  exportAs: 'matDialogClose',\r\n  host: {\r\n    '(click)': 'dialogRef.close(dialogResult)',\r\n    '[attr.aria-label]': 'ariaLabel',\r\n    'type': 'button', // Prevents accidental form submits.\r\n  }\r\n})\r\nexport class MatDialogClose implements OnInit, OnChanges {\r\n  /** Screenreader label for the button. */\r\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\r\n\r\n  /** Dialog close input. */\r\n  @Input('mat-dialog-close') dialogResult: any;\r\n\r\n  @Input('matDialogClose') _matDialogClose: any;\r\n\r\n  constructor(\r\n    @Optional() public dialogRef: MatDialogRef<any>,\r\n    private _elementRef: ElementRef,\r\n    private _dialog: MatDialog) {}\r\n\r\n  ngOnInit() {\r\n    if (!this.dialogRef) {\r\n      // When this directive is included in a dialog via TemplateRef (rather than being\r\n      // in a Component), the DialogRef isn't available via injection because embedded\r\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\r\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\r\n      // be resolved at constructor time.\r\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\r\n\r\n    if (proxiedChange) {\r\n      this.dialogResult = proxiedChange.currentValue;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\r\n */\r\n@Directive({\r\n  selector: '[mat-dialog-title], [matDialogTitle]',\r\n  exportAs: 'matDialogTitle',\r\n  host: {\r\n    'class': 'mat-dialog-title',\r\n    '[id]': 'id',\r\n  },\r\n})\r\nexport class MatDialogTitle implements OnInit {\r\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\r\n\r\n  constructor(\r\n    @Optional() private _dialogRef: MatDialogRef<any>,\r\n    private _elementRef: ElementRef,\r\n    private _dialog: MatDialog) {}\r\n\r\n  ngOnInit() {\r\n    if (!this._dialogRef) {\r\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\r\n    }\r\n\r\n    if (this._dialogRef) {\r\n      Promise.resolve().then(() => {\r\n        const container = this._dialogRef._containerInstance;\r\n\r\n        if (container && !container._ariaLabelledBy) {\r\n          container._ariaLabelledBy = this.id;\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Scrollable content container of a dialog.\r\n */\r\n@Directive({\r\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\r\n  host: {'class': 'mat-dialog-content'}\r\n})\r\nexport class MatDialogContent {}\r\n\r\n\r\n/**\r\n * Container for the bottom action buttons in a dialog.\r\n * Stays fixed to the bottom when scrolling.\r\n */\r\n@Directive({\r\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\r\n  host: {'class': 'mat-dialog-actions'}\r\n})\r\nexport class MatDialogActions {}\r\n\r\n\r\n/**\r\n * Finds the closest MatDialogRef to an element by looking at the DOM.\r\n * @param element Element relative to which to look for a dialog.\r\n * @param openDialogs References to the currently-open dialogs.\r\n */\r\nfunction getClosestDialog(element: ElementRef, openDialogs: MatDialogRef<any>[]) {\r\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\r\n\r\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\r\n    parent = parent.parentElement;\r\n  }\r\n\r\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {OverlayModule} from '@angular/cdk/overlay';\r\nimport {PortalModule} from '@angular/cdk/portal';\r\nimport {A11yModule} from '@angular/cdk/a11y';\r\nimport {MatCommonModule} from '@angular/material/core';\r\nimport {\r\n  MatDialog,\r\n  MAT_DIALOG_SCROLL_STRATEGY_PROVIDER\r\n} from './dialog';\r\nimport {MatDialogContainer} from './dialog-container';\r\nimport {\r\n  MatDialogClose,\r\n  MatDialogContent,\r\n  MatDialogTitle,\r\n  MatDialogActions\r\n} from './dialog-content-directives';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    OverlayModule,\r\n    PortalModule,\r\n    A11yModule,\r\n    MatCommonModule,\r\n  ],\r\n  exports: [\r\n    MatDialogContainer,\r\n    MatDialogClose,\r\n    MatDialogTitle,\r\n    MatDialogContent,\r\n    MatDialogActions,\r\n    MatCommonModule,\r\n  ],\r\n  declarations: [\r\n    MatDialogContainer,\r\n    MatDialogClose,\r\n    MatDialogTitle,\r\n    MatDialogActions,\r\n    MatDialogContent,\r\n  ],\r\n  providers: [\r\n    MatDialog,\r\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\r\n  ],\r\n  entryComponents: [MatDialogContainer],\r\n})\r\nexport class MatDialogModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  Directive,\r\n  ElementRef,\r\n  Input,\r\n  AfterViewInit,\r\n  DoCheck,\r\n  OnDestroy,\r\n  NgZone,\r\n} from '@angular/core';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {fromEvent} from 'rxjs/observable/fromEvent';\r\nimport {auditTime} from 'rxjs/operators/auditTime';\r\nimport {takeUntil} from 'rxjs/operators/takeUntil';\r\nimport {Subject} from 'rxjs/Subject';\r\n\r\n\r\n/**\r\n * Directive to automatically resize a textarea to fit its content.\r\n */\r\n@Directive({\r\n  selector: `textarea[mat-autosize], textarea[matTextareaAutosize]`,\r\n  exportAs: 'matTextareaAutosize',\r\n  host: {\r\n    'class': 'mat-autosize',\r\n    // Textarea elements that have the directive applied should have a single row by default.\r\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\r\n    'rows': '1',\r\n  },\r\n})\r\nexport class MatTextareaAutosize implements AfterViewInit, DoCheck, OnDestroy {\r\n  /** Keep track of the previous textarea value to avoid resizing when the value hasn't changed. */\r\n  private _previousValue: string;\r\n  private readonly _destroyed = new Subject<void>();\r\n\r\n  private _minRows: number;\r\n  private _maxRows: number;\r\n\r\n  /** Minimum amount of rows in the textarea. */\r\n  @Input('matAutosizeMinRows')\r\n  set minRows(value: number) {\r\n    this._minRows = value;\r\n    this._setMinHeight();\r\n  }\r\n  get minRows(): number { return this._minRows; }\r\n\r\n  /** Maximum amount of rows in the textarea. */\r\n  @Input('matAutosizeMaxRows')\r\n  get maxRows(): number { return this._maxRows; }\r\n  set maxRows(value: number) {\r\n    this._maxRows = value;\r\n    this._setMaxHeight();\r\n  }\r\n\r\n  /** Cached height of a textarea with a single row. */\r\n  private _cachedLineHeight: number;\r\n\r\n  constructor(\r\n    private _elementRef: ElementRef,\r\n    private _platform: Platform,\r\n    private _ngZone?: NgZone) {}\r\n\r\n  // TODO(crisbeto): make the `_ngZone` a required param in the next major version.\r\n\r\n  /** Sets the minimum height of the textarea as determined by minRows. */\r\n  _setMinHeight(): void {\r\n    const minHeight = this.minRows && this._cachedLineHeight ?\r\n        `${this.minRows * this._cachedLineHeight}px` : null;\r\n\r\n    if (minHeight)  {\r\n      this._setTextareaStyle('minHeight', minHeight);\r\n    }\r\n  }\r\n\r\n  /** Sets the maximum height of the textarea as determined by maxRows. */\r\n  _setMaxHeight(): void {\r\n    const maxHeight = this.maxRows && this._cachedLineHeight ?\r\n        `${this.maxRows * this._cachedLineHeight}px` : null;\r\n\r\n    if (maxHeight) {\r\n      this._setTextareaStyle('maxHeight', maxHeight);\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    if (this._platform.isBrowser) {\r\n      this.resizeToFitContent();\r\n\r\n      if (this._ngZone) {\r\n        this._ngZone.runOutsideAngular(() => {\r\n          fromEvent(window, 'resize')\r\n            .pipe(auditTime(16), takeUntil(this._destroyed))\r\n            .subscribe(() => this.resizeToFitContent(true));\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._destroyed.next();\r\n    this._destroyed.complete();\r\n  }\r\n\r\n  /** Sets a style property on the textarea element. */\r\n  private _setTextareaStyle(property: string, value: string): void {\r\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\r\n    textarea.style[property] = value;\r\n  }\r\n\r\n  /**\r\n   * Cache the height of a single-row textarea if it has not already been cached.\r\n   *\r\n   * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\r\n   * maxRows. For the initial version, we will assume that the height of a single line in the\r\n   * textarea does not ever change.\r\n   */\r\n  private _cacheTextareaLineHeight(): void {\r\n    if (this._cachedLineHeight) {\r\n      return;\r\n    }\r\n\r\n    let textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\r\n\r\n    // Use a clone element because we have to override some styles.\r\n    let textareaClone = textarea.cloneNode(false) as HTMLTextAreaElement;\r\n    textareaClone.rows = 1;\r\n\r\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\r\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\r\n    // would affect the height.\r\n    textareaClone.style.position = 'absolute';\r\n    textareaClone.style.visibility = 'hidden';\r\n    textareaClone.style.border = 'none';\r\n    textareaClone.style.padding = '0';\r\n    textareaClone.style.height = '';\r\n    textareaClone.style.minHeight = '';\r\n    textareaClone.style.maxHeight = '';\r\n\r\n    // In Firefox it happens that textarea elements are always bigger than the specified amount\r\n    // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\r\n    // As a workaround that removes the extra space for the scrollbar, we can just set overflow\r\n    // to hidden. This ensures that there is no invalid calculation of the line height.\r\n    // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\r\n    textareaClone.style.overflow = 'hidden';\r\n\r\n    textarea.parentNode!.appendChild(textareaClone);\r\n    this._cachedLineHeight = textareaClone.clientHeight;\r\n    textarea.parentNode!.removeChild(textareaClone);\r\n\r\n    // Min and max heights have to be re-calculated if the cached line height changes\r\n    this._setMinHeight();\r\n    this._setMaxHeight();\r\n  }\r\n\r\n  ngDoCheck() {\r\n    if (this._platform.isBrowser) {\r\n      this.resizeToFitContent();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Resize the textarea to fit its content.\r\n   * @param force Whether to force a height recalculation. By default the height will be\r\n   *    recalculated only if the value changed since the last call.\r\n   */\r\n  resizeToFitContent(force: boolean = false) {\r\n    this._cacheTextareaLineHeight();\r\n\r\n    // If we haven't determined the line-height yet, we know we're still hidden and there's no point\r\n    // in checking the height of the textarea.\r\n    if (!this._cachedLineHeight) {\r\n      return;\r\n    }\r\n\r\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\r\n    const value = textarea.value;\r\n\r\n    // Only resize of the value changed since these calculations can be expensive.\r\n    if (value === this._previousValue && !force) {\r\n      return;\r\n    }\r\n\r\n    const placeholderText = textarea.placeholder;\r\n\r\n    // Reset the textarea height to auto in order to shrink back to its default size.\r\n    // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\r\n    // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\r\n    // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\r\n    // need to be removed temporarily.\r\n    textarea.style.height = 'auto';\r\n    textarea.style.overflow = 'hidden';\r\n    textarea.placeholder = '';\r\n\r\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\r\n    textarea.style.height = `${textarea.scrollHeight}px`;\r\n    textarea.style.overflow = '';\r\n    textarea.placeholder = placeholderText;\r\n\r\n    this._previousValue = value;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {InjectionToken} from '@angular/core';\r\n\r\n\r\n/**\r\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\r\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\r\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\r\n * value to them.\r\n */\r\nexport const MAT_INPUT_VALUE_ACCESSOR =\r\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\r\nimport {\r\n  Directive,\r\n  DoCheck,\r\n  ElementRef,\r\n  Inject,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Optional,\r\n  Self,\r\n} from '@angular/core';\r\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\r\nimport {ErrorStateMatcher, mixinErrorState, CanUpdateErrorState} from '@angular/material/core';\r\nimport {MatFormFieldControl} from '@angular/material/form-field';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {getMatInputUnsupportedTypeError} from './input-errors';\r\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\r\n\r\n\r\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\r\nconst MAT_INPUT_INVALID_TYPES = [\r\n  'button',\r\n  'checkbox',\r\n  'file',\r\n  'hidden',\r\n  'image',\r\n  'radio',\r\n  'range',\r\n  'reset',\r\n  'submit'\r\n];\r\n\r\nlet nextUniqueId = 0;\r\n\r\n// Boilerplate for applying mixins to MatInput.\r\n/** @docs-private */\r\nexport class MatInputBase {\r\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\r\n              public _parentForm: NgForm,\r\n              public _parentFormGroup: FormGroupDirective,\r\n              /** @docs-private */\r\n              public ngControl: NgControl) {}\r\n}\r\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\r\n\r\n/** Directive that allows a native input to work inside a `MatFormField`. */\r\n@Directive({\r\n  selector: `input[matInput], textarea[matInput]`,\r\n  exportAs: 'matInput',\r\n  host: {\r\n    'class': 'mat-input-element mat-form-field-autofill-control',\r\n    '[class.mat-input-server]': '_isServer',\r\n    // Native input properties that are overwritten by Angular inputs need to be synced with\r\n    // the native input element. Otherwise property bindings for those don't work.\r\n    '[attr.id]': 'id',\r\n    '[placeholder]': 'placeholder',\r\n    '[disabled]': 'disabled',\r\n    '[required]': 'required',\r\n    '[readonly]': 'readonly',\r\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\r\n    '[attr.aria-invalid]': 'errorState',\r\n    '[attr.aria-required]': 'required.toString()',\r\n    '(blur)': '_focusChanged(false)',\r\n    '(focus)': '_focusChanged(true)',\r\n    '(input)': '_onInput()',\r\n  },\r\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\r\n})\r\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\r\n    OnDestroy, DoCheck, CanUpdateErrorState {\r\n  protected _uid = `mat-input-${nextUniqueId++}`;\r\n  protected _previousNativeValue: any;\r\n  private _inputValueAccessor: {value: any};\r\n  /** The aria-describedby attribute on the input for improved a11y. */\r\n  _ariaDescribedby: string;\r\n\r\n  /** Whether the component is being rendered on the server. */\r\n  _isServer = false;\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  focused: boolean = false;\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  readonly stateChanges: Subject<void> = new Subject<void>();\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  controlType: string = 'mat-input';\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  @Input()\r\n  get disabled(): boolean {\r\n    if (this.ngControl && this.ngControl.disabled !== null) {\r\n      return this.ngControl.disabled;\r\n    }\r\n    return this._disabled;\r\n  }\r\n  set disabled(value: boolean) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n\r\n    // Browsers may not fire the blur event if the input is disabled too quickly.\r\n    // Reset from here to ensure that the element doesn't become stuck.\r\n    if (this.focused) {\r\n      this.focused = false;\r\n      this.stateChanges.next();\r\n    }\r\n  }\r\n  protected _disabled = false;\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  @Input()\r\n  get id(): string { return this._id; }\r\n  set id(value: string) { this._id = value || this._uid; }\r\n  protected _id: string;\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  @Input() placeholder: string = '';\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  @Input()\r\n  get required(): boolean { return this._required; }\r\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\r\n  protected _required = false;\r\n\r\n  /** Input type of the element. */\r\n  @Input()\r\n  get type(): string { return this._type; }\r\n  set type(value: string) {\r\n    this._type = value || 'text';\r\n    this._validateType();\r\n\r\n    // When using Angular inputs, developers are no longer able to set the properties on the native\r\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\r\n    // with the native property. Textarea elements don't support the type property or attribute.\r\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\r\n      this._elementRef.nativeElement.type = this._type;\r\n    }\r\n  }\r\n  protected _type = 'text';\r\n\r\n  /** An object used to control when error messages are shown. */\r\n  @Input() errorStateMatcher: ErrorStateMatcher;\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  @Input()\r\n  get value(): string { return this._inputValueAccessor.value; }\r\n  set value(value: string) {\r\n    if (value !== this.value) {\r\n      this._inputValueAccessor.value = value;\r\n      this.stateChanges.next();\r\n    }\r\n  }\r\n\r\n  /** Whether the element is readonly. */\r\n  @Input()\r\n  get readonly(): boolean { return this._readonly; }\r\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\r\n  private _readonly = false;\r\n\r\n  protected _neverEmptyInputTypes = [\r\n    'date',\r\n    'datetime',\r\n    'datetime-local',\r\n    'month',\r\n    'time',\r\n    'week'\r\n  ].filter(t => getSupportedInputTypes().has(t));\r\n\r\n  constructor(protected _elementRef: ElementRef,\r\n              protected _platform: Platform,\r\n              /** @docs-private */\r\n              @Optional() @Self() public ngControl: NgControl,\r\n              @Optional() _parentForm: NgForm,\r\n              @Optional() _parentFormGroup: FormGroupDirective,\r\n              _defaultErrorStateMatcher: ErrorStateMatcher,\r\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any) {\r\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\r\n    // If no input value accessor was explicitly specified, use the element as the input value\r\n    // accessor.\r\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\r\n\r\n    this._previousNativeValue = this.value;\r\n\r\n    // Force setter to be called in case id was not specified.\r\n    this.id = this.id;\r\n\r\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\r\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\r\n    // exists on iOS, we only bother to install the listener on iOS.\r\n    if (_platform.IOS) {\r\n      _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\r\n        let el = event.target as HTMLInputElement;\r\n        if (!el.value && !el.selectionStart && !el.selectionEnd) {\r\n          // Note: Just setting `0, 0` doesn't fix the issue. Setting `1, 1` fixes it for the first\r\n          // time that you type text and then hold delete. Toggling to `1, 1` and then back to\r\n          // `0, 0` seems to completely fix it.\r\n          el.setSelectionRange(1, 1);\r\n          el.setSelectionRange(0, 0);\r\n        }\r\n      });\r\n    }\r\n\r\n    this._isServer = !this._platform.isBrowser;\r\n  }\r\n\r\n  ngOnChanges() {\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.stateChanges.complete();\r\n  }\r\n\r\n  ngDoCheck() {\r\n    if (this.ngControl) {\r\n      // We need to re-evaluate this on every change detection cycle, because there are some\r\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\r\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\r\n      this.updateErrorState();\r\n    }\r\n\r\n    // We need to dirty-check the native element's value, because there are some cases where\r\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\r\n    // updating the value using `emitEvent: false`).\r\n    this._dirtyCheckNativeValue();\r\n  }\r\n\r\n  /** Focuses the input. */\r\n  focus(): void { this._elementRef.nativeElement.focus(); }\r\n\r\n  /** Callback for the cases where the focused state of the input changes. */\r\n  _focusChanged(isFocused: boolean) {\r\n    if (isFocused !== this.focused && !this.readonly) {\r\n      this.focused = isFocused;\r\n      this.stateChanges.next();\r\n    }\r\n  }\r\n\r\n  _onInput() {\r\n    // This is a noop function and is used to let Angular know whenever the value changes.\r\n    // Angular will run a new change detection each time the `input` event has been dispatched.\r\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\r\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\r\n    // value changes and will not disappear.\r\n    // Listening to the input event wouldn't be necessary when the input is using the\r\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\r\n  }\r\n\r\n  /** Does some manual dirty checking on the native input `value` property. */\r\n  protected _dirtyCheckNativeValue() {\r\n    const newValue = this.value;\r\n\r\n    if (this._previousNativeValue !== newValue) {\r\n      this._previousNativeValue = newValue;\r\n      this.stateChanges.next();\r\n    }\r\n  }\r\n\r\n  /** Make sure the input is a supported type. */\r\n  protected _validateType() {\r\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\r\n      throw getMatInputUnsupportedTypeError(this._type);\r\n    }\r\n  }\r\n\r\n  /** Checks whether the input type is one of the types that are never empty. */\r\n  protected _isNeverEmpty() {\r\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\r\n  }\r\n\r\n  /** Checks whether the input is invalid based on the native validation. */\r\n  protected _isBadInput() {\r\n    // The `validity` property won't be present on platform-server.\r\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\r\n    return validity && validity.badInput;\r\n  }\r\n\r\n  /** Determines if the component host is a textarea. If not recognizable it returns false. */\r\n  protected _isTextarea() {\r\n    let nativeElement = this._elementRef.nativeElement;\r\n\r\n    // In Universal, we don't have access to `nodeName`, but the same can be achieved with `name`.\r\n    // Note that this shouldn't be necessary once Angular switches to an API that resembles the\r\n    // DOM closer.\r\n    let nodeName = this._platform.isBrowser ? nativeElement.nodeName : nativeElement.name;\r\n    return nodeName ? nodeName.toLowerCase() === 'textarea' : false;\r\n  }\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  get empty(): boolean {\r\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput();\r\n  }\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  onContainerClick() { this.focus(); }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {PlatformModule} from '@angular/cdk/platform';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {MatFormFieldModule} from '@angular/material/form-field';\r\nimport {MatTextareaAutosize} from './autosize';\r\nimport {MatInput} from './input';\r\nimport {ErrorStateMatcher} from '@angular/material/core';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    MatInput,\r\n    MatTextareaAutosize,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    MatFormFieldModule,\r\n    PlatformModule,\r\n  ],\r\n  exports: [\r\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\r\n    // be used together with `MatFormField`.\r\n    MatFormFieldModule,\r\n    MatInput,\r\n    MatTextareaAutosize,\r\n  ],\r\n  providers: [ErrorStateMatcher],\r\n})\r\nexport class MatInputModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Injectable} from '@angular/core';\r\nimport {Subject} from 'rxjs/Subject';\r\n\r\n\r\n/** Datepicker data that requires internationalization. */\r\n@Injectable()\r\nexport class MatDatepickerIntl {\r\n  /**\r\n   * Stream that emits whenever the labels here are changed. Use this to notify\r\n   * components if the labels have changed after initialization.\r\n   */\r\n  readonly changes: Subject<void> = new Subject<void>();\r\n\r\n  /** A label for the calendar popup (used by screen readers). */\r\n  calendarLabel: string = 'Calendar';\r\n\r\n  /** A label for the button used to open the calendar popup (used by screen readers). */\r\n  openCalendarLabel: string = 'Open calendar';\r\n\r\n  /** A label for the previous month button (used by screen readers). */\r\n  prevMonthLabel: string = 'Previous month';\r\n\r\n  /** A label for the next month button (used by screen readers). */\r\n  nextMonthLabel: string = 'Next month';\r\n\r\n  /** A label for the previous year button (used by screen readers). */\r\n  prevYearLabel: string = 'Previous year';\r\n\r\n  /** A label for the next year button (used by screen readers). */\r\n  nextYearLabel: string = 'Next year';\r\n\r\n  /** A label for the previous multi-year button (used by screen readers). */\r\n  prevMultiYearLabel: string = 'Previous 20 years';\r\n\r\n  /** A label for the next multi-year button (used by screen readers). */\r\n  nextMultiYearLabel: string = 'Next 20 years';\r\n\r\n  /** A label for the 'switch to month view' button (used by screen readers). */\r\n  switchToMonthViewLabel: string = 'Choose date';\r\n\r\n  /** A label for the 'switch to year view' button (used by screen readers). */\r\n  switchToMultiYearViewLabel: string = 'Choose month and year';\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\n\r\n\r\n/**\r\n * An internal class that represents the data corresponding to a single calendar cell.\r\n * @docs-private\r\n */\r\nexport class MatCalendarCell {\r\n  constructor(public value: number,\r\n              public displayValue: string,\r\n              public ariaLabel: string,\r\n              public enabled: boolean) {}\r\n}\r\n\r\n\r\n/**\r\n * An internal component used to display calendar data in a table.\r\n * @docs-private\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: '[mat-calendar-body]',\r\n  templateUrl: 'calendar-body.html',\r\n  styleUrls: ['calendar-body.css'],\r\n  host: {\r\n    'class': 'mat-calendar-body',\r\n    'role': 'grid',\r\n    'attr.aria-readonly': 'true'\r\n  },\r\n  exportAs: 'matCalendarBody',\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatCalendarBody {\r\n  /** The label for the table. (e.g. \"Jan 2017\"). */\r\n  @Input() label: string;\r\n\r\n  /** The cells to display in the table. */\r\n  @Input() rows: MatCalendarCell[][];\r\n\r\n  /** The value in the table that corresponds to today. */\r\n  @Input() todayValue: number;\r\n\r\n  /** The value in the table that is currently selected. */\r\n  @Input() selectedValue: number;\r\n\r\n  /** The minimum number of free cells needed to fit the label in the first row. */\r\n  @Input() labelMinRequiredCells: number;\r\n\r\n  /** The number of columns in the table. */\r\n  @Input() numCols = 7;\r\n\r\n  /** Whether to allow selection of disabled cells. */\r\n  @Input() allowDisabledSelection = false;\r\n\r\n  /** The cell number of the active cell in the table. */\r\n  @Input() activeCell = 0;\r\n\r\n  /**\r\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\r\n   * maintained even as the table resizes.\r\n   */\r\n  @Input() cellAspectRatio = 1;\r\n\r\n  /** Emits when a new value is selected. */\r\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\r\n\r\n  _cellClicked(cell: MatCalendarCell): void {\r\n    if (!this.allowDisabledSelection && !cell.enabled) {\r\n      return;\r\n    }\r\n    this.selectedValueChange.emit(cell.value);\r\n  }\r\n\r\n  /** The number of blank cells to put at the beginning for the first row. */\r\n  get _firstRowOffset(): number {\r\n    return this.rows && this.rows.length && this.rows[0].length ?\r\n        this.numCols - this.rows[0].length : 0;\r\n  }\r\n\r\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\r\n    let cellNumber = rowIndex * this.numCols + colIndex;\r\n\r\n    // Account for the fact that the first row may not have as many cells.\r\n    if (rowIndex) {\r\n      cellNumber -= this._firstRowOffset;\r\n    }\r\n\r\n    return cellNumber == this.activeCell;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  Component,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  Directive,\r\n  Input,\r\n} from '@angular/core';\r\n\r\n\r\n/**\r\n * Content of a card, needed as it's used as a selector in the API.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: 'mat-card-content',\r\n  host: {'class': 'mat-card-content'}\r\n})\r\nexport class MatCardContent {}\r\n\r\n/**\r\n * Title of a card, needed as it's used as a selector in the API.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\r\n  host: {\r\n    'class': 'mat-card-title'\r\n  }\r\n})\r\nexport class MatCardTitle {}\r\n\r\n/**\r\n * Sub-title of a card, needed as it's used as a selector in the API.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\r\n  host: {\r\n    'class': 'mat-card-subtitle'\r\n  }\r\n})\r\nexport class MatCardSubtitle {}\r\n\r\n/**\r\n * Action section of a card, needed as it's used as a selector in the API.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: 'mat-card-actions',\r\n  exportAs: 'matCardActions',\r\n  host: {\r\n    'class': 'mat-card-actions',\r\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\r\n  }\r\n})\r\nexport class MatCardActions {\r\n  /** Position of the actions inside the card. */\r\n  @Input() align: 'start' | 'end' = 'start';\r\n}\r\n\r\n/**\r\n * Footer of a card, needed as it's used as a selector in the API.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: 'mat-card-footer',\r\n  host: {'class': 'mat-card-footer'}\r\n})\r\nexport class MatCardFooter {}\r\n\r\n/**\r\n * Image used in a card, needed to add the mat- CSS styling.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: '[mat-card-image], [matCardImage]',\r\n  host: {'class': 'mat-card-image'}\r\n})\r\nexport class MatCardImage {}\r\n\r\n/**\r\n * Image used in a card, needed to add the mat- CSS styling.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\r\n  host: {'class': 'mat-card-sm-image'}\r\n})\r\nexport class MatCardSmImage {}\r\n\r\n/**\r\n * Image used in a card, needed to add the mat- CSS styling.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: '[mat-card-md-image], [matCardImageMedium]',\r\n  host: {'class': 'mat-card-md-image'}\r\n})\r\nexport class MatCardMdImage {}\r\n\r\n/**\r\n * Image used in a card, needed to add the mat- CSS styling.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\r\n  host: {'class': 'mat-card-lg-image'}\r\n})\r\nexport class MatCardLgImage {}\r\n\r\n/**\r\n * Large image used in a card, needed to add the mat- CSS styling.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\r\n  host: {'class': 'mat-card-xl-image'}\r\n})\r\nexport class MatCardXlImage {}\r\n\r\n/**\r\n * Avatar image used in a card, needed to add the mat- CSS styling.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: '[mat-card-avatar], [matCardAvatar]',\r\n  host: {'class': 'mat-card-avatar'}\r\n})\r\nexport class MatCardAvatar {}\r\n\r\n\r\n/**\r\n * A basic content container component that adds the styles of a Material design card.\r\n *\r\n * While this component can be used alone, it also provides a number\r\n * of preset styles for common card sections, including:\r\n * - mat-card-title\r\n * - mat-card-subtitle\r\n * - mat-card-content\r\n * - mat-card-actions\r\n * - mat-card-footer\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-card',\r\n  exportAs: 'matCard',\r\n  templateUrl: 'card.html',\r\n  styleUrls: ['card.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  host: {'class': 'mat-card'}\r\n})\r\nexport class MatCard {}\r\n\r\n\r\n/**\r\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\r\n * preset header section (i.e. a title, subtitle, and avatar layout).\r\n * @docs-private\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-card-header',\r\n  templateUrl: 'card-header.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  host: {'class': 'mat-card-header'}\r\n})\r\nexport class MatCardHeader {}\r\n\r\n\r\n/**\r\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\r\n * layout that groups an image with a title section.\r\n * @docs-private\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-card-title-group',\r\n  templateUrl: 'card-title-group.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  host: {'class': 'mat-card-title-group'}\r\n})\r\nexport class MatCardTitleGroup {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {MatCommonModule} from '@angular/material/core';\r\nimport {\r\n  MatCard,\r\n  MatCardHeader,\r\n  MatCardTitleGroup,\r\n  MatCardContent,\r\n  MatCardTitle,\r\n  MatCardSubtitle,\r\n  MatCardActions,\r\n  MatCardFooter,\r\n  MatCardSmImage,\r\n  MatCardMdImage,\r\n  MatCardLgImage,\r\n  MatCardImage,\r\n  MatCardXlImage,\r\n  MatCardAvatar,\r\n} from './card';\r\n\r\n\r\n@NgModule({\r\n  imports: [MatCommonModule],\r\n  exports: [\r\n    MatCard,\r\n    MatCardHeader,\r\n    MatCardTitleGroup,\r\n    MatCardContent,\r\n    MatCardTitle,\r\n    MatCardSubtitle,\r\n    MatCardActions,\r\n    MatCardFooter,\r\n    MatCardSmImage,\r\n    MatCardMdImage,\r\n    MatCardLgImage,\r\n    MatCardImage,\r\n    MatCardXlImage,\r\n    MatCardAvatar,\r\n    MatCommonModule,\r\n  ],\r\n  declarations: [\r\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\r\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\r\n    MatCardXlImage, MatCardAvatar,\r\n  ],\r\n})\r\nexport class MatCardModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {InjectionToken} from '@angular/core';\r\n\r\n\r\n/**\r\n * Checkbox click action when user click on input element.\r\n * noop: Do not toggle checked or indeterminate.\r\n * check: Only toggle checked status, ignore indeterminate.\r\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\r\n * undefined: Same as `check-indeterminate`.\r\n */\r\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\r\n\r\n/**\r\n * Injection token that can be used to specify the checkbox click behavior.\r\n */\r\nexport const MAT_CHECKBOX_CLICK_ACTION =\r\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {\r\n  AfterViewInit,\r\n  Attribute,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Inject,\r\n  Input,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {\r\n  CanColor,\r\n  CanDisable,\r\n  CanDisableRipple,\r\n  HasTabIndex,\r\n  MatRipple,\r\n  mixinColor,\r\n  mixinDisabled,\r\n  mixinDisableRipple,\r\n  mixinTabIndex,\r\n  RippleRef,\r\n} from '@angular/material/core';\r\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\r\n\r\n\r\n// Increasing integer for generating unique ids for checkbox components.\r\nlet nextUniqueId = 0;\r\n\r\n/**\r\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\r\n * This allows it to support [(ngModel)].\r\n * @docs-private\r\n */\r\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MatCheckbox),\r\n  multi: true\r\n};\r\n\r\n/**\r\n * Represents the different states that require custom transitions between them.\r\n * @docs-private\r\n */\r\nexport enum TransitionCheckState {\r\n  /** The initial state of the component before any user interaction. */\r\n  Init,\r\n  /** The state representing the component when it's becoming checked. */\r\n  Checked,\r\n  /** The state representing the component when it's becoming unchecked. */\r\n  Unchecked,\r\n  /** The state representing the component when it's becoming indeterminate. */\r\n  Indeterminate\r\n}\r\n\r\n/** Change event object emitted by MatCheckbox. */\r\nexport class MatCheckboxChange {\r\n  /** The source MatCheckbox of the event. */\r\n  source: MatCheckbox;\r\n  /** The new `checked` value of the checkbox. */\r\n  checked: boolean;\r\n}\r\n\r\n// Boilerplate for applying mixins to MatCheckbox.\r\n/** @docs-private */\r\nexport class MatCheckboxBase {\r\n  constructor(public _elementRef: ElementRef) {}\r\n}\r\nexport const _MatCheckboxMixinBase =\r\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\r\n\r\n\r\n/**\r\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\r\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\r\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\r\n * so there is no need to provide them yourself. However, if you want to omit a label and still\r\n * have the checkbox be accessible, you may supply an [aria-label] input.\r\n * See: https://www.google.com/design/spec/components/selection-controls.html\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-checkbox',\r\n  templateUrl: 'checkbox.html',\r\n  styleUrls: ['checkbox.css'],\r\n  exportAs: 'matCheckbox',\r\n  host: {\r\n    'class': 'mat-checkbox',\r\n    '[id]': 'id',\r\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\r\n    '[class.mat-checkbox-checked]': 'checked',\r\n    '[class.mat-checkbox-disabled]': 'disabled',\r\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\r\n  },\r\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\r\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\r\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\r\n\r\n  /**\r\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\r\n   * take precedence so this may be omitted.\r\n   */\r\n  @Input('aria-label') ariaLabel: string = '';\r\n\r\n  /**\r\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\r\n   */\r\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\r\n\r\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\r\n\r\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\r\n  @Input() id: string = this._uniqueId;\r\n\r\n  /** Returns the unique id for the visual hidden input. */\r\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\r\n\r\n  /** Whether the checkbox is required. */\r\n  @Input()\r\n  get required(): boolean { return this._required; }\r\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\r\n  private _required: boolean;\r\n\r\n  /**\r\n   * Whether or not the checkbox should appear before or after the label.\r\n   * @deprecated\r\n   * @deletion-target 6.0.0\r\n   */\r\n  @Input()\r\n  get align(): 'start' | 'end' {\r\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\r\n    // label relative to the checkbox. As such, they are inverted.\r\n    return this.labelPosition == 'after' ? 'start' : 'end';\r\n  }\r\n  set align(value: 'start' | 'end') {\r\n    this.labelPosition = (value == 'start') ? 'after' : 'before';\r\n  }\r\n\r\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\r\n  @Input() labelPosition: 'before' | 'after' = 'after';\r\n\r\n  /** Name value will be applied to the input element if present */\r\n  @Input() name: string | null = null;\r\n\r\n  /** Event emitted when the checkbox's `checked` value changes. */\r\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\r\n      new EventEmitter<MatCheckboxChange>();\r\n\r\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\r\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n\r\n  /** The value attribute of the native input element */\r\n  @Input() value: string;\r\n\r\n  /** The native `<input type=\"checkbox\">` element */\r\n  @ViewChild('input') _inputElement: ElementRef;\r\n\r\n  /** Reference to the ripple instance of the checkbox. */\r\n  @ViewChild(MatRipple) ripple: MatRipple;\r\n\r\n  /**\r\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\r\n   * @docs-private\r\n   */\r\n  _onTouched: () => any = () => {};\r\n\r\n  private _currentAnimationClass: string = '';\r\n\r\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\r\n\r\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\r\n\r\n  /** Reference to the focused state ripple. */\r\n  private _focusRipple: RippleRef | null;\r\n\r\n  constructor(elementRef: ElementRef,\r\n              private _changeDetectorRef: ChangeDetectorRef,\r\n              private _focusMonitor: FocusMonitor,\r\n              @Attribute('tabindex') tabIndex: string,\r\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\r\n                  private _clickAction: MatCheckboxClickAction) {\r\n    super(elementRef);\r\n\r\n    this.tabIndex = parseInt(tabIndex) || 0;\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this._focusMonitor\r\n      .monitor(this._inputElement.nativeElement)\r\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\r\n  }\r\n\r\n  /**\r\n   * Whether the checkbox is checked.\r\n   */\r\n  @Input()\r\n  get checked(): boolean { return this._checked; }\r\n  set checked(value: boolean) {\r\n    if (value != this.checked) {\r\n      this._checked = value;\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\r\n  private _checked: boolean = false;\r\n\r\n  /**\r\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\r\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\r\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\r\n   * set to false.\r\n   */\r\n  @Input()\r\n  get indeterminate(): boolean { return this._indeterminate; }\r\n  set indeterminate(value: boolean) {\r\n    const changed = value != this._indeterminate;\r\n    this._indeterminate = value;\r\n\r\n    if (changed) {\r\n      if (this._indeterminate) {\r\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\r\n      } else {\r\n        this._transitionCheckState(\r\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\r\n      }\r\n      this.indeterminateChange.emit(this._indeterminate);\r\n    }\r\n  }\r\n  private _indeterminate: boolean = false;\r\n\r\n  _isRippleDisabled() {\r\n    return this.disableRipple || this.disabled;\r\n  }\r\n\r\n  /** Method being called whenever the label text changes. */\r\n  _onLabelTextChange() {\r\n    // This method is getting called whenever the label of the checkbox changes.\r\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\r\n    // that has been recognized by the cdkObserveContent directive.\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  writeValue(value: any) {\r\n    this.checked = !!value;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnChange(fn: (value: any) => void) {\r\n    this._controlValueAccessorChangeFn = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnTouched(fn: any) {\r\n    this._onTouched = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  setDisabledState(isDisabled: boolean) {\r\n    this.disabled = isDisabled;\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\r\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\r\n  }\r\n\r\n  private _transitionCheckState(newState: TransitionCheckState) {\r\n    let oldState = this._currentCheckState;\r\n    let element: HTMLElement = this._elementRef.nativeElement;\r\n\r\n    if (oldState === newState) {\r\n      return;\r\n    }\r\n    if (this._currentAnimationClass.length > 0) {\r\n      element.classList.remove(this._currentAnimationClass);\r\n    }\r\n\r\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\r\n        oldState, newState);\r\n    this._currentCheckState = newState;\r\n\r\n    if (this._currentAnimationClass.length > 0) {\r\n      element.classList.add(this._currentAnimationClass);\r\n    }\r\n  }\r\n\r\n  private _emitChangeEvent() {\r\n    let event = new MatCheckboxChange();\r\n    event.source = this;\r\n    event.checked = this.checked;\r\n\r\n    this._controlValueAccessorChangeFn(this.checked);\r\n    this.change.emit(event);\r\n  }\r\n\r\n  /** Function is called whenever the focus changes for the input element. */\r\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\r\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\r\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\r\n    } else if (!focusOrigin) {\r\n      this._removeFocusRipple();\r\n      this._onTouched();\r\n    }\r\n  }\r\n\r\n  /** Toggles the `checked` state of the checkbox. */\r\n  toggle(): void {\r\n    this.checked = !this.checked;\r\n  }\r\n\r\n  /**\r\n   * Event handler for checkbox input element.\r\n   * Toggles checked state if element is not disabled.\r\n   * Do not toggle on (change) event since IE doesn't fire change event when\r\n   *   indeterminate checkbox is clicked.\r\n   * @param event\r\n   */\r\n  _onInputClick(event: Event) {\r\n    // We have to stop propagation for click events on the visual hidden input element.\r\n    // By default, when a user clicks on a label element, a generated click event will be\r\n    // dispatched on the associated input element. Since we are using a label element as our\r\n    // root container, the click event on the `checkbox` will be executed twice.\r\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\r\n    // This will lead to multiple click events.\r\n    // Preventing bubbling for the second event will solve that issue.\r\n    event.stopPropagation();\r\n\r\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\r\n    if (!this.disabled && this._clickAction !== 'noop') {\r\n      // When user manually click on the checkbox, `indeterminate` is set to false.\r\n      if (this.indeterminate && this._clickAction !== 'check') {\r\n\r\n        Promise.resolve().then(() => {\r\n          this._indeterminate = false;\r\n          this.indeterminateChange.emit(this._indeterminate);\r\n        });\r\n      }\r\n\r\n      this.toggle();\r\n      this._transitionCheckState(\r\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\r\n\r\n      // Emit our custom change event if the native input emitted one.\r\n      // It is important to only emit it, if the native input triggered one, because\r\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\r\n      this._emitChangeEvent();\r\n    } else if (!this.disabled && this._clickAction === 'noop') {\r\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\r\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\r\n      this._inputElement.nativeElement.checked = this.checked;\r\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\r\n    }\r\n  }\r\n\r\n  /** Focuses the checkbox. */\r\n  focus(): void {\r\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\r\n  }\r\n\r\n  _onInteractionEvent(event: Event) {\r\n    // We always have to stop propagation on the change event.\r\n    // Otherwise the change event, from the input element, will bubble up and\r\n    // emit its event object to the `change` output.\r\n    event.stopPropagation();\r\n  }\r\n\r\n  private _getAnimationClassForCheckStateTransition(\r\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\r\n    let animSuffix: string = '';\r\n\r\n    switch (oldState) {\r\n      case TransitionCheckState.Init:\r\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\r\n        // [checked] bound to it.\r\n        if (newState === TransitionCheckState.Checked) {\r\n          animSuffix = 'unchecked-checked';\r\n        } else if (newState == TransitionCheckState.Indeterminate) {\r\n          animSuffix = 'unchecked-indeterminate';\r\n        } else {\r\n          return '';\r\n        }\r\n        break;\r\n      case TransitionCheckState.Unchecked:\r\n        animSuffix = newState === TransitionCheckState.Checked ?\r\n            'unchecked-checked' : 'unchecked-indeterminate';\r\n        break;\r\n      case TransitionCheckState.Checked:\r\n        animSuffix = newState === TransitionCheckState.Unchecked ?\r\n            'checked-unchecked' : 'checked-indeterminate';\r\n        break;\r\n      case TransitionCheckState.Indeterminate:\r\n        animSuffix = newState === TransitionCheckState.Checked ?\r\n            'indeterminate-checked' : 'indeterminate-unchecked';\r\n        break;\r\n    }\r\n\r\n    return `mat-checkbox-anim-${animSuffix}`;\r\n  }\r\n\r\n  /** Fades out the focus state ripple. */\r\n  private _removeFocusRipple(): void {\r\n    if (this._focusRipple) {\r\n      this._focusRipple.fadeOut();\r\n      this._focusRipple = null;\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  Directive,\r\n  forwardRef,\r\n  Provider,\r\n} from '@angular/core';\r\nimport {\r\n  CheckboxRequiredValidator,\r\n  NG_VALIDATORS,\r\n} from '@angular/forms';\r\n\r\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\r\n  provide: NG_VALIDATORS,\r\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\r\n  multi: true\r\n};\r\n\r\n/**\r\n * Validator for Material checkbox's required attribute in template-driven checkbox.\r\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\r\n * work with `mat-checkbox`.\r\n */\r\n@Directive({\r\n  selector: `mat-checkbox[required][formControlName],\r\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\r\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\r\n  host: {'[attr.required]': 'required ? \"\" : null'}\r\n})\r\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {ObserversModule} from '@angular/cdk/observers';\r\nimport {MatRippleModule, MatCommonModule} from '@angular/material/core';\r\nimport {MatCheckbox} from './checkbox';\r\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\r\nimport {A11yModule} from '@angular/cdk/a11y';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule, A11yModule],\r\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\r\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\r\n})\r\nexport class MatCheckboxModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FocusableOption} from '@angular/cdk/a11y';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\r\nimport {\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnDestroy,\r\n  Output,\r\n} from '@angular/core';\r\nimport {CanColor, CanDisable, mixinColor, mixinDisabled} from '@angular/material/core';\r\nimport {Subject} from 'rxjs/Subject';\r\n\r\n\r\n/** Represents an event fired on an individual `mat-chip`. */\r\nexport interface MatChipEvent {\r\n  /** The chip the event was fired on. */\r\n  chip: MatChip;\r\n}\r\n\r\n/** Event object emitted by MatChip when selected or deselected. */\r\nexport class MatChipSelectionChange {\r\n  constructor(\r\n    /** Reference to the chip that emitted the event. */\r\n    public source: MatChip,\r\n    /** Whether the chip that emitted the event is selected. */\r\n    public selected: boolean,\r\n    /** Whether the selection change was a result of a user interaction. */\r\n    public isUserInput = false) { }\r\n}\r\n\r\n\r\n// Boilerplate for applying mixins to MatChip.\r\n/** @docs-private */\r\nexport class MatChipBase {\r\n  constructor(public _elementRef: ElementRef) {}\r\n}\r\n\r\nexport const _MatChipMixinBase = mixinColor(mixinDisabled(MatChipBase), 'primary');\r\n\r\n\r\n/**\r\n * Dummy directive to add CSS class to basic chips.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: `mat-basic-chip, [mat-basic-chip]`,\r\n  host: {'class': 'mat-basic-chip'},\r\n})\r\nexport class MatBasicChip {\r\n}\r\n\r\n/**\r\n * Material design styled Chip component. Used inside the MatChipList component.\r\n */\r\n@Directive({\r\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\r\n  inputs: ['color', 'disabled'],\r\n  exportAs: 'matChip',\r\n  host: {\r\n    'class': 'mat-chip',\r\n    '[attr.tabindex]': 'disabled ? null : -1',\r\n    'role': 'option',\r\n    '[class.mat-chip-selected]': 'selected',\r\n    '[attr.disabled]': 'disabled || null',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n    '[attr.aria-selected]': 'ariaSelected',\r\n    '(click)': '_handleClick($event)',\r\n    '(keydown)': '_handleKeydown($event)',\r\n    '(focus)': '_hasFocus = true',\r\n    '(blur)': '_blur()',\r\n  },\r\n\r\n})\r\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\r\n    CanDisable {\r\n  /** Whether the chip has focus. */\r\n  _hasFocus: boolean = false;\r\n\r\n  /** Whether the chip is selected. */\r\n  @Input()\r\n  get selected(): boolean { return this._selected; }\r\n  set selected(value: boolean) {\r\n    this._selected = coerceBooleanProperty(value);\r\n    this.selectionChange.emit({\r\n      source: this,\r\n      isUserInput: false,\r\n      selected: value\r\n    });\r\n  }\r\n  protected _selected: boolean = false;\r\n\r\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\r\n  @Input()\r\n  get value(): any {\r\n    return this._value != undefined\r\n      ? this._value\r\n      : this._elementRef.nativeElement.textContent;\r\n  }\r\n  set value(value: any) { this._value = value; }\r\n  protected _value: any;\r\n\r\n  /**\r\n   * Whether or not the chips are selectable. When a chip is not selectable,\r\n   * changes to it's selected state are always ignored.\r\n   */\r\n  @Input()\r\n  get selectable(): boolean { return this._selectable; }\r\n  set selectable(value: boolean) {\r\n    this._selectable = coerceBooleanProperty(value);\r\n  }\r\n  protected _selectable: boolean = true;\r\n\r\n  /**\r\n   * Determines whether or not the chip displays the remove styling and emits (remove) events.\r\n   */\r\n  @Input()\r\n  get removable(): boolean { return this._removable; }\r\n  set removable(value: boolean) {\r\n    this._removable = coerceBooleanProperty(value);\r\n  }\r\n  protected _removable: boolean = true;\r\n\r\n  /** Emits when the chip is focused. */\r\n  readonly _onFocus = new Subject<MatChipEvent>();\r\n\r\n  /** Emits when the chip is blured. */\r\n  readonly _onBlur = new Subject<MatChipEvent>();\r\n\r\n  /** Emitted when the chip is selected or deselected. */\r\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\r\n      new EventEmitter<MatChipSelectionChange>();\r\n\r\n  /** Emitted when the chip is destroyed. */\r\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\r\n\r\n  /**\r\n   * Emitted when the chip is destroyed.\r\n   * @deprecated Use 'destroyed' instead.\r\n   * @deletion-target 6.0.0\r\n   */\r\n  @Output() readonly destroy: EventEmitter<MatChipEvent> = this.destroyed;\r\n\r\n  /** Emitted when a chip is to be removed. */\r\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\r\n\r\n  /**\r\n   * Emitted when a chip is to be removed.\r\n   * @deprecated Use `removed` instead.\r\n   * @deletion-target 6.0.0\r\n   */\r\n  @Output('remove') onRemove: EventEmitter<MatChipEvent> = this.removed;\r\n\r\n  /** The ARIA selected applied to the chip. */\r\n  get ariaSelected(): string | null {\r\n    return this.selectable ? this.selected.toString() : null;\r\n  }\r\n\r\n  constructor(public _elementRef: ElementRef) {\r\n    super(_elementRef);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.destroyed.emit({chip: this});\r\n  }\r\n\r\n  /** Selects the chip. */\r\n  select(): void {\r\n    this._selected = true;\r\n    this.selectionChange.emit({\r\n      source: this,\r\n      isUserInput: false,\r\n      selected: true\r\n    });\r\n  }\r\n\r\n  /** Deselects the chip. */\r\n  deselect(): void {\r\n    this._selected = false;\r\n    this.selectionChange.emit({\r\n      source: this,\r\n      isUserInput: false,\r\n      selected: false\r\n    });\r\n  }\r\n\r\n  /** Select this chip and emit selected event */\r\n  selectViaInteraction(): void {\r\n    this._selected = true;\r\n    // Emit select event when selected changes.\r\n    this.selectionChange.emit({\r\n      source: this,\r\n      isUserInput: true,\r\n      selected: true\r\n    });\r\n  }\r\n\r\n  /** Toggles the current selected state of this chip. */\r\n  toggleSelected(isUserInput: boolean = false): boolean {\r\n    this._selected = !this.selected;\r\n\r\n    this.selectionChange.emit({\r\n      source: this,\r\n      isUserInput,\r\n      selected: this._selected\r\n    });\r\n\r\n    return this.selected;\r\n  }\r\n\r\n  /** Allows for programmatic focusing of the chip. */\r\n  focus(): void {\r\n    this._elementRef.nativeElement.focus();\r\n    this._onFocus.next({chip: this});\r\n  }\r\n\r\n  /**\r\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\r\n   * BACKSPACE keys are pressed.\r\n   *\r\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\r\n   */\r\n  remove(): void {\r\n    if (this.removable) {\r\n      this.removed.emit({chip: this});\r\n    }\r\n  }\r\n\r\n  /** Ensures events fire properly upon click. */\r\n  _handleClick(event: Event) {\r\n    // Check disabled\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n\r\n    this.focus();\r\n  }\r\n\r\n  /** Handle custom key presses. */\r\n  _handleKeydown(event: KeyboardEvent): void {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n\r\n    switch (event.keyCode) {\r\n      case DELETE:\r\n      case BACKSPACE:\r\n        // If we are removable, remove the focused chip\r\n        this.remove();\r\n        // Always prevent so page navigation does not occur\r\n        event.preventDefault();\r\n        break;\r\n      case SPACE:\r\n        // If we are selectable, toggle the focused chip\r\n        if (this.selectable) {\r\n          this.toggleSelected(true);\r\n        }\r\n\r\n        // Always prevent space from scrolling the page since the list has focus\r\n        event.preventDefault();\r\n        break;\r\n    }\r\n  }\r\n\r\n  _blur(): void {\r\n    this._hasFocus = false;\r\n    this._onBlur.next({chip: this});\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\r\n * available at https://material.io/icons/#ic_cancel.\r\n *\r\n * Example:\r\n *\r\n *     `<mat-chip>\r\n *       <mat-icon matChipRemove>cancel</mat-icon>\r\n *     </mat-chip>`\r\n *\r\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\r\n * styles to properly center the icon within the chip.\r\n */\r\n@Directive({\r\n  selector: '[matChipRemove]',\r\n  host: {\r\n    'class': 'mat-chip-remove',\r\n    '(click)': '_handleClick()',\r\n  }\r\n})\r\nexport class MatChipRemove {\r\n  constructor(protected _parentChip: MatChip) {\r\n  }\r\n\r\n  /** Calls the parent chip's public `remove()` method if applicable. */\r\n  _handleClick(): void {\r\n    if (this._parentChip.removable) {\r\n      this._parentChip.remove();\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {OverlayModule} from '@angular/cdk/overlay';\r\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\r\nimport {MatAutocomplete} from './autocomplete';\r\nimport {\r\n  MatAutocompleteTrigger,\r\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,\r\n} from './autocomplete-trigger';\r\n\r\n@NgModule({\r\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\r\n  exports: [MatAutocomplete, MatOptionModule, MatAutocompleteTrigger, MatCommonModule],\r\n  declarations: [MatAutocomplete, MatAutocompleteTrigger],\r\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER],\r\n})\r\nexport class MatAutocompleteModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FocusMonitor} from '@angular/cdk/a11y';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ElementRef,\r\n  OnDestroy,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {\r\n  CanColor,\r\n  CanDisable,\r\n  CanDisableRipple,\r\n  MatRipple,\r\n  mixinColor,\r\n  mixinDisabled,\r\n  mixinDisableRipple\r\n} from '@angular/material/core';\r\n\r\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\r\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\r\n\r\n/** Default color palette for flat buttons (mat-flat-button) */\r\nconst DEFAULT_FLAT_BUTTON_COLOR = 'primary';\r\n\r\n/**\r\n * List of classes to add to MatButton instances based on host attributes to\r\n * style as different variants.\r\n */\r\nconst BUTTON_HOST_ATTRIBUTES = [\r\n  'mat-button',\r\n  'mat-flat-button',\r\n  'mat-icon-button',\r\n  'mat-raised-button',\r\n  'mat-stroked-button',\r\n  'mat-mini-fab',\r\n  'mat-fab',\r\n];\r\n\r\n// Boilerplate for applying mixins to MatButton.\r\n/** @docs-private */\r\nexport class MatButtonBase {\r\n  constructor(public _elementRef: ElementRef) {}\r\n}\r\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\r\n\r\n\r\n/**\r\n * Material design button.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\r\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\r\n             button[mat-flat-button]`,\r\n  exportAs: 'matButton',\r\n  host: {\r\n    '[disabled]': 'disabled || null',\r\n  },\r\n  templateUrl: 'button.html',\r\n  styleUrls: ['button.css'],\r\n  inputs: ['disabled', 'disableRipple', 'color'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatButton extends _MatButtonMixinBase\r\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\r\n\r\n  /** Whether the button is round. */\r\n  _isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\r\n\r\n  /** Whether the button is icon button. */\r\n  _isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\r\n\r\n  /** Reference to the MatRipple instance of the button. */\r\n  @ViewChild(MatRipple) ripple: MatRipple;\r\n\r\n  constructor(elementRef: ElementRef,\r\n              private _platform: Platform,\r\n              private _focusMonitor: FocusMonitor) {\r\n    super(elementRef);\r\n\r\n    // For each of the variant selectors that is prevent in the button's host\r\n    // attributes, add the correct corresponding class.\r\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\r\n      if (this._hasHostAttributes(attr)) {\r\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\r\n      }\r\n    }\r\n\r\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\r\n\r\n    if (this._isRoundButton) {\r\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\r\n    } else if (this._hasHostAttributes('mat-flat-button')) {\r\n      this.color = DEFAULT_FLAT_BUTTON_COLOR;\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\r\n  }\r\n\r\n  /** Focuses the button. */\r\n  focus(): void {\r\n    this._getHostElement().focus();\r\n  }\r\n\r\n  _getHostElement() {\r\n    return this._elementRef.nativeElement;\r\n  }\r\n\r\n  _isRippleDisabled() {\r\n    return this.disableRipple || this.disabled;\r\n  }\r\n\r\n  /** Gets whether the button has one of the given attributes. */\r\n  _hasHostAttributes(...attributes: string[]) {\r\n    // If not on the browser, say that there are none of the attributes present.\r\n    // Since these only affect how the ripple displays (and ripples only happen on the client),\r\n    // detecting these attributes isn't necessary when not on the browser.\r\n    if (!this._platform.isBrowser) {\r\n      return false;\r\n    }\r\n\r\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\r\n  }\r\n}\r\n\r\n/**\r\n * Raised Material design button.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\r\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\r\n  exportAs: 'matButton, matAnchor',\r\n  host: {\r\n    '[attr.tabindex]': 'disabled ? -1 : 0',\r\n    '[attr.disabled]': 'disabled || null',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n    '(click)': '_haltDisabledEvents($event)',\r\n  },\r\n  inputs: ['disabled', 'disableRipple', 'color'],\r\n  templateUrl: 'button.html',\r\n  styleUrls: ['button.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatAnchor extends MatButton {\r\n  constructor(\r\n      platform: Platform,\r\n      focusMonitor: FocusMonitor,\r\n      elementRef: ElementRef) {\r\n    super(elementRef, platform, focusMonitor);\r\n  }\r\n\r\n  _haltDisabledEvents(event: Event) {\r\n    // A disabled button shouldn't apply any actions\r\n    if (this.disabled) {\r\n      event.preventDefault();\r\n      event.stopImmediatePropagation();\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\r\nimport {A11yModule} from '@angular/cdk/a11y';\r\nimport {\r\n  MatAnchor,\r\n  MatButton,\r\n} from './button';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatRippleModule,\r\n    MatCommonModule,\r\n    A11yModule,\r\n  ],\r\n  exports: [\r\n    MatButton,\r\n    MatAnchor,\r\n    MatCommonModule,\r\n  ],\r\n  declarations: [\r\n    MatButton,\r\n    MatAnchor,\r\n  ],\r\n})\r\nexport class MatButtonModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FocusMonitor} from '@angular/cdk/a11y';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChildren,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\r\n\r\n/** Acceptable types for a button toggle. */\r\nexport type ToggleType = 'checkbox' | 'radio';\r\n\r\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\r\n/** @docs-private */\r\nexport class MatButtonToggleGroupBase {}\r\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\r\n\r\n/**\r\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\r\n * This allows it to support [(ngModel)].\r\n * @docs-private\r\n */\r\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MatButtonToggleGroup),\r\n  multi: true\r\n};\r\n\r\nlet _uniqueIdCounter = 0;\r\n\r\n/** Change event object emitted by MatButtonToggle. */\r\nexport class MatButtonToggleChange {\r\n  /** The MatButtonToggle that emits the event. */\r\n  source: MatButtonToggle | null;\r\n  /** The value assigned to the MatButtonToggle. */\r\n  value: any;\r\n}\r\n\r\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\r\n@Directive({\r\n  selector: 'mat-button-toggle-group:not([multiple])',\r\n  providers: [MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\r\n  inputs: ['disabled'],\r\n  host: {\r\n    'role': 'radiogroup',\r\n    'class': 'mat-button-toggle-group',\r\n    '[class.mat-button-toggle-vertical]': 'vertical'\r\n  },\r\n  exportAs: 'matButtonToggleGroup',\r\n})\r\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase\r\n    implements ControlValueAccessor, CanDisable {\r\n  /**\r\n   * The method to be called in order to update ngModel.\r\n   * Now `ngModel` binding is not supported in multiple selection mode.\r\n   */\r\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\r\n\r\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\r\n  _onTouched: () => any = () => {};\r\n\r\n  /** Child button toggle buttons. */\r\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\r\n\r\n  /** `name` attribute for the underlying `input` element. */\r\n  @Input()\r\n  get name(): string { return this._name; }\r\n  set name(value: string) {\r\n    this._name = value;\r\n    this._updateButtonToggleNames();\r\n  }\r\n  private _name: string = `mat-button-toggle-group-${_uniqueIdCounter++}`;\r\n\r\n  /** Whether the toggle group is vertical. */\r\n  @Input()\r\n  get vertical(): boolean { return this._vertical; }\r\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\r\n  private _vertical: boolean = false;\r\n\r\n  /** Value of the toggle group. */\r\n  @Input()\r\n  get value(): any { return this._value; }\r\n  set value(value: any) {\r\n    if (this._value != value) {\r\n      this._value = value;\r\n      this.valueChange.emit(value);\r\n      this._updateSelectedButtonToggleFromValue();\r\n    }\r\n  }\r\n  private _value: any = null;\r\n\r\n  /**\r\n   * Event that emits whenever the value of the group changes.\r\n   * Used to facilitate two-way data binding.\r\n   * @docs-private\r\n   */\r\n  @Output() readonly valueChange = new EventEmitter<any>();\r\n\r\n  /** The currently selected button toggle, should match the value. */\r\n  @Input()\r\n  get selected(): MatButtonToggle | null { return this._selected; }\r\n  set selected(selected: MatButtonToggle | null) {\r\n    this._selected = selected;\r\n    this.value = selected ? selected.value : null;\r\n\r\n    if (selected && !selected.checked) {\r\n      selected.checked = true;\r\n    }\r\n  }\r\n  private _selected: MatButtonToggle | null = null;\r\n\r\n  /** Event emitted when the group's value changes. */\r\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\r\n      new EventEmitter<MatButtonToggleChange>();\r\n\r\n  constructor(private _changeDetector: ChangeDetectorRef) {\r\n    super();\r\n  }\r\n\r\n  private _updateButtonToggleNames(): void {\r\n    if (this._buttonToggles) {\r\n      this._buttonToggles.forEach((toggle) => {\r\n        toggle.name = this._name;\r\n      });\r\n    }\r\n  }\r\n\r\n  // TODO: Refactor into shared code with radio.\r\n  private _updateSelectedButtonToggleFromValue(): void {\r\n    let isAlreadySelected = this._selected != null && this._selected.value == this._value;\r\n\r\n    if (this._buttonToggles != null && !isAlreadySelected) {\r\n      let matchingButtonToggle = this._buttonToggles.filter(\r\n          buttonToggle => buttonToggle.value == this._value)[0];\r\n\r\n      if (matchingButtonToggle) {\r\n        this.selected = matchingButtonToggle;\r\n      } else if (this.value == null) {\r\n        this.selected = null;\r\n        this._buttonToggles.forEach(buttonToggle => {\r\n          buttonToggle.checked = false;\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Dispatch change event with current selection and group value. */\r\n  _emitChangeEvent(): void {\r\n    let event = new MatButtonToggleChange();\r\n    event.source = this._selected;\r\n    event.value = this._value;\r\n    this._controlValueAccessorChangeFn(event.value);\r\n    this.change.emit(event);\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  writeValue(value: any) {\r\n    this.value = value;\r\n    this._changeDetector.markForCheck();\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnChange(fn: (value: any) => void) {\r\n    this._controlValueAccessorChangeFn = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnTouched(fn: any) {\r\n    this._onTouched = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n    this._markButtonTogglesForCheck();\r\n  }\r\n\r\n  private _markButtonTogglesForCheck() {\r\n    if (this._buttonToggles) {\r\n      this._buttonToggles.forEach((toggle) => toggle._markForCheck());\r\n    }\r\n  }\r\n}\r\n\r\n/** Multiple selection button-toggle group. `ngModel` is not supported in this mode. */\r\n@Directive({\r\n  selector: 'mat-button-toggle-group[multiple]',\r\n  exportAs: 'matButtonToggleGroup',\r\n  inputs: ['disabled'],\r\n  host: {\r\n    'class': 'mat-button-toggle-group',\r\n    '[class.mat-button-toggle-vertical]': 'vertical',\r\n    'role': 'group'\r\n  }\r\n})\r\nexport class MatButtonToggleGroupMultiple extends _MatButtonToggleGroupMixinBase\r\n    implements CanDisable {\r\n  /** Whether the toggle group is vertical. */\r\n  @Input()\r\n  get vertical(): boolean { return this._vertical; }\r\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\r\n  private _vertical: boolean = false;\r\n}\r\n\r\n/** Single button inside of a toggle group. */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-button-toggle',\r\n  templateUrl: 'button-toggle.html',\r\n  styleUrls: ['button-toggle.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  exportAs: 'matButtonToggle',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  host: {\r\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup && !buttonToggleGroupMultiple',\r\n    '[class.mat-button-toggle-checked]': 'checked',\r\n    '[class.mat-button-toggle-disabled]': 'disabled',\r\n    'class': 'mat-button-toggle',\r\n    '[attr.id]': 'id',\r\n  }\r\n})\r\nexport class MatButtonToggle implements OnInit, OnDestroy {\r\n  /**\r\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\r\n   * take precedence so this may be omitted.\r\n   */\r\n  @Input('aria-label') ariaLabel: string = '';\r\n\r\n  /**\r\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\r\n   */\r\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\r\n\r\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\r\n  _type: ToggleType;\r\n\r\n  /** Whether or not the button toggle is a single selection. */\r\n  private _isSingleSelector: boolean = false;\r\n\r\n  /** Unregister function for _buttonToggleDispatcher */\r\n  private _removeUniqueSelectionListener: () => void = () => {};\r\n\r\n  @ViewChild('input') _inputElement: ElementRef;\r\n\r\n  /** The parent button toggle group (exclusive selection). Optional. */\r\n  buttonToggleGroup: MatButtonToggleGroup;\r\n\r\n  /** The parent button toggle group (multiple selection). Optional. */\r\n  buttonToggleGroupMultiple: MatButtonToggleGroupMultiple;\r\n\r\n  /** Unique ID for the underlying `input` element. */\r\n  get inputId(): string { return `${this.id}-input`; }\r\n\r\n  /** The unique ID for this button toggle. */\r\n  @Input() id: string;\r\n\r\n  /** HTML's 'name' attribute used to group radios for unique selection. */\r\n  @Input() name: string;\r\n\r\n  /** Whether the button is checked. */\r\n  @Input()\r\n  get checked(): boolean { return this._checked; }\r\n  set checked(value: boolean) {\r\n    if (this._isSingleSelector && value) {\r\n      // Notify all button toggles with the same name (in the same group) to un-check.\r\n      this._buttonToggleDispatcher.notify(this.id, this.name);\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n\r\n    this._checked = value;\r\n\r\n    if (value && this._isSingleSelector && this.buttonToggleGroup.value != this.value) {\r\n      this.buttonToggleGroup.selected = this;\r\n    }\r\n  }\r\n  private _checked: boolean = false;\r\n\r\n  /** MatButtonToggleGroup reads this to assign its own value. */\r\n  @Input()\r\n  get value(): any { return this._value; }\r\n  set value(value: any) {\r\n    if (this._value != value) {\r\n      if (this.buttonToggleGroup != null && this.checked) {\r\n        this.buttonToggleGroup.value = value;\r\n      }\r\n      this._value = value;\r\n    }\r\n  }\r\n  private _value: any = null;\r\n\r\n  /** Whether the button is disabled. */\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return this._disabled || (this.buttonToggleGroup != null && this.buttonToggleGroup.disabled) ||\r\n        (this.buttonToggleGroupMultiple != null && this.buttonToggleGroupMultiple.disabled);\r\n  }\r\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\r\n  private _disabled: boolean = false;\r\n\r\n  /** Event emitted when the group value changes. */\r\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\r\n      new EventEmitter<MatButtonToggleChange>();\r\n\r\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\r\n              @Optional() toggleGroupMultiple: MatButtonToggleGroupMultiple,\r\n              private _changeDetectorRef: ChangeDetectorRef,\r\n              private _buttonToggleDispatcher: UniqueSelectionDispatcher,\r\n              private _elementRef: ElementRef,\r\n              private _focusMonitor: FocusMonitor) {\r\n\r\n    this.buttonToggleGroup = toggleGroup;\r\n    this.buttonToggleGroupMultiple = toggleGroupMultiple;\r\n\r\n    if (this.buttonToggleGroup) {\r\n      this._removeUniqueSelectionListener =\r\n        _buttonToggleDispatcher.listen((id: string, name: string) => {\r\n          if (id != this.id && name == this.name) {\r\n            this.checked = false;\r\n            this._changeDetectorRef.markForCheck();\r\n          }\r\n        });\r\n\r\n      this._type = 'radio';\r\n      this.name = this.buttonToggleGroup.name;\r\n      this._isSingleSelector = true;\r\n    } else {\r\n      // Even if there is no group at all, treat the button toggle as a checkbox so it can be\r\n      // toggled on or off.\r\n      this._type = 'checkbox';\r\n      this._isSingleSelector = false;\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this.id == null) {\r\n      this.id = `mat-button-toggle-${_uniqueIdCounter++}`;\r\n    }\r\n\r\n    if (this.buttonToggleGroup && this._value == this.buttonToggleGroup.value) {\r\n      this._checked = true;\r\n    }\r\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\r\n  }\r\n\r\n  /** Focuses the button. */\r\n  focus(): void {\r\n    this._inputElement.nativeElement.focus();\r\n  }\r\n\r\n  /** Toggle the state of the current button toggle. */\r\n  private _toggle(): void {\r\n    this.checked = !this.checked;\r\n  }\r\n\r\n  /** Checks the button toggle due to an interaction with the underlying native input. */\r\n  _onInputChange(event: Event) {\r\n    event.stopPropagation();\r\n\r\n    if (this._isSingleSelector) {\r\n      // Propagate the change one-way via the group, which will in turn mark this\r\n      // button toggle as checked.\r\n      let groupValueChanged = this.buttonToggleGroup.selected != this;\r\n      this.checked = true;\r\n      this.buttonToggleGroup.selected = this;\r\n      this.buttonToggleGroup._onTouched();\r\n      if (groupValueChanged) {\r\n        this.buttonToggleGroup._emitChangeEvent();\r\n      }\r\n    } else {\r\n      this._toggle();\r\n    }\r\n\r\n    // Emit a change event when the native input does.\r\n    this._emitChangeEvent();\r\n  }\r\n\r\n  _onInputClick(event: Event) {\r\n    // We have to stop propagation for click events on the visual hidden input element.\r\n    // By default, when a user clicks on a label element, a generated click event will be\r\n    // dispatched on the associated input element. Since we are using a label element as our\r\n    // root container, the click event on the `slide-toggle` will be executed twice.\r\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\r\n    // This will lead to multiple click events.\r\n    // Preventing bubbling for the second event will solve that issue.\r\n    event.stopPropagation();\r\n  }\r\n\r\n  /** Dispatch change event with current value. */\r\n  private _emitChangeEvent(): void {\r\n    let event = new MatButtonToggleChange();\r\n    event.source = this;\r\n    event.value = this._value;\r\n    this.change.emit(event);\r\n  }\r\n\r\n  // Unregister buttonToggleDispatcherListener on destroy\r\n  ngOnDestroy() {\r\n    this._removeUniqueSelectionListener();\r\n  }\r\n\r\n  /**\r\n   * Marks the button toggle as needing checking for change detection.\r\n   * This method is exposed because the parent button toggle group will directly\r\n   * update bound properties of the radio button.\r\n   */\r\n  _markForCheck() {\r\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\r\n    // update button toggle's status\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle} from './button-toggle';\r\nimport {MatCommonModule} from '@angular/material/core';\r\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\r\nimport {A11yModule} from '@angular/cdk/a11y';\r\n\r\n\r\n@NgModule({\r\n  imports: [MatCommonModule, A11yModule],\r\n  exports: [\r\n    MatButtonToggleGroup,\r\n    MatButtonToggleGroupMultiple,\r\n    MatButtonToggle,\r\n    MatCommonModule,\r\n  ],\r\n  declarations: [MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle],\r\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\r\n})\r\nexport class MatButtonToggleModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  ViewEncapsulation,\r\n  InjectionToken,\r\n  Inject,\r\n  AfterViewChecked,\r\n} from '@angular/core';\r\nimport {MatOptgroup} from './optgroup';\r\n\r\n/**\r\n * Option IDs need to be unique across components, so this counter exists outside of\r\n * the component definition.\r\n */\r\nlet _uniqueIdCounter = 0;\r\n\r\n/** Event object emitted by MatOption when selected or deselected. */\r\nexport class MatOptionSelectionChange {\r\n  constructor(\r\n    /** Reference to the option that emitted the event. */\r\n    public source: MatOption,\r\n    /** Whether the change in the option's value was a result of a user action. */\r\n    public isUserInput = false) { }\r\n}\r\n\r\n/**\r\n * Describes a parent component that manages a list of options.\r\n * Contains properties that the options can inherit.\r\n * @docs-private\r\n */\r\nexport interface MatOptionParentComponent {\r\n  disableRipple?: boolean;\r\n  multiple?: boolean;\r\n}\r\n\r\n/**\r\n * Injection token used to provide the parent component to options.\r\n */\r\nexport const MAT_OPTION_PARENT_COMPONENT =\r\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\r\n\r\n/**\r\n * Single option inside of a `<mat-select>` element.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-option',\r\n  exportAs: 'matOption',\r\n  host: {\r\n    'role': 'option',\r\n    '[attr.tabindex]': '_getTabIndex()',\r\n    '[class.mat-selected]': 'selected',\r\n    '[class.mat-option-multiple]': 'multiple',\r\n    '[class.mat-active]': 'active',\r\n    '[id]': 'id',\r\n    '[attr.aria-selected]': 'selected.toString()',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n    '[class.mat-option-disabled]': 'disabled',\r\n    '(click)': '_selectViaInteraction()',\r\n    '(keydown)': '_handleKeydown($event)',\r\n    'class': 'mat-option',\r\n  },\r\n  styleUrls: ['option.css'],\r\n  templateUrl: 'option.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatOption implements AfterViewChecked {\r\n  private _selected = false;\r\n  private _active = false;\r\n  private _disabled = false;\r\n  private _id = `mat-option-${_uniqueIdCounter++}`;\r\n  private _mostRecentViewValue = '';\r\n\r\n  /** Whether the wrapping component is in multiple selection mode. */\r\n  get multiple() { return this._parent && this._parent.multiple; }\r\n\r\n  /** The unique ID of the option. */\r\n  get id(): string { return this._id; }\r\n\r\n  /** Whether or not the option is currently selected. */\r\n  get selected(): boolean { return this._selected; }\r\n\r\n  /** The form value of the option. */\r\n  @Input() value: any;\r\n\r\n  /** Whether the option is disabled. */\r\n  @Input()\r\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\r\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\r\n\r\n  /** Whether ripples for the option are disabled. */\r\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\r\n\r\n  /** Event emitted when the option is selected or deselected. */\r\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\r\n\r\n  /** Emits when the state of the option changes and any parents have to be notified. */\r\n  readonly _stateChanges = new Subject<void>();\r\n\r\n  constructor(\r\n    private _element: ElementRef,\r\n    private _changeDetectorRef: ChangeDetectorRef,\r\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\r\n    @Optional() readonly group: MatOptgroup) {}\r\n\r\n  /**\r\n   * Whether or not the option is currently active and ready to be selected.\r\n   * An active option displays styles as if it is focused, but the\r\n   * focus is actually retained somewhere else. This comes in handy\r\n   * for components like autocomplete where focus must remain on the input.\r\n   */\r\n  get active(): boolean {\r\n    return this._active;\r\n  }\r\n\r\n  /**\r\n   * The displayed value of the option. It is necessary to show the selected option in the\r\n   * select's trigger.\r\n   */\r\n  get viewValue(): string {\r\n    // TODO(kara): Add input property alternative for node envs.\r\n    return (this._getHostElement().textContent || '').trim();\r\n  }\r\n\r\n  /** Selects the option. */\r\n  select(): void {\r\n    this._selected = true;\r\n    this._changeDetectorRef.markForCheck();\r\n    this._emitSelectionChangeEvent();\r\n  }\r\n\r\n  /** Deselects the option. */\r\n  deselect(): void {\r\n    this._selected = false;\r\n    this._changeDetectorRef.markForCheck();\r\n    this._emitSelectionChangeEvent();\r\n  }\r\n\r\n  /** Sets focus onto this option. */\r\n  focus(): void {\r\n    const element = this._getHostElement();\r\n\r\n    if (typeof element.focus === 'function') {\r\n      element.focus();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This method sets display styles on the option to make it appear\r\n   * active. This is used by the ActiveDescendantKeyManager so key\r\n   * events will display the proper options as active on arrow key events.\r\n   */\r\n  setActiveStyles(): void {\r\n    if (!this._active) {\r\n      this._active = true;\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This method removes display styles on the option that made it appear\r\n   * active. This is used by the ActiveDescendantKeyManager so key\r\n   * events will display the proper options as active on arrow key events.\r\n   */\r\n  setInactiveStyles(): void {\r\n    if (this._active) {\r\n      this._active = false;\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\r\n\r\n  /** Gets the label to be used when determining whether the option should be focused. */\r\n  getLabel(): string {\r\n    return this.viewValue;\r\n  }\r\n\r\n  /** Ensures the option is selected when activated from the keyboard. */\r\n  _handleKeydown(event: KeyboardEvent): void {\r\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\r\n      this._selectViaInteraction();\r\n\r\n      // Prevent the page from scrolling down and form submits.\r\n      event.preventDefault();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * `Selects the option while indicating the selection came from the user. Used to\r\n   * determine if the select's view -> model callback should be invoked.`\r\n   */\r\n  _selectViaInteraction(): void {\r\n    if (!this.disabled) {\r\n      this._selected = this.multiple ? !this._selected : true;\r\n      this._changeDetectorRef.markForCheck();\r\n      this._emitSelectionChangeEvent(true);\r\n    }\r\n  }\r\n\r\n  /** Returns the correct tabindex for the option depending on disabled state. */\r\n  _getTabIndex(): string {\r\n    return this.disabled ? '-1' : '0';\r\n  }\r\n\r\n  /** Gets the host DOM element. */\r\n  _getHostElement(): HTMLElement {\r\n    return this._element.nativeElement;\r\n  }\r\n\r\n  ngAfterViewChecked() {\r\n    // Since parent components could be using the option's label to display the selected values\r\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\r\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\r\n    // relatively cheap, however we still limit them only to selected options in order to avoid\r\n    // hitting the DOM too often.\r\n    if (this._selected) {\r\n      const viewValue = this.viewValue;\r\n\r\n      if (viewValue !== this._mostRecentViewValue) {\r\n        this._mostRecentViewValue = viewValue;\r\n        this._stateChanges.next();\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Emits the selection change event. */\r\n  private _emitSelectionChangeEvent(isUserInput = false): void {\r\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\r\n  }\r\n}\r\n\r\n/**\r\n * Counts the amount of option group labels that precede the specified option.\r\n * @param optionIndex Index of the option at which to start counting.\r\n * @param options Flat list of all of the options.\r\n * @param optionGroups Flat list of all of the option groups.\r\n * @docs-private\r\n */\r\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\r\n  optionGroups: QueryList<MatOptgroup>): number {\r\n\r\n  if (optionGroups.length) {\r\n    let optionsArray = options.toArray();\r\n    let groups = optionGroups.toArray();\r\n    let groupCounter = 0;\r\n\r\n    for (let i = 0; i < optionIndex + 1; i++) {\r\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\r\n        groupCounter++;\r\n      }\r\n    }\r\n\r\n    return groupCounter;\r\n  }\r\n\r\n  return 0;\r\n}\r\n\r\n/**\r\n * Determines the position to which to scroll a panel in order for an option to be into view.\r\n * @param optionIndex Index of the option to be scrolled into the view.\r\n * @param optionHeight Height of the options.\r\n * @param currentScrollPosition Current scroll position of the panel.\r\n * @param panelHeight Height of the panel.\r\n * @docs-private\r\n */\r\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\r\n    currentScrollPosition: number, panelHeight: number): number {\r\n  const optionOffset = optionIndex * optionHeight;\r\n\r\n  if (optionOffset < currentScrollPosition) {\r\n    return optionOffset;\r\n  }\r\n\r\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\r\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\r\n  }\r\n\r\n  return currentScrollPosition;\r\n}\r\n\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {MatRippleModule} from '../ripple/index';\r\nimport {MatPseudoCheckboxModule} from '../selection/index';\r\nimport {MatOption} from './option';\r\nimport {MatOptgroup} from './optgroup';\r\n\r\n\r\n@NgModule({\r\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\r\n  exports: [MatOption, MatOptgroup],\r\n  declarations: [MatOption, MatOptgroup]\r\n})\r\nexport class MatOptionModule {}\r\n\r\n\r\nexport * from './option';\r\nexport * from './optgroup';\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {InjectionToken} from '@angular/core';\r\n\r\n/** InjectionToken that can be used to specify the global label options. */\r\nexport const MAT_LABEL_GLOBAL_OPTIONS =\r\n  new InjectionToken<LabelOptions>('mat-label-global-options');\r\n\r\n/** Type for the available floatLabel values. */\r\nexport type FloatLabelType = 'always' | 'never' | 'auto';\r\n\r\n/** Configurable options for floating labels. */\r\nexport interface LabelOptions {\r\n  /**\r\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\r\n   * Default behavior is assumed to be `auto`.\r\n   */\r\n  float?: FloatLabelType;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, Input} from '@angular/core';\r\n\r\n\r\nlet nextUniqueId = 0;\r\n\r\n\r\n/** Single error message to be shown underneath the form field. */\r\n@Directive({\r\n  selector: 'mat-error',\r\n  host: {\r\n    'class': 'mat-error',\r\n    'role': 'alert',\r\n    '[attr.id]': 'id',\r\n  }\r\n})\r\nexport class MatError {\r\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {\r\n  animate,\r\n  state,\r\n  style,\r\n  transition,\r\n  trigger,\r\n  AnimationTriggerMetadata,\r\n} from '@angular/animations';\r\n\r\n/** Animations used by the MatFormField. */\r\nexport const matFormFieldAnimations: {\r\n  readonly transitionMessages: AnimationTriggerMetadata\r\n} = {\r\n  /** Animation that transitions the form field's error and hint messages. */\r\n  transitionMessages: trigger('transitionMessages', [\r\n    // TODO(mmalerba): Use angular animations for label animation as well.\r\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\r\n    transition('void => enter', [\r\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\r\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\r\n    ]),\r\n  ])\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {NgControl} from '@angular/forms';\r\n\r\n\r\n/** An interface which allows a control to work inside of a `MatFormField`. */\r\nexport abstract class MatFormFieldControl<T> {\r\n  /** The value of the control. */\r\n  value: T | null;\r\n\r\n  /**\r\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\r\n   * needs to run change detection.\r\n   */\r\n  readonly stateChanges: Observable<void>;\r\n\r\n  /** The element ID for this control. */\r\n  readonly id: string;\r\n\r\n  /** The placeholder for this control. */\r\n  readonly placeholder: string;\r\n\r\n  /** Gets the NgControl for this control. */\r\n  readonly ngControl: NgControl | null;\r\n\r\n  /** Whether the control is focused. */\r\n  readonly focused: boolean;\r\n\r\n  /** Whether the control is empty. */\r\n  readonly empty: boolean;\r\n\r\n  /** Whether the `MatFormField` label should try to float. */\r\n  readonly shouldLabelFloat?: boolean;\r\n\r\n  /**\r\n   * Whether the `MatFormField` placeholder should try to float.\r\n   * @deprecated Use `shouldLabelFloat` instead.\r\n   * @deletion-target 6.0.0\r\n   */\r\n  readonly shouldPlaceholderFloat?: boolean;\r\n\r\n  /** Whether the control is required. */\r\n  readonly required: boolean;\r\n\r\n  /** Whether the control is disabled. */\r\n  readonly disabled: boolean;\r\n\r\n  /** Whether the control is in an error state. */\r\n  readonly errorState: boolean;\r\n\r\n  /**\r\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\r\n   * based on their control type. The form field will add a class,\r\n   * `mat-form-field-type-{{controlType}}` to its root element.\r\n   */\r\n  readonly controlType?: string;\r\n\r\n  /** Sets the list of element IDs that currently describe this control. */\r\n  abstract setDescribedByIds(ids: string[]): void;\r\n\r\n  /** Handles a click on the control's container. */\r\n  abstract onContainerClick(event: MouseEvent): void;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, Input} from '@angular/core';\r\n\r\n\r\nlet nextUniqueId = 0;\r\n\r\n\r\n/** Hint text to be shown underneath the form field control. */\r\n@Directive({\r\n  selector: 'mat-hint',\r\n  host: {\r\n    'class': 'mat-hint',\r\n    '[class.mat-right]': 'align == \"end\"',\r\n    '[attr.id]': 'id',\r\n    // Remove align attribute to prevent it from interfering with layout.\r\n    '[attr.align]': 'null',\r\n  }\r\n})\r\nexport class MatHint {\r\n  /** Whether to align the hint label at the start or end of the line. */\r\n  @Input() align: 'start' | 'end' = 'start';\r\n\r\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\r\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive} from '@angular/core';\r\n\r\n\r\n/** The floating label for a `mat-form-field`. */\r\n@Directive({\r\n  selector: 'mat-label'\r\n})\r\nexport class MatLabel {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive} from '@angular/core';\r\n\r\n\r\n/** The placeholder text for an `MatFormField`. */\r\n@Directive({\r\n  selector: 'mat-placeholder'\r\n})\r\nexport class MatPlaceholder {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive} from '@angular/core';\r\n\r\n\r\n/** Prefix to be placed the the front of the form field. */\r\n@Directive({\r\n  selector: '[matPrefix]',\r\n})\r\nexport class MatPrefix {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive} from '@angular/core';\r\n\r\n\r\n/** Suffix to be placed at the end of the form field. */\r\n@Directive({\r\n  selector: '[matSuffix]',\r\n})\r\nexport class MatSuffix {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport {\r\n  AfterContentChecked,\r\n  AfterContentInit,\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  ElementRef,\r\n  Inject,\r\n  Input,\r\n  Optional,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {\r\n  CanColor,\r\n  FloatLabelType,\r\n  LabelOptions,\r\n  MAT_LABEL_GLOBAL_OPTIONS,\r\n  mixinColor,\r\n  ThemePalette\r\n} from '@angular/material/core';\r\nimport { fromEvent } from 'rxjs/observable/fromEvent';\r\nimport { startWith } from 'rxjs/operators/startWith';\r\nimport { take } from 'rxjs/operators/take';\r\nimport { MatError } from './error';\r\nimport { matFormFieldAnimations } from './form-field-animations';\r\nimport { MatFormFieldControl } from './form-field-control';\r\nimport {\r\n  getMatFormFieldDuplicatedHintError,\r\n  getMatFormFieldMissingControlError,\r\n  getMatFormFieldPlaceholderConflictError,\r\n} from './form-field-errors';\r\nimport { MatHint } from './hint';\r\nimport { MatLabel } from './label';\r\nimport { MatPlaceholder } from './placeholder';\r\nimport { MatPrefix } from './prefix';\r\nimport { MatSuffix } from './suffix';\r\n\r\n\r\n// Boilerplate for applying mixins to MatFormField.\r\n/** @docs-private */\r\nexport class MatFormFieldBase {\r\n  constructor(public _elementRef: ElementRef) { }\r\n}\r\n\r\nexport const _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\r\n\r\n\r\nlet nextUniqueId = 0;\r\n\r\n\r\n/** Container for form controls that applies Material Design styling and behavior. */\r\n@Component({\r\n  moduleId: module.id,\r\n  // TODO(mmalerba): the input-container selectors and classes are deprecated and will be removed.\r\n  selector: 'mat-input-container, mat-form-field',\r\n  exportAs: 'matFormField',\r\n  templateUrl: 'form-field.html',\r\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\r\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\r\n  // aren't using MatInput.\r\n  styleUrls: ['form-field.css', '../input/input.css'],\r\n  animations: [matFormFieldAnimations.transitionMessages],\r\n  host: {\r\n    'class': 'mat-input-container mat-form-field',\r\n    '[class.mat-input-invalid]': '_control.errorState',\r\n    '[class.mat-form-field-invalid]': '_control.errorState',\r\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\r\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\r\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\r\n    '[class.mat-form-field-disabled]': '_control.disabled',\r\n    '[class.mat-focused]': '_control.focused',\r\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\r\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\r\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\r\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\r\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\r\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\r\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\r\n    '[class.iap-form-field]': '!origin',\r\n  },\r\n  inputs: ['color'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\n\r\nexport class MatFormField extends _MatFormFieldMixinBase\r\n  implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\r\n  private _labelOptions: LabelOptions;\r\n\r\n  /**\r\n   * @deprecated Use `color` instead.\r\n   * @deletion-target 6.0.0\r\n   */\r\n  @Input()\r\n  get dividerColor(): ThemePalette { return this.color; }\r\n  set dividerColor(value: ThemePalette) { this.color = value; }\r\n\r\n  /** Whether the required marker should be hidden. */\r\n  @Input()\r\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\r\n  set hideRequiredMarker(value: boolean) {\r\n    this._hideRequiredMarker = coerceBooleanProperty(value);\r\n  }\r\n  private _hideRequiredMarker: boolean;\r\n\r\n  /** Override for the logic that disables the label animation in certain cases. */\r\n  private _showAlwaysAnimate = false;\r\n\r\n  /** Whether the floating label should always float or not. */\r\n  get _shouldAlwaysFloat(): boolean {\r\n    return this._floatLabel === 'always' && !this._showAlwaysAnimate;\r\n  }\r\n\r\n  /** Whether the label can float or not. */\r\n  get _canLabelFloat(): boolean { return this._floatLabel !== 'never'; }\r\n\r\n  /** State of the mat-hint and mat-error animations. */\r\n  _subscriptAnimationState: string = '';\r\n\r\n  /** Text for the form field hint. */\r\n  @Input()\r\n  get hintLabel(): string { return this._hintLabel; }\r\n  set hintLabel(value: string) {\r\n    this._hintLabel = value;\r\n    this._processHints();\r\n  }\r\n  private _hintLabel = '';\r\n\r\n  // Unique id for the hint label.\r\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\r\n\r\n  /**\r\n   * Whether the placeholder should always float, never float or float as the user types.\r\n   * @deprecated Use floatLabel instead.\r\n   * @deletion-target 6.0.0\r\n   */\r\n  @Input()\r\n  get floatPlaceholder(): FloatLabelType { return this._floatLabel; }\r\n  set floatPlaceholder(value: FloatLabelType) { this.floatLabel = value; }\r\n\r\n  /** Whether the label should always float, never float or float as the user types. */\r\n  @Input()\r\n  get floatLabel(): FloatLabelType { return this._floatLabel; }\r\n  set floatLabel(value: FloatLabelType) {\r\n    if (value !== this._floatLabel) {\r\n      this._floatLabel = value || this._labelOptions.float || 'auto';\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\r\n  private _floatLabel: FloatLabelType;\r\n  /** origin material and customize material*/\r\n  @Input()\r\n  get origin(): boolean { return this._origin; }\r\n  set origin(value: boolean) {\r\n    this._origin = coerceBooleanProperty(value);\r\n  }\r\n  private _origin: boolean;\r\n  /** Reference to the form field's underline element. */\r\n  @ViewChild('underline') underlineRef: ElementRef;\r\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\r\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\r\n  @ViewChild('label') private _label: ElementRef;\r\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\r\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\r\n  @ContentChild(MatLabel) _labelChild: MatLabel;\r\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\r\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\r\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\r\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\r\n\r\n  constructor(\r\n    public _elementRef: ElementRef,\r\n    private _changeDetectorRef: ChangeDetectorRef,\r\n    @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions) {\r\n    super(_elementRef);\r\n\r\n    this._labelOptions = labelOptions ? labelOptions : {};\r\n    this.floatLabel = this._labelOptions.float || 'auto';\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._validateControlChild();\r\n    if (this._control.controlType) {\r\n      this._elementRef.nativeElement.classList\r\n        .add(`mat-form-field-type-${this._control.controlType}`);\r\n    }\r\n\r\n    // Subscribe to changes in the child control state in order to update the form field UI.\r\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\r\n      this._validatePlaceholders();\r\n      this._syncDescribedByIds();\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n\r\n    let ngControl = this._control.ngControl;\r\n    if (ngControl && ngControl.valueChanges) {\r\n      ngControl.valueChanges.subscribe(() => {\r\n        this._changeDetectorRef.markForCheck();\r\n      });\r\n    }\r\n\r\n    // Re-validate when the number of hints changes.\r\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\r\n      this._processHints();\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n\r\n    // Update the aria-described by when the number of errors changes.\r\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\r\n      this._syncDescribedByIds();\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n  }\r\n\r\n  ngAfterContentChecked() {\r\n    this._validateControlChild();\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    // Avoid animations on load.\r\n    this._subscriptAnimationState = 'enter';\r\n    this._changeDetectorRef.detectChanges();\r\n  }\r\n\r\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\r\n  _shouldForward(prop: string): boolean {\r\n    let ngControl = this._control ? this._control.ngControl : null;\r\n    return ngControl && (ngControl as any)[prop];\r\n  }\r\n\r\n  _hasPlaceholder() {\r\n    return !!(this._control.placeholder || this._placeholderChild);\r\n  }\r\n\r\n  _hasLabel() {\r\n    return !!this._labelChild;\r\n  }\r\n\r\n  _shouldLabelFloat() {\r\n    return this._canLabelFloat && (this._control.shouldLabelFloat ||\r\n      this._control.shouldPlaceholderFloat || this._shouldAlwaysFloat);\r\n  }\r\n\r\n  _hideControlPlaceholder() {\r\n    return !this._hasLabel() || !this._shouldLabelFloat();\r\n  }\r\n\r\n  _hasFloatingLabel() {\r\n    return this._hasLabel() || this._hasPlaceholder();\r\n  }\r\n\r\n  /** Determines whether to display hints or errors. */\r\n  _getDisplayedMessages(): 'error' | 'hint' {\r\n    return (this._errorChildren && this._errorChildren.length > 0 &&\r\n      this._control.errorState) ? 'error' : 'hint';\r\n  }\r\n\r\n  /** Animates the placeholder up and locks it in position. */\r\n  _animateAndLockLabel(): void {\r\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\r\n      this._showAlwaysAnimate = true;\r\n      this._floatLabel = 'always';\r\n\r\n      fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\r\n        this._showAlwaysAnimate = false;\r\n      });\r\n\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\r\n   * or child element with the `mat-placeholder` directive).\r\n   */\r\n  private _validatePlaceholders() {\r\n    if (this._control.placeholder && this._placeholderChild) {\r\n      throw getMatFormFieldPlaceholderConflictError();\r\n    }\r\n  }\r\n\r\n  /** Does any extra processing that is required when handling the hints. */\r\n  private _processHints() {\r\n    this._validateHints();\r\n    this._syncDescribedByIds();\r\n  }\r\n\r\n  /**\r\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\r\n   * attribute being considered as `align=\"start\"`.\r\n   */\r\n  private _validateHints() {\r\n    if (this._hintChildren) {\r\n      let startHint: MatHint;\r\n      let endHint: MatHint;\r\n      this._hintChildren.forEach((hint: MatHint) => {\r\n        if (hint.align === 'start') {\r\n          if (startHint || this.hintLabel) {\r\n            throw getMatFormFieldDuplicatedHintError('start');\r\n          }\r\n          startHint = hint;\r\n        } else if (hint.align === 'end') {\r\n          if (endHint) {\r\n            throw getMatFormFieldDuplicatedHintError('end');\r\n          }\r\n          endHint = hint;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the list of element IDs that describe the child control. This allows the control to update\r\n   * its `aria-describedby` attribute accordingly.\r\n   */\r\n  private _syncDescribedByIds() {\r\n    if (this._control) {\r\n      let ids: string[] = [];\r\n\r\n      if (this._getDisplayedMessages() === 'hint') {\r\n        let startHint = this._hintChildren ?\r\n          this._hintChildren.find(hint => hint.align === 'start') : null;\r\n        let endHint = this._hintChildren ?\r\n          this._hintChildren.find(hint => hint.align === 'end') : null;\r\n\r\n        if (startHint) {\r\n          ids.push(startHint.id);\r\n        } else if (this._hintLabel) {\r\n          ids.push(this._hintLabelId);\r\n        }\r\n\r\n        if (endHint) {\r\n          ids.push(endHint.id);\r\n        }\r\n      } else if (this._errorChildren) {\r\n        ids = this._errorChildren.map(error => error.id);\r\n      }\r\n\r\n      this._control.setDescribedByIds(ids);\r\n    }\r\n  }\r\n\r\n  /** Throws an error if the form field's control is missing. */\r\n  protected _validateControlChild() {\r\n    if (!this._control) {\r\n      throw getMatFormFieldMissingControlError();\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {PlatformModule} from '@angular/cdk/platform';\r\nimport {MatError} from './error';\r\nimport {MatFormField} from './form-field';\r\nimport {MatHint} from './hint';\r\nimport {MatPlaceholder} from './placeholder';\r\nimport {MatPrefix} from './prefix';\r\nimport {MatSuffix} from './suffix';\r\nimport {MatLabel} from './label';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    MatError,\r\n    MatHint,\r\n    MatFormField,\r\n    MatPlaceholder,\r\n    MatPrefix,\r\n    MatSuffix,\r\n    MatLabel,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    PlatformModule,\r\n  ],\r\n  exports: [\r\n    MatError,\r\n    MatHint,\r\n    MatFormField,\r\n    MatPlaceholder,\r\n    MatPrefix,\r\n    MatSuffix,\r\n    MatLabel,\r\n  ],\r\n})\r\nexport class MatFormFieldModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {\r\n  AfterContentInit,\r\n  Component,\r\n  ContentChildren,\r\n  ElementRef,\r\n  Input,\r\n  QueryList,\r\n  TemplateRef,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  ChangeDetectorRef,\r\n  ChangeDetectionStrategy,\r\n  EventEmitter,\r\n  Output,\r\n  InjectionToken,\r\n  Inject,\r\n  Optional,\r\n} from '@angular/core';\r\nimport {\r\n  MatOption,\r\n  MatOptgroup,\r\n  MAT_OPTION_PARENT_COMPONENT,\r\n  mixinDisableRipple,\r\n  CanDisableRipple,\r\n} from '@angular/material/core';\r\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\n\r\n\r\n/**\r\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\r\n * the component definition.\r\n */\r\nlet _uniqueAutocompleteIdCounter = 0;\r\n\r\n/** Event object that is emitted when an autocomplete option is selected. */\r\nexport class MatAutocompleteSelectedEvent {\r\n  constructor(\r\n    /** Reference to the autocomplete panel that emitted the event. */\r\n    public source: MatAutocomplete,\r\n    /** Option that was selected. */\r\n    public option: MatOption) { }\r\n}\r\n\r\n// Boilerplate for applying mixins to MatAutocomplete.\r\n/** @docs-private */\r\nexport class MatAutocompleteBase {}\r\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\r\n\r\n/** Default `mat-autocomplete` options that can be overridden. */\r\nexport interface MatAutocompleteDefaultOptions {\r\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\r\n  autoActiveFirstOption?: boolean;\r\n}\r\n\r\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\r\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\r\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options');\r\n\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-autocomplete',\r\n  templateUrl: 'autocomplete.html',\r\n  styleUrls: ['autocomplete.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  exportAs: 'matAutocomplete',\r\n  inputs: ['disableRipple'],\r\n  host: {\r\n    'class': 'mat-autocomplete'\r\n  },\r\n  providers: [\r\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\r\n  ]\r\n})\r\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\r\n  CanDisableRipple {\r\n\r\n  /** Manages active item in option list based on key events. */\r\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\r\n\r\n  /** Whether the autocomplete panel should be visible, depending on option length. */\r\n  showPanel: boolean = false;\r\n\r\n  /** Whether the autocomplete panel is open. */\r\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\r\n  _isOpen: boolean = false;\r\n\r\n  /** @docs-private */\r\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\r\n\r\n  /** Element for the panel containing the autocomplete options. */\r\n  @ViewChild('panel') panel: ElementRef;\r\n\r\n  /** @docs-private */\r\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\r\n\r\n  /** @docs-private */\r\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\r\n\r\n  /** Function that maps an option's control value to its display value in the trigger. */\r\n  @Input() displayWith: ((value: any) => string) | null = null;\r\n\r\n  /**\r\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\r\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\r\n   */\r\n  @Input()\r\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\r\n  set autoActiveFirstOption(value: boolean) {\r\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\r\n  }\r\n  private _autoActiveFirstOption: boolean;\r\n\r\n\r\n  /** Event that is emitted whenever an option from the list is selected. */\r\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\r\n      new EventEmitter<MatAutocompleteSelectedEvent>();\r\n\r\n  /**\r\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\r\n   * inside the overlay container to allow for easy styling.\r\n   */\r\n  @Input('class')\r\n  set classList(value: string) {\r\n    if (value && value.length) {\r\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\r\n      this._elementRef.nativeElement.className = '';\r\n    }\r\n  }\r\n  _classList: {[key: string]: boolean} = {};\r\n\r\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\r\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\r\n\r\n  constructor(\r\n    private _changeDetectorRef: ChangeDetectorRef,\r\n    private _elementRef: ElementRef,\r\n\r\n    // @deletion-target Turn into required param in 6.0.0\r\n    @Optional() @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS)\r\n        defaults?: MatAutocompleteDefaultOptions) {\r\n    super();\r\n\r\n    this._autoActiveFirstOption = defaults &&\r\n        typeof defaults.autoActiveFirstOption !== 'undefined' ?\r\n            defaults.autoActiveFirstOption :\r\n            false;\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\r\n    // Set the initial visibiity state.\r\n    this._setVisibility();\r\n  }\r\n\r\n  /**\r\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\r\n   * above or below the fold, as they are not actually being focused when active.\r\n   */\r\n  _setScrollTop(scrollTop: number): void {\r\n    if (this.panel) {\r\n      this.panel.nativeElement.scrollTop = scrollTop;\r\n    }\r\n  }\r\n\r\n  /** Returns the panel's scrollTop. */\r\n  _getScrollTop(): number {\r\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\r\n  }\r\n\r\n  /** Panel should hide itself when the option list is empty. */\r\n  _setVisibility() {\r\n    this.showPanel = !!this.options.length;\r\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\r\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\r\n    this._changeDetectorRef.markForCheck();\r\n}\r\n\r\n  /** Emits the `select` event. */\r\n  _emitSelectEvent(option: MatOption): void {\r\n    const event = new MatAutocompleteSelectedEvent(this, option);\r\n    this.optionSelected.emit(event);\r\n  }\r\n}\r\n\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {Constructor} from './constructor';\r\n\r\n/** @docs-private */\r\nexport interface CanDisable {\r\n  /** Whether the component is disabled. */\r\n  disabled: boolean;\r\n}\r\n\r\n/** Mixin to augment a directive with a `disabled` property. */\r\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\r\n  return class extends base {\r\n    private _disabled: boolean = false;\r\n\r\n    get disabled() { return this._disabled; }\r\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\r\n\r\n    constructor(...args: any[]) { super(...args); }\r\n  };\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Constructor} from './constructor';\r\nimport {ElementRef} from '@angular/core';\r\n\r\n/** @docs-private */\r\nexport interface CanColor {\r\n  /** Theme color palette for the component. */\r\n  color: ThemePalette;\r\n}\r\n\r\n/** @docs-private */\r\nexport interface HasElementRef {\r\n  _elementRef: ElementRef;\r\n}\r\n\r\n/** Possible color palette values. */\r\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\r\n\r\n/** Mixin to augment a directive with a `color` property. */\r\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\r\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\r\n  return class extends base {\r\n    private _color: ThemePalette;\r\n\r\n    get color(): ThemePalette { return this._color; }\r\n    set color(value: ThemePalette) {\r\n      const colorPalette = value || defaultColor;\r\n\r\n      if (colorPalette !== this._color) {\r\n        if (this._color) {\r\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\r\n        }\r\n        if (colorPalette) {\r\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\r\n        }\r\n\r\n        this._color = colorPalette;\r\n      }\r\n    }\r\n\r\n    constructor(...args: any[]) {\r\n      super(...args);\r\n\r\n      // Set the default color that can be specified from the mixin.\r\n      this.color = defaultColor;\r\n    }\r\n  };\r\n}\r\n\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {Constructor} from './constructor';\r\n\r\n/** @docs-private */\r\nexport interface CanDisableRipple {\r\n  /** Whether ripples are disabled. */\r\n  disableRipple: boolean;\r\n}\r\n\r\n/** Mixin to augment a directive with a `disableRipple` property. */\r\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\r\n    : Constructor<CanDisableRipple> & T {\r\n  return class extends base {\r\n    private _disableRipple: boolean = false;\r\n\r\n    /** Whether the ripple effect is disabled or not. */\r\n    get disableRipple() { return this._disableRipple; }\r\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\r\n\r\n    constructor(...args: any[]) { super(...args); }\r\n  };\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Constructor} from './constructor';\r\nimport {CanDisable} from './disabled';\r\n\r\n/** @docs-private */\r\nexport interface HasTabIndex {\r\n  /** Tabindex of the component. */\r\n  tabIndex: number;\r\n}\r\n\r\n/** Mixin to augment a directive with a `tabIndex` property. */\r\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\r\n    : Constructor<HasTabIndex> & T {\r\n  return class extends base {\r\n    private _tabIndex: number = defaultTabIndex;\r\n\r\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\r\n    set tabIndex(value: number) {\r\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\r\n      this._tabIndex = value != null ? value : defaultTabIndex;\r\n    }\r\n\r\n    constructor(...args: any[]) {\r\n      super(...args);\r\n    }\r\n  };\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Constructor} from './constructor';\r\nimport {ErrorStateMatcher} from '../error/error-options';\r\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\r\nimport {Subject} from 'rxjs/Subject';\r\n\r\n/** @docs-private */\r\nexport interface CanUpdateErrorState {\r\n  updateErrorState();\r\n  readonly stateChanges: Subject<void>;\r\n  errorState: boolean;\r\n  errorStateMatcher: ErrorStateMatcher;\r\n}\r\n\r\n/** @docs-private */\r\nexport interface HasErrorState {\r\n  _parentFormGroup: FormGroupDirective;\r\n  _parentForm: NgForm;\r\n  _defaultErrorStateMatcher: ErrorStateMatcher;\r\n  ngControl: NgControl;\r\n}\r\n\r\n/**\r\n * Mixin to augment a directive with updateErrorState method.\r\n * For component with `errorState` and need to update `errorState`.\r\n */\r\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\r\n: Constructor<CanUpdateErrorState> & T {\r\n  return class extends base {\r\n    /** Whether the component is in an error state. */\r\n    errorState: boolean = false;\r\n\r\n    /**\r\n     * Stream that emits whenever the state of the input changes such that the wrapping\r\n     * `MatFormField` needs to run change detection.\r\n     */\r\n    readonly stateChanges = new Subject<void>();\r\n\r\n    errorStateMatcher: ErrorStateMatcher;\r\n\r\n    updateErrorState() {\r\n      const oldState = this.errorState;\r\n      const parent = this._parentFormGroup || this._parentForm;\r\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\r\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\r\n      const newState = matcher.isErrorState(control, parent);\r\n\r\n      if (newState !== oldState) {\r\n        this.errorState = newState;\r\n        this.stateChanges.next();\r\n      }\r\n    }\r\n\r\n    constructor(...args: any[]) {\r\n      super(...args);\r\n    }\r\n  };\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Constructor} from './constructor';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {Subscriber} from 'rxjs/Subscriber';\r\n\r\n/**\r\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\r\n * value once markInitialized has been called, which should be done during the ngOnInit function.\r\n * If the subscription is made after it has already been marked as initialized, then it will trigger\r\n * an emit immediately.\r\n * @docs-private\r\n */\r\nexport interface HasInitialized {\r\n  /** Stream that emits once during the directive/component's ngOnInit. */\r\n  initialized: Observable<void>;\r\n\r\n  /**\r\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\r\n   * the directive has been initialized.\r\n   * @docs-private\r\n   */\r\n  _markInitialized: () => void;\r\n}\r\n\r\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\r\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\r\n    Constructor<HasInitialized> & T {\r\n  return class extends base {\r\n    /** Whether this directive has been marked as initialized. */\r\n    _isInitialized = false;\r\n\r\n    /**\r\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\r\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\r\n     * not expect to be populated after.\r\n     */\r\n    _pendingSubscribers: Subscriber<void>[] | null = [];\r\n\r\n    /**\r\n     * Observable stream that emits when the directive initializes. If already initialized, the\r\n     * subscriber is stored to be notified once _markInitialized is called.\r\n     */\r\n    initialized = new Observable<void>(subscriber => {\r\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\r\n      // when _markInitialized is called.\r\n      if (this._isInitialized) {\r\n        this._notifySubscriber(subscriber);\r\n      } else {\r\n        this._pendingSubscribers!.push(subscriber);\r\n      }\r\n    });\r\n\r\n    constructor(...args: any[]) { super(...args); }\r\n\r\n    /**\r\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\r\n     * of ngOnInit.\r\n     * @docs-private\r\n     */\r\n    _markInitialized(): void {\r\n      if (this._isInitialized) {\r\n        throw Error('This directive has already been marked as initialized and ' +\r\n            'should not be called twice.');\r\n      }\r\n\r\n      this._isInitialized = true;\r\n\r\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\r\n      this._pendingSubscribers = null;\r\n    }\r\n\r\n    /** Emits and completes the subscriber stream (should only emit once). */\r\n    _notifySubscriber(subscriber: Subscriber<void>): void {\r\n      subscriber.next();\r\n      subscriber.complete();\r\n    }\r\n  };\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Inject, Injectable, Optional} from '@angular/core';\r\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\r\n\r\n// TODO(mmalerba): Remove when we no longer support safari 9.\r\n/** Whether the browser supports the Intl API. */\r\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\r\n\r\n\r\n/** The default month names to use if Intl API is not available. */\r\nconst DEFAULT_MONTH_NAMES = {\r\n  'long': [\r\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\r\n    'October', 'November', 'December'\r\n  ],\r\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\r\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\r\n};\r\n\r\n\r\n/** The default date names to use if Intl API is not available. */\r\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\r\n\r\n\r\n/** The default day of the week names to use if Intl API is not available. */\r\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\r\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\r\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\r\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\r\n};\r\n\r\n\r\n/**\r\n * Matches strings that have the form of a valid RFC 3339 string\r\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\r\n * because the regex will match strings an with out of bounds month, date, etc.\r\n */\r\nconst ISO_8601_REGEX =\r\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\r\n\r\n\r\n/** Creates an array and fills it with values. */\r\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\r\n  const valuesArray = Array(length);\r\n  for (let i = 0; i < length; i++) {\r\n    valuesArray[i] = valueFunction(i);\r\n  }\r\n  return valuesArray;\r\n}\r\n\r\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\r\n@Injectable()\r\nexport class NativeDateAdapter extends DateAdapter<Date> {\r\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\r\n  private readonly _clampDate: boolean;\r\n\r\n  /**\r\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\r\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\r\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\r\n   * will produce `'8/13/1800'`.\r\n   *\r\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\r\n   * getting the string representation of a Date object from it's utc representation. We're keeping\r\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\r\n   * though.\r\n   */\r\n  useUtcForDisplay: boolean;\r\n\r\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string) {\r\n    super();\r\n    super.setLocale(matDateLocale);\r\n\r\n    // IE does its own time zone correction, so we disable this on IE.\r\n    // TODO(mmalerba): replace with checks from PLATFORM, logic currently duplicated to avoid\r\n    // breaking change from injecting the Platform.\r\n    const isBrowser = typeof document === 'object' && !!document;\r\n    const isIE = isBrowser && /(msie|trident)/i.test(navigator.userAgent);\r\n\r\n    this.useUtcForDisplay = !isIE;\r\n    this._clampDate = isIE || (isBrowser && /(edge)/i.test(navigator.userAgent));\r\n  }\r\n\r\n  getYear(date: Date): number {\r\n    return date.getFullYear();\r\n  }\r\n\r\n  getMonth(date: Date): number {\r\n    return date.getMonth();\r\n  }\r\n\r\n  getDate(date: Date): number {\r\n    return date.getDate();\r\n  }\r\n\r\n  getDayOfWeek(date: Date): number {\r\n    return date.getDay();\r\n  }\r\n\r\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\r\n    if (SUPPORTS_INTL_API) {\r\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\r\n      return range(12, i =>\r\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\r\n    }\r\n    return DEFAULT_MONTH_NAMES[style];\r\n  }\r\n\r\n  getDateNames(): string[] {\r\n    if (SUPPORTS_INTL_API) {\r\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\r\n      return range(31, i => this._stripDirectionalityCharacters(\r\n          this._format(dtf, new Date(2017, 0, i + 1))));\r\n    }\r\n    return DEFAULT_DATE_NAMES;\r\n  }\r\n\r\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\r\n    if (SUPPORTS_INTL_API) {\r\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\r\n      return range(7, i => this._stripDirectionalityCharacters(\r\n          this._format(dtf, new Date(2017, 0, i + 1))));\r\n    }\r\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\r\n  }\r\n\r\n  getYearName(date: Date): string {\r\n    if (SUPPORTS_INTL_API) {\r\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\r\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\r\n    }\r\n    return String(this.getYear(date));\r\n  }\r\n\r\n  getFirstDayOfWeek(): number {\r\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\r\n    return 0;\r\n  }\r\n\r\n  getNumDaysInMonth(date: Date): number {\r\n    return this.getDate(this._createDateWithOverflow(\r\n        this.getYear(date), this.getMonth(date) + 1, 0));\r\n  }\r\n\r\n  clone(date: Date): Date {\r\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\r\n  }\r\n\r\n  createDate(year: number, month: number, date: number): Date {\r\n    // Check for invalid month and date (except upper bound on date which we have to check after\r\n    // creating the Date).\r\n    if (month < 0 || month > 11) {\r\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\r\n    }\r\n\r\n    if (date < 1) {\r\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\r\n    }\r\n\r\n    let result = this._createDateWithOverflow(year, month, date);\r\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\r\n    if (result.getMonth() != month) {\r\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  today(): Date {\r\n    return new Date();\r\n  }\r\n\r\n  parse(value: any): Date | null {\r\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\r\n    // parameters.\r\n    if (typeof value == 'number') {\r\n      return new Date(value);\r\n    }\r\n    return value ? new Date(Date.parse(value)) : null;\r\n  }\r\n\r\n  format(date: Date, displayFormat: Object): string {\r\n    if (!this.isValid(date)) {\r\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\r\n    }\r\n\r\n    if (SUPPORTS_INTL_API) {\r\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\r\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\r\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\r\n        date = this.clone(date);\r\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\r\n      }\r\n\r\n      displayFormat = {...displayFormat, timeZone: 'utc'};\r\n\r\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\r\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\r\n    }\r\n    return this._stripDirectionalityCharacters(date.toDateString());\r\n  }\r\n\r\n  addCalendarYears(date: Date, years: number): Date {\r\n    return this.addCalendarMonths(date, years * 12);\r\n  }\r\n\r\n  addCalendarMonths(date: Date, months: number): Date {\r\n    let newDate = this._createDateWithOverflow(\r\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\r\n\r\n    // It's possible to wind up in the wrong month if the original month has more days than the new\r\n    // month. In this case we want to go to the last day of the desired month.\r\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\r\n    // guarantee this.\r\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\r\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\r\n    }\r\n\r\n    return newDate;\r\n  }\r\n\r\n  addCalendarDays(date: Date, days: number): Date {\r\n    return this._createDateWithOverflow(\r\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\r\n  }\r\n\r\n  toIso8601(date: Date): string {\r\n    return [\r\n      date.getUTCFullYear(),\r\n      this._2digit(date.getUTCMonth() + 1),\r\n      this._2digit(date.getUTCDate())\r\n    ].join('-');\r\n  }\r\n\r\n  /**\r\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\r\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\r\n   * invalid date for all other values.\r\n   */\r\n  deserialize(value: any): Date | null {\r\n    if (typeof value === 'string') {\r\n      if (!value) {\r\n        return null;\r\n      }\r\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\r\n      // string is the right format first.\r\n      if (ISO_8601_REGEX.test(value)) {\r\n        let date = new Date(value);\r\n        if (this.isValid(date)) {\r\n          return date;\r\n        }\r\n      }\r\n    }\r\n    return super.deserialize(value);\r\n  }\r\n\r\n  isDateInstance(obj: any) {\r\n    return obj instanceof Date;\r\n  }\r\n\r\n  isValid(date: Date) {\r\n    return !isNaN(date.getTime());\r\n  }\r\n\r\n  invalid(): Date {\r\n    return new Date(NaN);\r\n  }\r\n\r\n  /** Creates a date but allows the month and date to overflow. */\r\n  private _createDateWithOverflow(year: number, month: number, date: number) {\r\n    const result = new Date(year, month, date);\r\n\r\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\r\n    // abbreviations for 19xx.\r\n    if (year >= 0 && year < 100) {\r\n      result.setFullYear(this.getYear(result) - 1900);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Pads a number to make it two digits.\r\n   * @param n The number to pad.\r\n   * @returns The padded number.\r\n   */\r\n  private _2digit(n: number) {\r\n    return ('00' + n).slice(-2);\r\n  }\r\n\r\n  /**\r\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\r\n   * other browsers do not. We remove them to make output consistent and because they interfere with\r\n   * date parsing.\r\n   * @param str The string to strip direction characters from.\r\n   * @returns The stripped string.\r\n   */\r\n  private _stripDirectionalityCharacters(str: string) {\r\n    return str.replace(/[\\u200e\\u200f]/g, '');\r\n  }\r\n\r\n  /**\r\n   * When converting Date object to string, javascript built-in functions may return wrong\r\n   * results because it applies its internal DST rules. The DST rules around the world change\r\n   * very frequently, and the current valid rule is not always valid in previous years though.\r\n   * We work around this problem building a new Date object which has its internal UTC\r\n   * representation with the local date and time.\r\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\r\n   *    timeZone set to 'utc' to work fine.\r\n   * @param date Date from which we want to get the string representation according to dtf\r\n   * @returns A Date object with its UTC representation based on the passed in date info\r\n   */\r\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\r\n    const d = new Date(Date.UTC(\r\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\r\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\r\n    return dtf.format(d);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {ElementRef, NgZone} from '@angular/core';\r\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\r\nimport {RippleRef, RippleState} from './ripple-ref';\r\n\r\nexport type RippleConfig = {\r\n  color?: string;\r\n  centered?: boolean;\r\n  radius?: number;\r\n  persistent?: boolean;\r\n  animation?: RippleAnimationConfig;\r\n  terminateOnPointerUp?: boolean;\r\n  /**\r\n   * @deprecated Use the `animation` property instead.\r\n   * @deletion-target 7.0.0\r\n   */\r\n  speedFactor?: number;\r\n};\r\n\r\n/**\r\n * Interface that describes the configuration for the animation of a ripple.\r\n * There are two animation phases with different durations for the ripples.\r\n */\r\nexport interface RippleAnimationConfig {\r\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\r\n  enterDuration?: number;\r\n  /** Duration in milliseconds for the exit animation (fade-out). */\r\n  exitDuration?: number;\r\n}\r\n\r\n/**\r\n * Interface that describes the target for launching ripples.\r\n * It defines the ripple configuration and disabled state for interaction ripples.\r\n * @docs-private\r\n */\r\nexport interface RippleTarget {\r\n  /** Configuration for ripples that are launched on pointer down. */\r\n  rippleConfig: RippleConfig;\r\n  /** Whether ripples on pointer down should be disabled. */\r\n  rippleDisabled: boolean;\r\n}\r\n\r\n/**\r\n * Default ripple animation configuration for ripples without an explicit\r\n * animation config specified.\r\n */\r\nexport const defaultRippleAnimationConfig = {\r\n  enterDuration: 450,\r\n  exitDuration: 400\r\n};\r\n\r\n/**\r\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\r\n * events to avoid synthetic mouse events.\r\n */\r\nconst ignoreMouseEventsTimeout = 800;\r\n\r\n/**\r\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\r\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\r\n * event handlers to be installed on the element that triggers ripple animations.\r\n * This will eventually become a custom renderer once Angular support exists.\r\n * @docs-private\r\n */\r\nexport class RippleRenderer {\r\n\r\n  /** Element where the ripples are being added to. */\r\n  private _containerElement: HTMLElement;\r\n\r\n  /** Element which triggers the ripple elements on mouse events. */\r\n  private _triggerElement: HTMLElement | null;\r\n\r\n  /** Whether the pointer is currently down or not. */\r\n  private _isPointerDown = false;\r\n\r\n  /** Events to be registered on the trigger element. */\r\n  private _triggerEvents = new Map<string, any>();\r\n\r\n  /** Set of currently active ripple references. */\r\n  private _activeRipples = new Set<RippleRef>();\r\n\r\n  /** Time in milliseconds when the last touchstart event happened. */\r\n  private _lastTouchStartEvent: number;\r\n\r\n  /** Options that apply to all the event listeners that are bound by the renderer. */\r\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\r\n\r\n  constructor(private _target: RippleTarget,\r\n              private _ngZone: NgZone,\r\n              elementRef: ElementRef,\r\n              platform: Platform) {\r\n\r\n    // Only do anything if we're on the browser.\r\n    if (platform.isBrowser) {\r\n      this._containerElement = elementRef.nativeElement;\r\n\r\n      // Specify events which need to be registered on the trigger.\r\n      this._triggerEvents.set('mousedown', this.onMousedown);\r\n      this._triggerEvents.set('mouseup', this.onPointerUp);\r\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\r\n\r\n      this._triggerEvents.set('touchstart', this.onTouchStart);\r\n      this._triggerEvents.set('touchend', this.onPointerUp);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fades in a ripple at the given coordinates.\r\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\r\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\r\n   * @param config Extra ripple options.\r\n   */\r\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\r\n    const containerRect = this._containerElement.getBoundingClientRect();\r\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\r\n\r\n    if (config.centered) {\r\n      x = containerRect.left + containerRect.width / 2;\r\n      y = containerRect.top + containerRect.height / 2;\r\n    }\r\n\r\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\r\n    const offsetX = x - containerRect.left;\r\n    const offsetY = y - containerRect.top;\r\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\r\n\r\n    const ripple = document.createElement('div');\r\n    ripple.classList.add('mat-ripple-element');\r\n\r\n    ripple.style.left = `${offsetX - radius}px`;\r\n    ripple.style.top = `${offsetY - radius}px`;\r\n    ripple.style.height = `${radius * 2}px`;\r\n    ripple.style.width = `${radius * 2}px`;\r\n\r\n    // If the color is not set, the default CSS color will be used.\r\n    ripple.style.backgroundColor = config.color || null;\r\n    ripple.style.transitionDuration = `${duration}ms`;\r\n\r\n    this._containerElement.appendChild(ripple);\r\n\r\n    // By default the browser does not recalculate the styles of dynamically created\r\n    // ripple elements. This is critical because then the `scale` would not animate properly.\r\n    enforceStyleRecalculation(ripple);\r\n\r\n    ripple.style.transform = 'scale(1)';\r\n\r\n    // Exposed reference to the ripple that will be returned.\r\n    const rippleRef = new RippleRef(this, ripple, config);\r\n\r\n    rippleRef.state = RippleState.FADING_IN;\r\n\r\n    // Add the ripple reference to the list of all active ripples.\r\n    this._activeRipples.add(rippleRef);\r\n\r\n    // Wait for the ripple element to be completely faded in.\r\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\r\n    this.runTimeoutOutsideZone(() => {\r\n      rippleRef.state = RippleState.VISIBLE;\r\n\r\n      if (!config.persistent && !this._isPointerDown) {\r\n        rippleRef.fadeOut();\r\n      }\r\n    }, duration);\r\n\r\n    return rippleRef;\r\n  }\r\n\r\n  /** Fades out a ripple reference. */\r\n  fadeOutRipple(rippleRef: RippleRef) {\r\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\r\n    if (!this._activeRipples.delete(rippleRef)) {\r\n      return;\r\n    }\r\n\r\n    const rippleEl = rippleRef.element;\r\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\r\n\r\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\r\n    rippleEl.style.opacity = '0';\r\n\r\n    rippleRef.state = RippleState.FADING_OUT;\r\n\r\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\r\n    this.runTimeoutOutsideZone(() => {\r\n      rippleRef.state = RippleState.HIDDEN;\r\n      rippleEl.parentNode!.removeChild(rippleEl);\r\n    }, animationConfig.exitDuration);\r\n  }\r\n\r\n  /** Fades out all currently active ripples. */\r\n  fadeOutAll() {\r\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\r\n  }\r\n\r\n  /** Sets up the trigger event listeners */\r\n  setupTriggerEvents(element: HTMLElement) {\r\n    if (!element || element === this._triggerElement) {\r\n      return;\r\n    }\r\n\r\n    // Remove all previously registered event listeners from the trigger element.\r\n    this._removeTriggerEvents();\r\n\r\n    this._ngZone.runOutsideAngular(() => {\r\n      this._triggerEvents.forEach((fn, type) =>\r\n          element.addEventListener(type, fn, this._eventOptions));\r\n    });\r\n\r\n    this._triggerElement = element;\r\n  }\r\n\r\n  /** Function being called whenever the trigger is being pressed using mouse. */\r\n  private onMousedown = (event: MouseEvent) => {\r\n    const isSyntheticEvent = this._lastTouchStartEvent &&\r\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\r\n\r\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\r\n      this._isPointerDown = true;\r\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\r\n    }\r\n  }\r\n\r\n  /** Function being called whenever the trigger is being pressed using touch. */\r\n  private onTouchStart = (event: TouchEvent) => {\r\n    if (!this._target.rippleDisabled) {\r\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\r\n      // events will launch a second ripple if we don't ignore mouse events for a specific\r\n      // time after a touchstart event.\r\n      this._lastTouchStartEvent = Date.now();\r\n      this._isPointerDown = true;\r\n\r\n      this.fadeInRipple(\r\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\r\n    }\r\n  }\r\n\r\n  /** Function being called whenever the trigger is being released. */\r\n  private onPointerUp = () => {\r\n    if (!this._isPointerDown) {\r\n      return;\r\n    }\r\n\r\n    this._isPointerDown = false;\r\n\r\n    // Fade-out all ripples that are visible and not persistent.\r\n    this._activeRipples.forEach(ripple => {\r\n      // By default, only ripples that are completely visible will fade out on pointer release.\r\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\r\n      const isVisible = ripple.state === RippleState.VISIBLE ||\r\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\r\n\r\n      if (!ripple.config.persistent && isVisible) {\r\n        ripple.fadeOut();\r\n      }\r\n    });\r\n  }\r\n\r\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\r\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\r\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\r\n  }\r\n\r\n  /** Removes previously registered event listeners from the trigger element. */\r\n  _removeTriggerEvents() {\r\n    if (this._triggerElement) {\r\n      this._triggerEvents.forEach((fn, type) => {\r\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\n/** Enforces a style recalculation of a DOM element by computing its styles. */\r\nfunction enforceStyleRecalculation(element: HTMLElement) {\r\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\r\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\r\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\r\n  window.getComputedStyle(element).getPropertyValue('opacity');\r\n}\r\n\r\n/**\r\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\r\n */\r\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\r\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\r\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\r\n  return Math.sqrt(distX * distX + distY * distY);\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/** @docs-private */\r\nexport function getMatFormFieldPlaceholderConflictError(): Error {\r\n  return Error('Placeholder attribute and child element were both specified.');\r\n}\r\n\r\n/** @docs-private */\r\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\r\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\r\n}\r\n\r\n/** @docs-private */\r\nexport function getMatFormFieldMissingControlError(): Error {\r\n  return Error('mat-form-field must contain a MatFormFieldControl.');\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/** @docs-private */\r\nexport function getMatInputUnsupportedTypeError(type: string): Error {\r\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/** @docs-private */\r\nexport function createMissingDateImplError(provider: string) {\r\n  return Error(\r\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\r\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\r\n      `custom implementation.`);\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Converts values into strings. Falsy values become empty strings.\r\n * @docs-private\r\n */\r\nexport function coerceToString(value: string | number): string {\r\n  return `${value || ''}`;\r\n}\r\n\r\n/**\r\n * Converts a value that might be a string into a number.\r\n * @docs-private\r\n */\r\nexport function coerceToNumber(value: string | number): number {\r\n  return typeof value === 'string' ? parseInt(value, 10) : value;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\r\n * @docs-private\r\n */\r\nexport function throwMatMenuMissingError() {\r\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\r\n\r\n    Example:\r\n      <mat-menu #menu=\"matMenu\"></mat-menu>\r\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\r\n}\r\n\r\n/**\r\n * Throws an exception for the case when menu's x-position value isn't valid.\r\n * In other words, it doesn't match 'before' or 'after'.\r\n * @docs-private\r\n */\r\nexport function throwMatMenuInvalidPositionX() {\r\n  throw Error(`x-position value must be either 'before' or after'.\r\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\r\n}\r\n\r\n/**\r\n * Throws an exception for the case when menu's y-position value isn't valid.\r\n * In other words, it doesn't match 'above' or 'below'.\r\n * @docs-private\r\n */\r\nexport function throwMatMenuInvalidPositionY() {\r\n  throw Error(`y-position value must be either 'above' or below'.\r\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\r\n * after initialization.\r\n * @docs-private\r\n */\r\nexport function getMatSelectDynamicMultipleError(): Error {\r\n  return Error('Cannot change `multiple` mode of select after initialization.');\r\n}\r\n\r\n/**\r\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\r\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\r\n * resetting the value.\r\n * @docs-private\r\n */\r\nexport function getMatSelectNonArrayValueError(): Error {\r\n  return Error('Value must be an array in multiple-selection mode.');\r\n}\r\n\r\n/**\r\n * Returns an exception to be thrown when assigning a non-function value to the comparator\r\n * used to determine if a value corresponds to an option. Note that whether the function\r\n * actually takes two values and returns a boolean is not checked.\r\n */\r\nexport function getMatSelectNonFunctionValueError(): Error {\r\n  return Error('`compareWith` must be a function.');\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/** @docs-private */\r\nexport function getSortDuplicateSortableIdError(id: string): Error {\r\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\r\n}\r\n\r\n/** @docs-private */\r\nexport function getSortHeaderNotContainedWithinSortError(): Error {\r\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\r\n}\r\n\r\n/** @docs-private */\r\nexport function getSortHeaderMissingIdError(): Error {\r\n  return Error(`MatSortHeader must be provided with a unique id.`);\r\n}\r\n\r\n/** @docs-private */\r\nexport function getSortInvalidDirectionError(direction: string): Error {\r\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/** @docs-private */\r\nexport class AnimationCurves {\r\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\r\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\r\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\r\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\r\n}\r\n\r\n\r\n/** @docs-private */\r\nexport class AnimationDurations {\r\n  static COMPLEX = '375ms';\r\n  static ENTERING = '225ms';\r\n  static EXITING = '195ms';\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\r\nimport {BidiModule} from '@angular/cdk/bidi';\r\n\r\n\r\n/** Injection token that configures whether the Material sanity checks are enabled. */\r\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks');\r\n\r\n\r\n/**\r\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\r\n * components. This includes Bidi, etc.\r\n *\r\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\r\n */\r\n@NgModule({\r\n  imports: [BidiModule],\r\n  exports: [BidiModule],\r\n  providers: [{\r\n    provide: MATERIAL_SANITY_CHECKS, useValue: true,\r\n  }],\r\n})\r\nexport class MatCommonModule {\r\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\r\n  private _hasDoneGlobalChecks = false;\r\n\r\n  /** Whether we've already checked for HammerJs availability. */\r\n  private _hasCheckedHammer = false;\r\n\r\n  /** Reference to the global `document` object. */\r\n  private _document = typeof document === 'object' && document ? document : null;\r\n\r\n  /** Reference to the global 'window' object. */\r\n  private _window = typeof window === 'object' && window ? window : null;\r\n\r\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\r\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\r\n      this._checkDoctypeIsDefined();\r\n      this._checkThemeIsPresent();\r\n      this._hasDoneGlobalChecks = true;\r\n    }\r\n  }\r\n\r\n  /** Whether any sanity checks are enabled */\r\n  private _areChecksEnabled(): boolean {\r\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\r\n  }\r\n\r\n  /** Whether the code is running in tests. */\r\n  private _isTestEnv() {\r\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\r\n  }\r\n\r\n  private _checkDoctypeIsDefined(): void {\r\n    if (this._document && !this._document.doctype) {\r\n      console.warn(\r\n        'Current document does not have a doctype. This may cause ' +\r\n        'some Angular Material components not to behave as expected.'\r\n      );\r\n    }\r\n  }\r\n\r\n  private _checkThemeIsPresent(): void {\r\n    if (this._document && typeof getComputedStyle === 'function') {\r\n      const testElement = this._document.createElement('div');\r\n\r\n      testElement.classList.add('mat-theme-loaded-marker');\r\n      this._document.body.appendChild(testElement);\r\n\r\n      const computedStyle = getComputedStyle(testElement);\r\n\r\n      // In some situations, the computed style of the test element can be null. For example in\r\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\r\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\r\n      if (computedStyle && computedStyle.display !== 'none') {\r\n        console.warn(\r\n          'Could not find Angular Material core theme. Most Material ' +\r\n          'components may not work as expected. For more info refer ' +\r\n          'to the theming guide: https://material.angular.io/guide/theming'\r\n        );\r\n      }\r\n\r\n      this._document.body.removeChild(testElement);\r\n    }\r\n  }\r\n\r\n  /** Checks whether HammerJS is available. */\r\n  _checkHammerIsAvailable(): void {\r\n    if (this._hasCheckedHammer || !this._window) {\r\n      return;\r\n    }\r\n\r\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\r\n      console.warn(\r\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\r\n    }\r\n    this._hasCheckedHammer = true;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {InjectionToken, LOCALE_ID} from '@angular/core';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {Subject} from 'rxjs/Subject';\r\n\r\n\r\n/** InjectionToken for datepicker that can be used to override default locale code. */\r\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE');\r\n\r\n/** Provider for MAT_DATE_LOCALE injection token. */\r\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\r\n\r\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\r\nexport abstract class DateAdapter<D> {\r\n  /** The locale to use for all dates. */\r\n  protected locale: any;\r\n\r\n  /** A stream that emits when the locale changes. */\r\n  get localeChanges(): Observable<void> { return this._localeChanges; }\r\n  protected _localeChanges = new Subject<void>();\r\n\r\n  /**\r\n   * Gets the year component of the given date.\r\n   * @param date The date to extract the year from.\r\n   * @returns The year component.\r\n   */\r\n  abstract getYear(date: D): number;\r\n\r\n  /**\r\n   * Gets the month component of the given date.\r\n   * @param date The date to extract the month from.\r\n   * @returns The month component (0-indexed, 0 = January).\r\n   */\r\n  abstract getMonth(date: D): number;\r\n\r\n  /**\r\n   * Gets the date of the month component of the given date.\r\n   * @param date The date to extract the date of the month from.\r\n   * @returns The month component (1-indexed, 1 = first of month).\r\n   */\r\n  abstract getDate(date: D): number;\r\n\r\n  /**\r\n   * Gets the day of the week component of the given date.\r\n   * @param date The date to extract the day of the week from.\r\n   * @returns The month component (0-indexed, 0 = Sunday).\r\n   */\r\n  abstract getDayOfWeek(date: D): number;\r\n\r\n  /**\r\n   * Gets a list of names for the months.\r\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\r\n   * @returns An ordered list of all month names, starting with January.\r\n   */\r\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\r\n\r\n  /**\r\n   * Gets a list of names for the dates of the month.\r\n   * @returns An ordered list of all date of the month names, starting with '1'.\r\n   */\r\n  abstract getDateNames(): string[];\r\n\r\n  /**\r\n   * Gets a list of names for the days of the week.\r\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\r\n   * @returns An ordered list of all weekday names, starting with Sunday.\r\n   */\r\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\r\n\r\n  /**\r\n   * Gets the name for the year of the given date.\r\n   * @param date The date to get the year name for.\r\n   * @returns The name of the given year (e.g. '2017').\r\n   */\r\n  abstract getYearName(date: D): string;\r\n\r\n  /**\r\n   * Gets the first day of the week.\r\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\r\n   */\r\n  abstract getFirstDayOfWeek(): number;\r\n\r\n  /**\r\n   * Gets the number of days in the month of the given date.\r\n   * @param date The date whose month should be checked.\r\n   * @returns The number of days in the month of the given date.\r\n   */\r\n  abstract getNumDaysInMonth(date: D): number;\r\n\r\n  /**\r\n   * Clones the given date.\r\n   * @param date The date to clone\r\n   * @returns A new date equal to the given date.\r\n   */\r\n  abstract clone(date: D): D;\r\n\r\n  /**\r\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\r\n   * month and date.\r\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\r\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\r\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\r\n   * @returns The new date, or null if invalid.\r\n   */\r\n  abstract createDate(year: number, month: number, date: number): D;\r\n\r\n  /**\r\n   * Gets today's date.\r\n   * @returns Today's date.\r\n   */\r\n  abstract today(): D;\r\n\r\n  /**\r\n   * Parses a date from a user-provided value.\r\n   * @param value The value to parse.\r\n   * @param parseFormat The expected format of the value being parsed\r\n   *     (type is implementation-dependent).\r\n   * @returns The parsed date.\r\n   */\r\n  abstract parse(value: any, parseFormat: any): D | null;\r\n\r\n  /**\r\n   * Formats a date as a string according to the given format.\r\n   * @param date The value to format.\r\n   * @param displayFormat The format to use to display the date as a string.\r\n   * @returns The formatted date string.\r\n   */\r\n  abstract format(date: D, displayFormat: any): string;\r\n\r\n  /**\r\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\r\n   * calendar for each year and then finding the closest date in the new month. For example when\r\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\r\n   * @param date The date to add years to.\r\n   * @param years The number of years to add (may be negative).\r\n   * @returns A new date equal to the given one with the specified number of years added.\r\n   */\r\n  abstract addCalendarYears(date: D, years: number): D;\r\n\r\n  /**\r\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\r\n   * calendar for each month and then finding the closest date in the new month. For example when\r\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\r\n   * @param date The date to add months to.\r\n   * @param months The number of months to add (may be negative).\r\n   * @returns A new date equal to the given one with the specified number of months added.\r\n   */\r\n  abstract addCalendarMonths(date: D, months: number): D;\r\n\r\n  /**\r\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\r\n   * calendar for each day.\r\n   * @param date The date to add days to.\r\n   * @param days The number of days to add (may be negative).\r\n   * @returns A new date equal to the given one with the specified number of days added.\r\n   */\r\n  abstract addCalendarDays(date: D, days: number): D;\r\n\r\n  /**\r\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\r\n   * This method is used to generate date strings that are compatible with native HTML attributes\r\n   * such as the `min` or `max` attribute of an `<input>`.\r\n   * @param date The date to get the ISO date string for.\r\n   * @returns The ISO date string date string.\r\n   */\r\n  abstract toIso8601(date: D): string;\r\n\r\n  /**\r\n   * Checks whether the given object is considered a date instance by this DateAdapter.\r\n   * @param obj The object to check\r\n   * @returns Whether the object is a date instance.\r\n   */\r\n  abstract isDateInstance(obj: any): boolean;\r\n\r\n  /**\r\n   * Checks whether the given date is valid.\r\n   * @param date The date to check.\r\n   * @returns Whether the date is valid.\r\n   */\r\n  abstract isValid(date: D): boolean;\r\n\r\n  /**\r\n   * Gets date instance that is not valid.\r\n   * @returns An invalid date.\r\n   */\r\n  abstract invalid(): D;\r\n\r\n  /**\r\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\r\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\r\n   * string). The default implementation does not allow any deserialization, it simply checks that\r\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\r\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\r\n   * support passing values from your backend directly to these properties by overriding this method\r\n   * to also deserialize the format used by your backend.\r\n   * @param value The value to be deserialized into a date object.\r\n   * @returns The deserialized date object, either a valid date, null if the value can be\r\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\r\n   */\r\n  deserialize(value: any): D | null {\r\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\r\n      return value;\r\n    }\r\n    return this.invalid();\r\n  }\r\n\r\n  /**\r\n   * Sets the locale used for all dates.\r\n   * @param locale The new locale.\r\n   */\r\n  setLocale(locale: any) {\r\n    this.locale = locale;\r\n    this._localeChanges.next();\r\n  }\r\n\r\n  /**\r\n   * Compares two dates.\r\n   * @param first The first date to compare.\r\n   * @param second The second date to compare.\r\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\r\n   *     a number greater than 0 if the first date is later.\r\n   */\r\n  compareDate(first: D, second: D): number {\r\n    return this.getYear(first) - this.getYear(second) ||\r\n        this.getMonth(first) - this.getMonth(second) ||\r\n        this.getDate(first) - this.getDate(second);\r\n  }\r\n\r\n  /**\r\n   * Checks if two dates are equal.\r\n   * @param first The first date to check.\r\n   * @param second The second date to check.\r\n   * @returns Whether the two dates are equal.\r\n   *     Null dates are considered equal to other null dates.\r\n   */\r\n  sameDate(first: D | null, second: D | null): boolean {\r\n    if (first && second) {\r\n      let firstValid = this.isValid(first);\r\n      let secondValid = this.isValid(second);\r\n      if (firstValid && secondValid) {\r\n        return !this.compareDate(first, second);\r\n      }\r\n      return firstValid == secondValid;\r\n    }\r\n    return first == second;\r\n  }\r\n\r\n  /**\r\n   * Clamp the given date between min and max dates.\r\n   * @param date The date to clamp.\r\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\r\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\r\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\r\n   *     otherwise `date`.\r\n   */\r\n  clampDate(date: D, min?: D | null, max?: D | null): D {\r\n    if (min && this.compareDate(date, min) < 0) {\r\n      return min;\r\n    }\r\n    if (max && this.compareDate(date, max) > 0) {\r\n      return max;\r\n    }\r\n    return date;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {InjectionToken} from '@angular/core';\r\n\r\n\r\nexport type MatDateFormats = {\r\n  parse: {\r\n    dateInput: any\r\n  },\r\n  display: {\r\n    dateInput: any,\r\n    monthYearLabel: any,\r\n    dateA11yLabel: any,\r\n    monthYearA11yLabel: any,\r\n  }\r\n};\r\n\r\n\r\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {MatDateFormats} from './date-formats';\r\n\r\n\r\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\r\n  parse: {\r\n    dateInput: null,\r\n  },\r\n  display: {\r\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\r\n    monthYearLabel: {year: 'numeric', month: 'short'},\r\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\r\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\r\n  }\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {DateAdapter, MAT_DATE_LOCALE_PROVIDER} from './date-adapter';\r\nimport {MAT_DATE_FORMATS} from './date-formats';\r\nimport {NativeDateAdapter} from './native-date-adapter';\r\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\r\n\r\nexport * from './date-adapter';\r\nexport * from './date-formats';\r\nexport * from './native-date-adapter';\r\nexport * from './native-date-formats';\r\n\r\n\r\n@NgModule({\r\n  providers: [\r\n    {provide: DateAdapter, useClass: NativeDateAdapter},\r\n    MAT_DATE_LOCALE_PROVIDER\r\n  ],\r\n})\r\nexport class NativeDateModule {}\r\n\r\n\r\n@NgModule({\r\n  imports: [NativeDateModule],\r\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\r\n})\r\nexport class MatNativeDateModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Injectable} from '@angular/core';\r\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\r\n\r\n/** Error state matcher that matches when a control is invalid and dirty. */\r\n@Injectable()\r\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\r\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\r\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\r\n  }\r\n}\r\n\r\n/** Provider that defines how form controls behave with regards to displaying error messages. */\r\n@Injectable()\r\nexport class ErrorStateMatcher {\r\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\r\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\r\nimport {HammerGestureConfig} from '@angular/platform-browser';\r\nimport {MatCommonModule} from '../common-behaviors/common-module';\r\nimport {\r\n  HammerStatic,\r\n  HammerInstance,\r\n  Recognizer,\r\n  RecognizerStatic,\r\n  HammerOptions,\r\n} from './gesture-annotations';\r\n\r\n/**\r\n * Injection token that can be used to provide options to the Hammerjs instance.\r\n * More info at http://hammerjs.github.io/api/.\r\n */\r\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\r\n\r\n/** Adjusts configuration of our gesture library, Hammer. */\r\n@Injectable()\r\nexport class GestureConfig extends HammerGestureConfig {\r\n  private _hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\r\n\r\n  /** List of new event names to add to the gesture support list */\r\n  events: string[] = this._hammer ? [\r\n    'longpress',\r\n    'slide',\r\n    'slidestart',\r\n    'slideend',\r\n    'slideright',\r\n    'slideleft'\r\n  ] : [];\r\n\r\n  constructor(\r\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\r\n    @Optional() commonModule?: MatCommonModule) {\r\n    super();\r\n    if (commonModule) {\r\n      commonModule._checkHammerIsAvailable();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\r\n   *\r\n   * Our gesture names come from the Material Design gestures spec:\r\n   * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\r\n   *\r\n   * More information on default recognizers can be found in Hammer docs:\r\n   * http://hammerjs.github.io/recognizer-pan/\r\n   * http://hammerjs.github.io/recognizer-press/\r\n   *\r\n   * @param element Element to which to assign the new HammerJS gestures.\r\n   * @returns Newly-created HammerJS instance.\r\n   */\r\n  buildHammer(element: HTMLElement): HammerInstance {\r\n    const mc = new this._hammer(element, this._hammerOptions || undefined);\r\n\r\n    // Default Hammer Recognizers.\r\n    const pan = new this._hammer.Pan();\r\n    const swipe = new this._hammer.Swipe();\r\n    const press = new this._hammer.Press();\r\n\r\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\r\n    // Otherwise the previous `recognizeWith` will be dropped.\r\n    // TODO: Confirm threshold numbers with Material Design UX Team\r\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\r\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\r\n\r\n    // Overwrite the default `pan` event to use the swipe event.\r\n    pan.recognizeWith(swipe);\r\n\r\n    // Add customized gestures to Hammer manager\r\n    mc.add([swipe, press, pan, slide, longpress]);\r\n\r\n    return mc as HammerInstance;\r\n  }\r\n\r\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\r\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\r\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\r\n\r\n    inheritances.push(base);\r\n    inheritances.forEach(item => recognizer.recognizeWith(item));\r\n\r\n    return recognizer;\r\n  }\r\n\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  NgModule,\r\n  Directive,\r\n  ElementRef,\r\n  QueryList,\r\n} from '@angular/core';\r\nimport {MatCommonModule} from '../common-behaviors/common-module';\r\n\r\n\r\n/**\r\n * Shared directive to count lines inside a text area, such as a list item.\r\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\r\n * counted by checking the query list's length.\r\n */\r\n@Directive({\r\n  selector: '[mat-line], [matLine]',\r\n  host: {'class': 'mat-line'}\r\n})\r\nexport class MatLine {}\r\n\r\n/**\r\n * Helper that takes a query list of lines and sets the correct class on the host.\r\n * @docs-private\r\n */\r\nexport class MatLineSetter {\r\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\r\n    this._setLineClass(this._lines.length);\r\n\r\n    this._lines.changes.subscribe(() => {\r\n      this._setLineClass(this._lines.length);\r\n    });\r\n  }\r\n\r\n  private _setLineClass(count: number): void {\r\n    this._resetClasses();\r\n    if (count === 2 || count === 3) {\r\n      this._setClass(`mat-${count}-line`, true);\r\n    } else if (count > 3) {\r\n      this._setClass(`mat-multi-line`, true);\r\n    }\r\n  }\r\n\r\n  private _resetClasses(): void {\r\n    this._setClass('mat-2-line', false);\r\n    this._setClass('mat-3-line', false);\r\n    this._setClass('mat-multi-line', false);\r\n  }\r\n\r\n  private _setClass(className: string, isAdd: boolean): void {\r\n    if (isAdd) {\r\n      this._element.nativeElement.classList.add(className);\r\n    } else {\r\n      this._element.nativeElement.classList.remove(className);\r\n    }\r\n  }\r\n\r\n}\r\n\r\n@NgModule({\r\n  imports: [MatCommonModule],\r\n  exports: [MatLine, MatCommonModule],\r\n  declarations: [MatLine],\r\n})\r\nexport class MatLineModule { }\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\r\n\r\n/** Possible states for a ripple element. */\r\nexport enum RippleState {\r\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\r\n}\r\n\r\n/**\r\n * Reference to a previously launched ripple element.\r\n */\r\nexport class RippleRef {\r\n\r\n  /** Current state of the ripple reference. */\r\n  state: RippleState = RippleState.HIDDEN;\r\n\r\n  constructor(\r\n    private _renderer: RippleRenderer,\r\n    public element: HTMLElement,\r\n    public config: RippleConfig) {\r\n  }\r\n\r\n  /** Fades out the ripple element. */\r\n  fadeOut() {\r\n    this._renderer.fadeOutRipple(this);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {\r\n  Directive,\r\n  ElementRef,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional,\r\n} from '@angular/core';\r\nimport {RippleRef} from './ripple-ref';\r\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\r\n\r\n/** Configurable options for `matRipple`. */\r\nexport interface RippleGlobalOptions {\r\n  /**\r\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\r\n   * the `launch()` method. Therefore focus indicators will still show up.\r\n   */\r\n  disabled?: boolean;\r\n\r\n  /**\r\n   * Configuration for the animation duration of the ripples.\r\n   * There are two phases with different durations for the ripples.\r\n   */\r\n  animation?: RippleAnimationConfig;\r\n\r\n  /**\r\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\r\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\r\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\r\n   * @deprecated Use the `animation` global option instead.\r\n   * @deletion-target 7.0.0\r\n   */\r\n  baseSpeedFactor?: number;\r\n\r\n  /**\r\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\r\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\r\n   */\r\n  terminateOnPointerUp?: boolean;\r\n}\r\n\r\n/** Injection token that can be used to specify the global ripple options. */\r\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\r\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\r\n\r\n@Directive({\r\n  selector: '[mat-ripple], [matRipple]',\r\n  exportAs: 'matRipple',\r\n  host: {\r\n    'class': 'mat-ripple',\r\n    '[class.mat-ripple-unbounded]': 'unbounded'\r\n  }\r\n})\r\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\r\n\r\n  /** Custom color for all ripples. */\r\n  @Input('matRippleColor') color: string;\r\n\r\n  /** Whether the ripples should be visible outside the component's bounds. */\r\n  @Input('matRippleUnbounded') unbounded: boolean;\r\n\r\n  /**\r\n   * Whether the ripple always originates from the center of the host element's bounds, rather\r\n   * than originating from the location of the click event.\r\n   */\r\n  @Input('matRippleCentered') centered: boolean;\r\n\r\n  /**\r\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\r\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\r\n   * bounding rectangle.\r\n   */\r\n  @Input('matRippleRadius') radius: number = 0;\r\n\r\n  /**\r\n   * If set, the normal duration of ripple animations is divided by this value. For example,\r\n   * setting it to 0.5 will cause the animations to take twice as long.\r\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\r\n   * @deprecated Use the [matRippleAnimation] binding instead.\r\n   * @deletion-target 7.0.0\r\n   */\r\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\r\n\r\n  /**\r\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\r\n   * duration of the ripples.\r\n   */\r\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\r\n\r\n  /**\r\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\r\n   * by using the `launch()` method.\r\n   */\r\n  @Input('matRippleDisabled')\r\n  get disabled() { return this._disabled; }\r\n  set disabled(value: boolean) {\r\n    this._disabled = value;\r\n    this._setupTriggerEventsIfEnabled();\r\n  }\r\n  private _disabled: boolean = false;\r\n\r\n  /**\r\n   * The element that triggers the ripple when click events are received.\r\n   * Defaults to the directive's host element.\r\n   */\r\n  @Input('matRippleTrigger')\r\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\r\n  set trigger(trigger: HTMLElement) {\r\n    this._trigger = trigger;\r\n    this._setupTriggerEventsIfEnabled();\r\n  }\r\n  private _trigger: HTMLElement;\r\n\r\n  /** Renderer for the ripple DOM manipulations. */\r\n  private _rippleRenderer: RippleRenderer;\r\n\r\n  /** Options that are set globally for all ripples. */\r\n  private _globalOptions: RippleGlobalOptions;\r\n\r\n  /** Whether ripple directive is initialized and the input bindings are set. */\r\n  private _isInitialized: boolean = false;\r\n\r\n  constructor(private _elementRef: ElementRef,\r\n              ngZone: NgZone,\r\n              platform: Platform,\r\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\r\n\r\n    this._globalOptions = globalOptions || {};\r\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this._isInitialized = true;\r\n    this._setupTriggerEventsIfEnabled();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._rippleRenderer._removeTriggerEvents();\r\n  }\r\n\r\n  /** Fades out all currently showing ripple elements. */\r\n  fadeOutAll() {\r\n    this._rippleRenderer.fadeOutAll();\r\n  }\r\n\r\n  /** Ripple configuration from the directive's input values. */\r\n  get rippleConfig(): RippleConfig {\r\n    return {\r\n      centered: this.centered,\r\n      radius: this.radius,\r\n      color: this.color,\r\n      animation: {...this._globalOptions.animation, ...this.animation},\r\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\r\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\r\n    };\r\n  }\r\n\r\n  /** Whether ripples on pointer-down are disabled or not. */\r\n  get rippleDisabled(): boolean {\r\n    return this.disabled || !!this._globalOptions.disabled;\r\n  }\r\n\r\n  /** Sets up the the trigger event listeners if ripples are enabled. */\r\n  private _setupTriggerEventsIfEnabled() {\r\n    if (!this.disabled && this._isInitialized) {\r\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Launches a manual ripple using the specified ripple configuration.\r\n   * @param config Configuration for the manual ripple.\r\n   */\r\n  launch(config: RippleConfig): RippleRef;\r\n\r\n  /**\r\n   * Launches a manual ripple at the specified coordinates within the element.\r\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\r\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\r\n   * @param config Optional ripple configuration for the manual ripple.\r\n   */\r\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\r\n\r\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\r\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\r\n    if (typeof configOrX === 'number') {\r\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\r\n    } else {\r\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\r\n    }\r\n  }\r\n}\r\n\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {PlatformModule} from '@angular/cdk/platform';\r\nimport {MatCommonModule} from '../common-behaviors/common-module';\r\nimport {MatRipple} from './ripple';\r\n\r\nexport * from './ripple';\r\nexport * from './ripple-ref';\r\nexport * from './ripple-renderer';\r\n\r\n@NgModule({\r\n  imports: [MatCommonModule, PlatformModule],\r\n  exports: [MatRipple, MatCommonModule],\r\n  declarations: [MatRipple],\r\n})\r\nexport class MatRippleModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\r\n\r\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\r\n\r\n/**\r\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\r\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\r\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\r\n * Note that theming is meant to be handled by the parent element, e.g.\r\n * `mat-primary .mat-pseudo-checkbox`.\r\n *\r\n * Note that this component will be completely invisible to screen-reader users. This is *not*\r\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\r\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\r\n * of more complex components that appropriately handle selected / checked state.\r\n * @docs-private\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  selector: 'mat-pseudo-checkbox',\r\n  styleUrls: ['pseudo-checkbox.css'],\r\n  template: '',\r\n  host: {\r\n    'class': 'mat-pseudo-checkbox',\r\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\r\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\r\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\r\n  },\r\n})\r\nexport class MatPseudoCheckbox {\r\n  /** Display state of the checkbox. */\r\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\r\n\r\n  /** Whether the checkbox is disabled. */\r\n  @Input() disabled: boolean = false;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\r\n\r\n\r\n@NgModule({\r\n  exports: [MatPseudoCheckbox],\r\n  declarations: [MatPseudoCheckbox]\r\n})\r\nexport class MatPseudoCheckboxModule { }\r\n\r\n\r\nexport * from './pseudo-checkbox/pseudo-checkbox';\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\r\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\r\n\r\n// Boilerplate for applying mixins to MatOptgroup.\r\n/** @docs-private */\r\nexport class MatOptgroupBase { }\r\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\r\n\r\n// Counter for unique group ids.\r\nlet _uniqueOptgroupIdCounter = 0;\r\n\r\n/**\r\n * Component that is used to group instances of `mat-option`.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-optgroup',\r\n  exportAs: 'matOptgroup',\r\n  templateUrl: 'optgroup.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  inputs: ['disabled'],\r\n  styleUrls: ['optgroup.css'],\r\n  host: {\r\n    'class': 'mat-optgroup',\r\n    'role': 'group',\r\n    '[class.mat-optgroup-disabled]': 'disabled',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n    '[attr.aria-labelledby]': '_labelId',\r\n  }\r\n})\r\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\r\n  /** Label for the option group. */\r\n  @Input() label: string;\r\n\r\n  /** Unique id for the underlying label. */\r\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\r\n}\r\n"],"names":["_this","_dir","_ngZone","_changeDetectorRef","_viewportRuler","_onDestroy","Subject","_disableRipple","tslib_1.__extends","MatTabNav","_super","Object","defineProperty","prototype","this","_backgroundColor","value","nativeElement","_elementRef","classList","remove","backgroundColor","add","coerceBooleanProperty","_setLinkDisableRipple","updateActiveLink","element","_activeLinkChanged","_activeLinkElement","markForCheck","ngAfterContentInit","runOutsideAngular","dirChange","change","observableOf","merge","pipe","takeUntil","subscribe","_alignInkBar","ngAfterContentChecked","ngOnDestroy","next","complete","_inkBar","alignToElement","_tabLinks","forEach","link","disableRipple","type","Component","args","selector","exportAs","inputs","template","styles","host","class","encapsulation","ViewEncapsulation","None","preserveWhitespaces","changeDetection","ChangeDetectionStrategy","OnPush","NgZone","ChangeDetectorRef","ViewportRuler","propDecorators","Input","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","mixinDisableRipple","mixinDisabled","call","_tabNavBar","_tabLinkRipple","setupTriggerEvents","tabIndex","parseInt","globalOptions","rippleConfig","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","get","enumerable","configurable","event","preventDefault","MatTabLink","decorators","Directive","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-disabled]","[class.mat-tab-label-active]","(click)","Platform","undefined","Optional","Inject","MAT_RIPPLE_GLOBAL_OPTIONS","Attribute","MatTabsModule","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","ScrollDispatchModule","exports","MatTabGroup","MatTabLabel","MatTab","declarations","MatInkBar","MatTabLabelWrapper","MatTabBody","MatTabBodyPortal","MatTabHeader","providers","VIEWPORT_RULER_PROVIDER","MatToolbarBase","_MatToolbarMixinBase","mixinColor","MatToolbarRow","MatToolbar","elementRef","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","changes","length","slice","childNodes","filter","node","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","PlatformModule","VERSION","Version","SELECT_PANEL_PADDING_X","MatVerticalStepper","ctorParameters","Directionality","MatStepper","MatStepperNext","[type]","provide","CdkStepper","useExisting","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatStepperModule","MatButtonModule","CdkStepperModule","MatIconModule","A11yModule","MatHorizontalStepper","MatStep","MatStepLabel","MatStepHeader","MatStepperIcon","MatStepperIntl","ErrorStateMatcher","MatTable","CDK_TABLE_TEMPLATE","CdkTable","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatColumnDef","CdkColumnDef","name","MatHeaderCell","columnDef","cssClassFriendlyName","role","ElementRef","CdkHeaderCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","apply","arguments","MatRow","MatTableModule","CdkTableModule","MatTableDataSource","initialData","_renderData","BehaviorSubject","_filter","sortingDataAccessor","data","sortHeaderId","_isNumberValue","Number","sortData","sort","active","direction","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_data","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","empty","pageChange","page","_renderChangesSubscription","unsubscribe","combineLatest","map","_a","_filterData","startWith","_orderData","_pageData","filteredData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","Promise","resolve","then","lastPageIndex","Math","ceil","min","connect","disconnect","DataSource","show","requestAnimationFrame","_setStyles","style","visibility","hide","inkBar","left","offsetLeft","width","offsetWidth","templateRef","viewContainerRef","TemplateRef","ViewContainerRef","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","_labelChange","_disableChange","position","origin","isActive","ngOnChanges","hasOwnProperty","ngOnInit","TemplatePortal","_content","matTabsAnimations","translateTab","trigger","state","transform","transition","animate","_componentFactoryResolver","_host","_isCenterPosition","_position","attach","_centeringSub","_beforeCentering","isCentering","hasAttached","_leavingSub","_afterLeavingCenter","detach","closed","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","_onCentering","EventEmitter","_onCentered","_getLayoutDirection","dir","_origin","_onTranslateTabStarted","e","toState","emit","clientHeight","_onTranslateTabComplete","fromState","animations","Output","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","Subscription","EMPTY","_tabLabelSubscription","_dynamicHeight","_selectedIndex","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","selectChange","_groupId","coerceNumberProperty","indexToSelect","_tabs","max","tabChangeEvent","_createChangeEvent","tab","index","_subscribeToTabLabels","_focusChanged","toArray","concat","_getTabLabelId","i","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","disabled","selectedIndex","focusIndex","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","_dynamicHeightDeprecated","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","focus","getOffsetLeft","getOffsetWidth","MatTabHeaderBase","_MatTabHeaderMixinBase","_focusIndex","_scrollDistance","_selectedIndexChanged","_realignInkBar","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","selectFocusedIndex","indexFocused","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","keyCode","RIGHT_ARROW","_focusNextTab","LEFT_ARROW","_focusPreviousTab","HOME","_focusFirstTab","END","_focusLastTab","ENTER","SPACE","resize","realign","_onContentChanges","_checkPaginationEnabled","_isValidIndex","_setTabFocus","containerEl","_tabListContainer","scrollLeft","scrollWidth","_moveFocus","offset","tabs","scrollDistance","translateX","_tabList","v","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewChild","MatTabNavBase","_MatTabNavMixinBase","dismissedByAction","_dismissedByAction","_afterDismissed","MatSnackBarRef","afterDismissed","asObservable","afterOpened","containerInstance","_onEnter","onAction","_onAction","MAT_SNACK_BAR_DATA","InjectionToken","MatSnackBarConfig","politeness","announcementMessage","duration","horizontalPosition","verticalPosition","SHOW_ANIMATION","AnimationDurations","ENTERING","AnimationCurves","DECELERATION_CURVE","HIDE_ANIMATION","EXITING","ACCELERATION_CURVE","matSnackBarAnimations","contentFade","opacity","COMPLEX","STANDARD_CURVE","snackBarState","SimpleSnackBar","snackBarRef","action","dismissWithAction","[@contentFade]","MatSnackBarContainer","_destroyed","_onExit","_animationState","attachComponentPortal","portal","_portalOutlet","Error","snackBarConfig","panelClass","extraClasses","_setCssClasses","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","detectChanges","exit","onMicrotaskEmpty","take","Array","isArray","cssClass","[@state]","(@state.done)","BasePortalOutlet","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_config","_applyConfigDefaults","_attach","dismiss","_dismissAfter","announce","open","message","_attachSnackBarContainer","overlayRef","containerPortal","ComponentPortal","containerRef","instance","_createOverlay","container","injector","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","userInjector","injectionTokens","WeakMap","set","PortalInjector","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","MatSnackBarModule","OverlayModule","LayoutModule","entryComponents","LIVE_ANNOUNCER_PROVIDER","MatSortBase","_MatSortMixinBase","sortables","Map","_stateChanges","start","_direction","MatSort","getSortInvalidDirectionError","_disableClear","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","deregister","delete","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","sortButtonLabel","sortDescriptionLabel","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","SORT_ANIMATION_TRANSITION","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","keyframes","allowChildren","query","animateChild","optional","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","changeDetectorRef","_cdkColumnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","(mouseenter)","(longpress)","(mouseleave)","[class.mat-sort-header-disabled]","MatSortModule","CdkStepLabel","optionalLabel","_focusMonitor","_element","monitor","_intlSubscription","_index","_selected","_active","_optional","stopMonitoring","_stringLabel","label","_templateLabel","_getHostElement","iconOverrides","selected","matStepperAnimations","horizontalStepTransition","verticalStepTransition","_MatStep","CdkStep","_MatStepper","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","icons","_icons","editOverride","find","icon","doneOverride","_iconOverrides","_steps","_stateChanged","ContentChildren","aria-orientation","MatSidenavContainer","_drawers","MatSidenav","ContentChild","MatSidenavContent","MatDrawerContainer","MatSidenavModule","MatDrawer","MatDrawerContent","MAT_DRAWER_DEFAULT_AUTOSIZE","useValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","onChange","_","onTouched","_uniqueId","_required","_checked","labelPosition","ariaLabel","ariaLabelledby","_slideRenderer","SlideToggleRenderer","_inputElement","focusOrigin","_onInputFocusChange","_onChangeEvent","stopPropagation","dragging","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusVia","toggle","_focusRipple","fadeOut","_ripple","launch","persistent","_onDragStart","startThumbDrag","_onDrag","updateThumbPosition","deltaX","_onDragEnd","newCheckedValue","dragPercentage","setTimeout","stopThumbDrag","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","FocusMonitor","required","MatRipple","_thumbBarEl","querySelector","_thumbBarWidth","clientWidth","_thumbEl","_previousChecked","dragX","percentage","MatSlideToggleModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MAT_SLIDER_VALUE_ACCESSOR","MatSlider","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","input","_percent","_isSliding","_isActive","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_dirChangeSubscription","_calculatePercentage","_roundLabelTo","toString","split","pop","tickInterval","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","vertical","invert","percent","_isMinValue","thumbLabel","axis","_invertMouseCoords","_thumbGap","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","UP_ARROW","DOWN_ARROW","_onKeyup","numSteps","step","pos","size","posComponent","exactValue","_calculateValue","closestValue","round","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","_sliderWrapper","getBoundingClientRect","(focus)","(blur)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","_thumbLabelDeprecated","_tickIntervalDeprecated","MatSliderModule","BidiModule","_overlayRef","_afterOpened","_finishDismiss","clearTimeout","_durationTimeoutId","closeWithAction","_open","dispose","mode","[style.width.px]","[style.height.px]","MatSpinner","MatProgressSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","align","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","_isRippleDisabled","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","UNIQUE_SELECTION_DISPATCHER_PROVIDER","matDrawerAnimations","transformDrawer","MatDrawerToggleResult","animationFinished","_container","_margins","_contentMargins","margins","[style.margin-left.px]","[style.margin-right.px]","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","openedChange","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","onAlignChanged","onPositionChanged","_modeChanged","HTMLElement","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","_openedStream","openedStart","_closedStream","closedStart","onOpen","onClose","backdropClick","_doCheckSubject","_autosize","defaultAutosize","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","_isShowingBackdrop","_width","autosize","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","MAT_TOOLTIP_DEFAULT_OPTIONS","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","showDelay","hideDelay","_message","_manualListeners","IOS","nodeName","webkitUserSelect","userSelect","listener","addEventListener","_tooltipInstance","_disposeTooltip","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_createTooltip","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","TooltipComponent","afterHidden","_getOrigin","overlay","_getOverlayPosition","strategy","connectedTo","main","withFallbackPosition","fallback","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","onPositionChange","scrollableViewProperties","isOverlayClipped","_setTransformOrigin","connectionPair","scrollStrategy","isDirectionLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","isLtr","overlayX","overlayY","updatePosition","tooltipClass","(touchend)","ScrollDispatcher","AriaDescriber","MAT_TOOLTIP_SCROLL_STRATEGY","_positionDeprecated","_visibility","_closeOnInteraction","_transformOrigin","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","overlayPosition","_animationStart","_animationDone","_handleBodyInteraction","matTooltipAnimations","tooltipState","aria-hidden","ɵ0","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER","ARIA_DESCRIBER_PROVIDER","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","floor","pageSizeOptions","_displayedPageSizeOptions","push","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatSelectModule","MatProgressBarBase","_MatProgressBarMixinBase","progressbarId","MatProgressBar","_bufferValue","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","[attr.mode]","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","INDETERMINATE_ANIMATION_TEMPLATE","platform","_fallbackAnimation","_elementSize","_diameter","EDGE","TRIDENT","animationClass","diameters","_attachStyleNode","_updateElementSize","_strokeWidth","diameter","viewBox","_circleRadius","strokeWidth","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_DEFAULT_OPTIONS","MatMenu","items","MatMenuItem","lazyContent","MatMenuContent","overlapTrigger","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY","MatMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_hovered","openMenu","_cleanUpSubscriptions","toggleMenu","closeMenu","_portal","menuData","_menuClosingActions","_initMenu","_startAnimation","menuOpen","_resetMenu","_resetAnimation","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","_getPosition","hasBackdrop","backdropClass","posX","posY","setPositionClasses","xPosition","originFallbackX","_b","yPosition","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","withDirection","withOffsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","aria-haspopup","(mousedown)","Self","_deprecatedMatMenuTriggerFor","MatMenuModule","matSelectAnimations","transformPanel","minWidth","fadeInContent","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","MatSelectTrigger","MatSelect","_parentFormField","_scrollStrategyFactory","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_offsetY","_positions","focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","selectionChange","valueChange","valueAccessor","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","o","SelectionModel","multiple","_initKeyManager","_resetOptions","updateErrorState","panelOpen","_triggerRect","getComputedStyle","_keyManager","withHorizontalOrientation","_calculateOverlayPosition","_highlightCorrectOption","overlayDir","fontSize","_isRtl","_setSelectionByValue","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","onKeydown","manager","setFirstItemActive","setLastItemActive","activeItem","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onPanelDone","offsetX","_onFadeInDone","_onAttached","positionChange","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","isEmpty","isUserInput","getMatSelectNonArrayValueError","_clearSelection","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","error","console","warn","select","skip","deselect","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","_setOptionIds","wasSelected","isSelected","_getOptionIndex","_propagateChanges","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getItemHeight","result","current","itemHeight","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","placeholder","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","first","group","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","compareWith","errorStateMatcher","MatOptionModule","MatFormFieldModule","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY","focusedOption","focusedIndex","_emitDeprecatedChangeEvent","MatSelectionList","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatListOption","_MatSelectionListMixinBase","MatListModule","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatMenuItemBase","_MatMenuItemMixinBase","_checkDisabled","_emitHoverEvent","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","_template","_appRef","context","isAttached","_outlet","DomPortalOutlet","insertBefore","outletElement","ApplicationRef","_xPosition","_yPosition","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","className","FocusKeyManager","withWrap","item","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","_previousElevation","_onAnimationDone","_navList","_isNavList","_handleFocus","_handleBlur","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","_MatListItemMixinBase","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatListOptionChange","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","MatLineSetter","_lines","_removeOptionFromList","_text","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","added","removed","optionIndex","setNextItemActive","_toggleSelectOnFocusedOption","_getSelectedOptionValues","values","_getOptionByValue","Boolean","MatIconRegistry","addSvgIconInNamespace","namespace","iconName","url","iconKey","_svgIconConfigs","SvgIconConfig","addSvgIconSet","addSvgIconSetInNamespace","configNamespace","_iconSetConfigs","registerFontClassAlias","alias","_fontCssClassesByAlias","classNameForFontAlias","setDefaultFontSetClass","_defaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","_sanitizer","sanitize","SecurityContext","RESOURCE_URL","getMatIconFailedToSanitizeError","cachedIcon","_cachedIconsByUrl","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","svgElement","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","log","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","_createSvgElementForSingleIcon","_svgElementFromString","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","getAttribute","setAttribute","_httpClient","getMatIconNoHttpProviderError","inProgressFetch","_inProgressUrlFetches","req","responseType","finalize","share","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","MatListBase","_MatListMixinBase","MatListItemBase","MAT_DATEPICKER_SCROLL_STRATEGY","DateAdapter","MatDatepicker","startAt","startView","selectedChanged","openedStream","closedStream","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","target","targetElement","_dateAdapter","_dateFormats","_formField","dateChange","dateInput","_valueChange","_disabledChange","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","createMissingDateImplError","localeChanges","registerDatepicker","_datepicker","_registerInput","isValid","oldDate","format","display","sameDate","registerOnValidatorChange","validate","getPopupConnectionElementRef","underlineRef","_getPopupFallbackOffset","_inputContainerRef","_onInput","date","parse","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","datepicker","_watchStateChanges","datepickerDisabled","inputDisabled","_datepickerInput","datepickerToggled","[class.mat-datepicker-toggle-active]","_customIcon","MatDatepickerModule","MatDialogModule","MatCalendar","MatCalendarBody","MatDatepickerContent","MatMonthView","MatYearView","MatMultiYearView","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER","MatDivider","_inset","[class.mat-divider-vertical]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","MatExpansionPanelContent","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_inputChanges","_headerId","_getHideToggle","_hasSpacing","expanded","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[attr.aria-expanded]","[@expansionHeight]","MatExpansionModule","CdkAccordionModule","MatExpansionPanelTitle","MatExpansionPanelDescription","MatGridTile","_rowspan","_colspan","coerceToNumber","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","positions","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","parseFloat","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","addSvgIcon","_maxDate","_init","_dateSelected","_selectedDate","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","selectedChange","_userSelection","_getDateInCurrentMonth","_todayDate","today","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","getFirstDayOfWeek","_createWeekCells","daysInMonth","getNumDaysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","MatCalendarCell","dateFilter","minDate","maxDate","_hasSameMonthAndYear","getDate","d1","d2","_activeDate","oldActiveDate","_selectedYear","_minDate","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","addCalendarDays","_selectedMonth","_getMonthInCurrentYear","_monthSelected","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","_startAt","_clampedActiveDate","clampDate","_currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","_focusActiveCell","firstChange","view","monthView","yearView","multiYearView","_userSelected","_goToDateInView","_currentPeriodClicked","_previousClicked","addCalendarMonths","addCalendarYears","_nextClicked","_previousEnabled","_isSameView","_nextEnabled","_handleCalendarBodyKeydown","_handleCalendarBodyKeydownInMonthView","_handleCalendarBodyKeydownInYearView","_handleCalendarBodyKeydownInMultiYearView","date1","date2","yearsPerPage","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY","_calendar","[class.mat-datepicker-content-touch]","_inputSubscription","_popupRef","_focusedElementBeforeOpen","activeElement","touchUi","_openAsDialog","_openAsPopup","_dialogRef","_calendarPortal","completeClose","afterClosed","componentInstance","_createPopup","keydownEvents","fallbackOffset","MatDialog","_updateKeyManager","chip","[attr.role]","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatChipList","ariaOrientation","selectable","chips","MatChip","_MatChipListMixinBase","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","_blur","addOnBlur","_focus","chipList","MatChipsModule","MatChipRemove","MatBasicChip","MatDialogConfig","disableClose","maxWidth","ariaDescribedBy","autoFocus","closeOnNavigation","matDialogAnimations","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","focusInitialElementWhenReady","toFocus","_onAnimationStart","_startExitAnimation","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogRef","_containerInstance","location","_afterOpen","_afterClosed","_beforeClose","_locationChanges","_result","dialogResult","detachBackdrop","afterOpen","beforeClose","_getPositionStrategy","centerVertically","updateSize","getConfig","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","minHeight","maxHeight","$implicit","previousValue","removeAttribute","overlayContainer","getContainerElement","parentElement","siblings","children","sibling","hasAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","MatTextareaAutosize","_minRows","_setMinHeight","_maxRows","_setMaxHeight","minRows","_cachedLineHeight","_setTextareaStyle","maxRows","resizeToFitContent","fromEvent","window","auditTime","_cacheTextareaLineHeight","textarea","textareaClone","rows","border","padding","overflow","force","_previousValue","placeholderText","scrollHeight","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_isServer","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[placeholder]","[required]","[readonly]","MatInputModule","calendarLabel","openCalendarLabel","displayValue","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","_isActiveCell","cellNumber","_firstRowOffset","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","firstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","MatCardHeader","MatCardTitleGroup","MatCardModule","MatCard","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MAT_CHECKBOX_CLICK_ACTION","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","_removeFocusRipple","ripple","_onInteractionEvent","animSuffix","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","_selectable","_removable","destroyed","onRemove","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","_parentChip","MatChipListBase","MatChipListChange","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","_chipInput","_changeSubscription","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_chipRemoveSubscription","_dropSubscriptions","inputElement","_focusInput","_isInputEmpty","chipIndex","chipsArray","newFocusIndex","focusChip","correspondingChip","correspondingChipIndex","updateActiveItemIndex","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","chipBlurChanges","chipRemoveChanges","readOnly","autocomplete","aria-autocomplete","(focusin)","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","Host","MatAutocompleteTrigger","MatAutocompleteModule","MatAutocomplete","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER","DEFAULT_ROUND_BUTTON_COLOR","DEFAULT_FLAT_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","MatButton","_isRoundButton","_hasHostAttributes","_isIconButton","BUTTON_HOST_ATTRIBUTES_1","attr","attributes","attribute","focusMonitor","stopImmediatePropagation","MatAnchor","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","_uniqueIdCounter","MatButtonToggleChange","_updateButtonToggleNames","_updateSelectedButtonToggleFromValue","_buttonToggles","matchingButtonToggle","buttonToggle","_markButtonTogglesForCheck","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleGroupMultiple","toggleGroup","toggleGroupMultiple","_buttonToggleDispatcher","_isSingleSelector","buttonToggleGroup","buttonToggleGroupMultiple","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","[class.mat-card-actions-align-end]","_parent","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","ngAfterViewChecked","_mostRecentViewValue","MatOptionSelectionChange","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","floatLabel","float","_hideRequiredMarker","_floatLabel","_processHints","_validateControlChild","_control","_validatePlaceholders","_syncDescribedByIds","valueChanges","_hintChildren","_errorChildren","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","shouldPlaceholderFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","_animateAndLockLabel","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","[class.mat-input-invalid]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","[class.iap-form-field]","floatPlaceholder","_connectionContainerRef","_prefixChildren","_suffixChildren","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","defaults","showPanel","_isOpen","displayWith","optionSelected","_autoActiveFirstOption","autoActiveFirstOption","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY","_zone","_componentDestroyed","_manuallyFloatingLabel","_closeKeyEventStream","optionSelections","_destroyPanel","openPanel","_attachOverlay","closePanel","_resetLabel","_closingActionsSubscription","_outsideClickStream","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","shouldAnimate","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","recalculateLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","_getHostWidth","_getConnectedElement","__extends","d","__","constructor","extendStatics","base","class_1","defaultColor","_color","colorPalette","defaultTabIndex","matcher","mixinInitialized","_pendingSubscribers","initialized","Observable","subscriber","_notifySubscriber","_markInitialized","range","valueFunction","valuesArray","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","rect","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","currentScrollPosition","optionHeight","scrollStrategies","reposition","block","defaultOptions","tslib_1.__assign","provider","exp","match","parentRegistry","httpClient","sanitizer","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","body","computedStyle","_checkHammerIsAvailable","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","LOCALE_ID","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","isIE","test","navigator","userAgent","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","_hammerOptions","commonModule","_hammer","Hammer","events","buildHammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","RippleRenderer","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","VISIBLE","FADING_IN","_containerElement","containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","runTimeoutOutsideZone","rippleEl","FADING_OUT","fadeOutAll","_triggerElement","_removeTriggerEvents","ngZone","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","configOrX","[class.mat-ripple-unbounded]","unbounded","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatPseudoCheckbox","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","_labelId","[class.mat-optgroup-disabled]"],"mappings":"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"}
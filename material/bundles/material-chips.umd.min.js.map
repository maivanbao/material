{"version":3,"file":"material-chips.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FocusableOption} from '@angular/cdk/a11y';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\r\nimport {\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnDestroy,\r\n  Output,\r\n} from '@angular/core';\r\nimport {CanColor, CanDisable, mixinColor, mixinDisabled} from '@angular/material/core';\r\nimport {Subject} from 'rxjs/Subject';\r\n\r\n\r\n/** Represents an event fired on an individual `mat-chip`. */\r\nexport interface MatChipEvent {\r\n  /** The chip the event was fired on. */\r\n  chip: MatChip;\r\n}\r\n\r\n/** Event object emitted by MatChip when selected or deselected. */\r\nexport class MatChipSelectionChange {\r\n  constructor(\r\n    /** Reference to the chip that emitted the event. */\r\n    public source: MatChip,\r\n    /** Whether the chip that emitted the event is selected. */\r\n    public selected: boolean,\r\n    /** Whether the selection change was a result of a user interaction. */\r\n    public isUserInput = false) { }\r\n}\r\n\r\n\r\n// Boilerplate for applying mixins to MatChip.\r\n/** @docs-private */\r\nexport class MatChipBase {\r\n  constructor(public _elementRef: ElementRef) {}\r\n}\r\n\r\nexport const _MatChipMixinBase = mixinColor(mixinDisabled(MatChipBase), 'primary');\r\n\r\n\r\n/**\r\n * Dummy directive to add CSS class to basic chips.\r\n * @docs-private\r\n */\r\n@Directive({\r\n  selector: `mat-basic-chip, [mat-basic-chip]`,\r\n  host: {'class': 'mat-basic-chip'},\r\n})\r\nexport class MatBasicChip {\r\n}\r\n\r\n/**\r\n * Material design styled Chip component. Used inside the MatChipList component.\r\n */\r\n@Directive({\r\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\r\n  inputs: ['color', 'disabled'],\r\n  exportAs: 'matChip',\r\n  host: {\r\n    'class': 'mat-chip',\r\n    '[attr.tabindex]': 'disabled ? null : -1',\r\n    'role': 'option',\r\n    '[class.mat-chip-selected]': 'selected',\r\n    '[attr.disabled]': 'disabled || null',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n    '[attr.aria-selected]': 'ariaSelected',\r\n    '(click)': '_handleClick($event)',\r\n    '(keydown)': '_handleKeydown($event)',\r\n    '(focus)': '_hasFocus = true',\r\n    '(blur)': '_blur()',\r\n  },\r\n\r\n})\r\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\r\n    CanDisable {\r\n  /** Whether the chip has focus. */\r\n  _hasFocus: boolean = false;\r\n\r\n  /** Whether the chip is selected. */\r\n  @Input()\r\n  get selected(): boolean { return this._selected; }\r\n  set selected(value: boolean) {\r\n    this._selected = coerceBooleanProperty(value);\r\n    this.selectionChange.emit({\r\n      source: this,\r\n      isUserInput: false,\r\n      selected: value\r\n    });\r\n  }\r\n  protected _selected: boolean = false;\r\n\r\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\r\n  @Input()\r\n  get value(): any {\r\n    return this._value != undefined\r\n      ? this._value\r\n      : this._elementRef.nativeElement.textContent;\r\n  }\r\n  set value(value: any) { this._value = value; }\r\n  protected _value: any;\r\n\r\n  /**\r\n   * Whether or not the chips are selectable. When a chip is not selectable,\r\n   * changes to it's selected state are always ignored.\r\n   */\r\n  @Input()\r\n  get selectable(): boolean { return this._selectable; }\r\n  set selectable(value: boolean) {\r\n    this._selectable = coerceBooleanProperty(value);\r\n  }\r\n  protected _selectable: boolean = true;\r\n\r\n  /**\r\n   * Determines whether or not the chip displays the remove styling and emits (remove) events.\r\n   */\r\n  @Input()\r\n  get removable(): boolean { return this._removable; }\r\n  set removable(value: boolean) {\r\n    this._removable = coerceBooleanProperty(value);\r\n  }\r\n  protected _removable: boolean = true;\r\n\r\n  /** Emits when the chip is focused. */\r\n  readonly _onFocus = new Subject<MatChipEvent>();\r\n\r\n  /** Emits when the chip is blured. */\r\n  readonly _onBlur = new Subject<MatChipEvent>();\r\n\r\n  /** Emitted when the chip is selected or deselected. */\r\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\r\n      new EventEmitter<MatChipSelectionChange>();\r\n\r\n  /** Emitted when the chip is destroyed. */\r\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\r\n\r\n  /**\r\n   * Emitted when the chip is destroyed.\r\n   * @deprecated Use 'destroyed' instead.\r\n   * @deletion-target 6.0.0\r\n   */\r\n  @Output() readonly destroy: EventEmitter<MatChipEvent> = this.destroyed;\r\n\r\n  /** Emitted when a chip is to be removed. */\r\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\r\n\r\n  /**\r\n   * Emitted when a chip is to be removed.\r\n   * @deprecated Use `removed` instead.\r\n   * @deletion-target 6.0.0\r\n   */\r\n  @Output('remove') onRemove: EventEmitter<MatChipEvent> = this.removed;\r\n\r\n  /** The ARIA selected applied to the chip. */\r\n  get ariaSelected(): string | null {\r\n    return this.selectable ? this.selected.toString() : null;\r\n  }\r\n\r\n  constructor(public _elementRef: ElementRef) {\r\n    super(_elementRef);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.destroyed.emit({chip: this});\r\n  }\r\n\r\n  /** Selects the chip. */\r\n  select(): void {\r\n    this._selected = true;\r\n    this.selectionChange.emit({\r\n      source: this,\r\n      isUserInput: false,\r\n      selected: true\r\n    });\r\n  }\r\n\r\n  /** Deselects the chip. */\r\n  deselect(): void {\r\n    this._selected = false;\r\n    this.selectionChange.emit({\r\n      source: this,\r\n      isUserInput: false,\r\n      selected: false\r\n    });\r\n  }\r\n\r\n  /** Select this chip and emit selected event */\r\n  selectViaInteraction(): void {\r\n    this._selected = true;\r\n    // Emit select event when selected changes.\r\n    this.selectionChange.emit({\r\n      source: this,\r\n      isUserInput: true,\r\n      selected: true\r\n    });\r\n  }\r\n\r\n  /** Toggles the current selected state of this chip. */\r\n  toggleSelected(isUserInput: boolean = false): boolean {\r\n    this._selected = !this.selected;\r\n\r\n    this.selectionChange.emit({\r\n      source: this,\r\n      isUserInput,\r\n      selected: this._selected\r\n    });\r\n\r\n    return this.selected;\r\n  }\r\n\r\n  /** Allows for programmatic focusing of the chip. */\r\n  focus(): void {\r\n    this._elementRef.nativeElement.focus();\r\n    this._onFocus.next({chip: this});\r\n  }\r\n\r\n  /**\r\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\r\n   * BACKSPACE keys are pressed.\r\n   *\r\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\r\n   */\r\n  remove(): void {\r\n    if (this.removable) {\r\n      this.removed.emit({chip: this});\r\n    }\r\n  }\r\n\r\n  /** Ensures events fire properly upon click. */\r\n  _handleClick(event: Event) {\r\n    // Check disabled\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n\r\n    this.focus();\r\n  }\r\n\r\n  /** Handle custom key presses. */\r\n  _handleKeydown(event: KeyboardEvent): void {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n\r\n    switch (event.keyCode) {\r\n      case DELETE:\r\n      case BACKSPACE:\r\n        // If we are removable, remove the focused chip\r\n        this.remove();\r\n        // Always prevent so page navigation does not occur\r\n        event.preventDefault();\r\n        break;\r\n      case SPACE:\r\n        // If we are selectable, toggle the focused chip\r\n        if (this.selectable) {\r\n          this.toggleSelected(true);\r\n        }\r\n\r\n        // Always prevent space from scrolling the page since the list has focus\r\n        event.preventDefault();\r\n        break;\r\n    }\r\n  }\r\n\r\n  _blur(): void {\r\n    this._hasFocus = false;\r\n    this._onBlur.next({chip: this});\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\r\n * available at https://material.io/icons/#ic_cancel.\r\n *\r\n * Example:\r\n *\r\n *     `<mat-chip>\r\n *       <mat-icon matChipRemove>cancel</mat-icon>\r\n *     </mat-chip>`\r\n *\r\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\r\n * styles to properly center the icon within the chip.\r\n */\r\n@Directive({\r\n  selector: '[matChipRemove]',\r\n  host: {\r\n    'class': 'mat-chip-remove',\r\n    '(click)': '_handleClick()',\r\n  }\r\n})\r\nexport class MatChipRemove {\r\n  constructor(protected _parentChip: MatChip) {\r\n  }\r\n\r\n  /** Calls the parent chip's public `remove()` method if applicable. */\r\n  _handleClick(): void {\r\n    if (this._parentChip.removable) {\r\n      this._parentChip.remove();\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FocusKeyManager} from '@angular/cdk/a11y';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {SelectionModel} from '@angular/cdk/collections';\r\nimport {BACKSPACE} from '@angular/cdk/keycodes';\r\nimport {startWith} from 'rxjs/operators/startWith';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChildren,\r\n  DoCheck,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  Self,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {\r\n  ControlValueAccessor,\r\n  FormGroupDirective,\r\n  NgControl,\r\n  NgForm\r\n} from '@angular/forms';\r\nimport {ErrorStateMatcher, mixinErrorState, CanUpdateErrorState} from '@angular/material/core';\r\nimport {MatFormFieldControl} from '@angular/material/form-field';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {merge} from 'rxjs/observable/merge';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\r\nimport {MatChipInput} from './chip-input';\r\n\r\n// Boilerplate for applying mixins to MatChipList.\r\n/** @docs-private */\r\nexport class MatChipListBase {\r\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\r\n              public _parentForm: NgForm,\r\n              public _parentFormGroup: FormGroupDirective,\r\n              /** @docs-private */\r\n              public ngControl: NgControl) {}\r\n}\r\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\r\n\r\n\r\n// Increasing integer for generating unique ids for chip-list components.\r\nlet nextUniqueId = 0;\r\n\r\n/** Change event object that is emitted when the chip list value has changed. */\r\nexport class MatChipListChange {\r\n  constructor(\r\n    /** Chip list that emitted the event. */\r\n    public source: MatChipList,\r\n    /** Value of the chip list when the event was emitted. */\r\n    public value: any) { }\r\n}\r\n\r\n\r\n/**\r\n * A material design chips component (named ChipList for it's similarity to the List component).\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-chip-list',\r\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\r\n  exportAs: 'matChipList',\r\n  host: {\r\n    '[attr.tabindex]': '_tabIndex',\r\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\r\n    '[attr.aria-required]': 'required.toString()',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n    '[attr.aria-invalid]': 'errorState',\r\n    '[attr.aria-multiselectable]': 'multiple',\r\n    '[attr.role]': 'role',\r\n    '[class.mat-chip-list-disabled]': 'disabled',\r\n    '[class.mat-chip-list-invalid]': 'errorState',\r\n    '[class.mat-chip-list-required]': 'required',\r\n    '[attr.aria-orientation]': 'ariaOrientation',\r\n    'class': 'mat-chip-list',\r\n    '(focus)': 'focus()',\r\n    '(blur)': '_blur()',\r\n    '(keydown)': '_keydown($event)'\r\n  },\r\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\r\n  styleUrls: ['chips.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\r\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  readonly controlType: string = 'mat-chip-list';\r\n\r\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\r\n  protected _lastDestroyedIndex: number|null = null;\r\n\r\n  /** Track which chips we're listening to for focus/destruction. */\r\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\r\n\r\n  /** Subscription to tabbing out from the chip list. */\r\n  private _tabOutSubscription = Subscription.EMPTY;\r\n\r\n  /** Subscription to changes in the chip list. */\r\n  private _changeSubscription: Subscription;\r\n\r\n  /** Subscription to focus changes in the chips. */\r\n  private _chipFocusSubscription: Subscription | null;\r\n\r\n  /** Subscription to blur changes in the chips. */\r\n  private _chipBlurSubscription: Subscription | null;\r\n\r\n  /** Subscription to selection changes in chips. */\r\n  private _chipSelectionSubscription: Subscription | null;\r\n\r\n  /** Subscription to remove changes in chips. */\r\n  private _chipRemoveSubscription: Subscription | null;\r\n\r\n  /** The chip input to add more chips */\r\n  protected _chipInput: MatChipInput;\r\n\r\n  /** Uid of the chip list */\r\n  protected _uid: string = `mat-chip-list-${nextUniqueId++}`;\r\n\r\n  /** The aria-describedby attribute on the chip list for improved a11y. */\r\n  _ariaDescribedby: string;\r\n\r\n  /** Tab index for the chip list. */\r\n  _tabIndex = 0;\r\n\r\n  /**\r\n   * User defined tab index.\r\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\r\n   */\r\n  _userTabIndex: number | null = null;\r\n\r\n  /** The FocusKeyManager which handles focus. */\r\n  _keyManager: FocusKeyManager<MatChip>;\r\n\r\n  /** Function when touched */\r\n  _onTouched = () => {};\r\n\r\n  /** Function when changed */\r\n  _onChange: (value: any) => void = () => {};\r\n\r\n  _selectionModel: SelectionModel<MatChip>;\r\n\r\n  /** The array of selected chips inside chip list. */\r\n  get selected(): MatChip[] | MatChip {\r\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\r\n  }\r\n\r\n  /** The ARIA role applied to the chip list. */\r\n  get role(): string | null { return this.empty ? null : 'listbox'; }\r\n\r\n  /** An object used to control when error messages are shown. */\r\n  @Input() errorStateMatcher: ErrorStateMatcher;\r\n\r\n  /** Whether the user should be allowed to select multiple chips. */\r\n  @Input()\r\n  get multiple(): boolean { return this._multiple; }\r\n  set multiple(value: boolean) {\r\n    this._multiple = coerceBooleanProperty(value);\r\n  }\r\n  private _multiple: boolean = false;\r\n\r\n  /**\r\n   * A function to compare the option values with the selected values. The first argument\r\n   * is a value from an option. The second is a value from the selection. A boolean\r\n   * should be returned.\r\n   */\r\n  @Input()\r\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\r\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\r\n    this._compareWith = fn;\r\n    if (this._selectionModel) {\r\n      // A different comparator means the selection could change.\r\n      this._initializeSelection();\r\n    }\r\n  }\r\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  @Input()\r\n  get value(): any { return this._value; }\r\n  set value(value: any) {\r\n    this.writeValue(value);\r\n    this._value = value;\r\n  }\r\n  protected _value: any;\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  @Input()\r\n  get id(): string { return this._id || this._uid; }\r\n  set id(value: string) {\r\n    this._id = value;\r\n    this.stateChanges.next();\r\n  }\r\n  protected _id: string;\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  @Input()\r\n  get required(): boolean { return this._required; }\r\n  set required(value: boolean) {\r\n    this._required = coerceBooleanProperty(value);\r\n    this.stateChanges.next();\r\n  }\r\n  protected _required: boolean = false;\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  @Input()\r\n  get placeholder(): string {\r\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\r\n  }\r\n  set placeholder(value: string) {\r\n    this._placeholder = value;\r\n    this.stateChanges.next();\r\n  }\r\n  protected _placeholder: string;\r\n\r\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\r\n  get focused(): boolean {\r\n    return this.chips.some(chip => chip._hasFocus) ||\r\n      (this._chipInput && this._chipInput.focused);\r\n  }\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  get empty(): boolean {\r\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\r\n  }\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  @Input()\r\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\r\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\r\n  protected _disabled: boolean = false;\r\n\r\n  /** Orientation of the chip list. */\r\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\r\n\r\n  /**\r\n   * Whether or not this chip is selectable. When a chip is not selectable,\r\n   * its selected state is always ignored.\r\n   */\r\n  @Input()\r\n  get selectable(): boolean { return this._selectable; }\r\n  set selectable(value: boolean) { this._selectable = coerceBooleanProperty(value); }\r\n  protected _selectable: boolean = true;\r\n\r\n  @Input()\r\n  set tabIndex(value: number) {\r\n    this._userTabIndex = value;\r\n    this._tabIndex = value;\r\n  }\r\n\r\n  /** Combined stream of all of the child chips' selection change events. */\r\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\r\n    return merge(...this.chips.map(chip => chip.selectionChange));\r\n  }\r\n\r\n  /** Combined stream of all of the child chips' focus change events. */\r\n  get chipFocusChanges(): Observable<MatChipEvent> {\r\n    return merge(...this.chips.map(chip => chip._onFocus));\r\n  }\r\n\r\n  /** Combined stream of all of the child chips' blur change events. */\r\n  get chipBlurChanges(): Observable<MatChipEvent> {\r\n    return merge(...this.chips.map(chip => chip._onBlur));\r\n  }\r\n\r\n  /** Combined stream of all of the child chips' remove change events. */\r\n  get chipRemoveChanges(): Observable<MatChipEvent> {\r\n    return merge(...this.chips.map(chip => chip.destroy));\r\n  }\r\n\r\n  /** Event emitted when the selected chip list value has been changed by the user. */\r\n  @Output() readonly change: EventEmitter<MatChipListChange> =\r\n      new EventEmitter<MatChipListChange>();\r\n\r\n  /**\r\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\r\n   * to facilitate the two-way binding for the `value` input.\r\n   * @docs-private\r\n   */\r\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  /** The chip components contained within this chip list. */\r\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\r\n\r\n  constructor(protected _elementRef: ElementRef,\r\n              private _changeDetectorRef: ChangeDetectorRef,\r\n              @Optional() private _dir: Directionality,\r\n              @Optional() _parentForm: NgForm,\r\n              @Optional() _parentFormGroup: FormGroupDirective,\r\n              _defaultErrorStateMatcher: ErrorStateMatcher,\r\n              /** @docs-private */\r\n              @Optional() @Self() public ngControl: NgControl) {\r\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\r\n    if (this.ngControl) {\r\n      this.ngControl.valueAccessor = this;\r\n    }\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\r\n      .withWrap()\r\n      .withVerticalOrientation()\r\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\r\n\r\n    // Prevents the chip list from capturing focus and redirecting\r\n    // it back to the first chip when the user tabs out.\r\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\r\n      this._tabIndex = -1;\r\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\r\n    });\r\n\r\n    // When the list changes, re-subscribe\r\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\r\n      this._resetChips();\r\n\r\n      // Reset chips selected/deselected status\r\n      this._initializeSelection();\r\n\r\n      // Check to see if we need to update our tab index\r\n      this._updateTabIndex();\r\n\r\n      // Check to see if we have a destroyed chip and need to refocus\r\n      this._updateFocusForDestroyedChips();\r\n\r\n      this.stateChanges.next();\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  ngDoCheck() {\r\n    if (this.ngControl) {\r\n      // We need to re-evaluate this on every change detection cycle, because there are some\r\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\r\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\r\n      this.updateErrorState();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._tabOutSubscription.unsubscribe();\r\n\r\n    if (this._changeSubscription) {\r\n      this._changeSubscription.unsubscribe();\r\n    }\r\n\r\n    if (this._chipRemoveSubscription) {\r\n      this._chipRemoveSubscription.unsubscribe();\r\n    }\r\n\r\n    this._dropSubscriptions();\r\n    this.stateChanges.complete();\r\n  }\r\n\r\n\r\n  /** Associates an HTML input element with this chip list. */\r\n  registerInput(inputElement: MatChipInput): void {\r\n    this._chipInput = inputElement;\r\n  }\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  writeValue(value: any): void {\r\n    if (this.chips) {\r\n      this._setSelectionByValue(value, false);\r\n    }\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnChange(fn: (value: any) => void): void {\r\n    this._onChange = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnTouched(fn: () => void): void {\r\n    this._onTouched = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n    this._elementRef.nativeElement.disabled = isDisabled;\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  /**\r\n   * Implemented as part of MatFormFieldControl.\r\n   * @docs-private\r\n   */\r\n  onContainerClick() { this.focus(); }\r\n\r\n  /**\r\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\r\n   * are no eligible chips.\r\n   */\r\n  focus(): void {\r\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\r\n    // Focus on first element if there's no chipInput inside chip-list\r\n    if (this._chipInput && this._chipInput.focused) {\r\n      // do nothing\r\n    } else if (this.chips.length > 0) {\r\n      this._keyManager.setFirstItemActive();\r\n      this.stateChanges.next();\r\n    } else {\r\n      this._focusInput();\r\n      this.stateChanges.next();\r\n    }\r\n  }\r\n\r\n  /** Attempt to focus an input if we have one. */\r\n  _focusInput() {\r\n    if (this._chipInput) {\r\n      this._chipInput.focus();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Pass events to the keyboard manager. Available here for tests.\r\n   */\r\n  _keydown(event: KeyboardEvent) {\r\n    const target = event.target as HTMLElement;\r\n\r\n    // If they are on an empty input and hit backspace, focus the last chip\r\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\r\n      this._keyManager.setLastItemActive();\r\n      event.preventDefault();\r\n    } else if (target && target.classList.contains('mat-chip')) {\r\n      this._keyManager.onKeydown(event);\r\n      this.stateChanges.next();\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Check the tab index as you should not be allowed to focus an empty list.\r\n   */\r\n  protected _updateTabIndex(): void {\r\n    // If we have 0 chips, we should not allow keyboard focus\r\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\r\n  }\r\n\r\n  /**\r\n   * Update key manager's active item when chip is deleted.\r\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\r\n   * Otherwise focus the next chip in the list.\r\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\r\n   */\r\n  protected _updateKeyManager(chip: MatChip) {\r\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\r\n    if (this._isValidIndex(chipIndex)) {\r\n      if (chip._hasFocus) {\r\n        // Check whether the chip is not the last item\r\n        if (chipIndex < this.chips.length - 1) {\r\n          this._keyManager.setActiveItem(chipIndex);\r\n        } else if (chipIndex - 1 >= 0) {\r\n          this._keyManager.setActiveItem(chipIndex - 1);\r\n        }\r\n      }\r\n      if (this._keyManager.activeItemIndex === chipIndex) {\r\n        this._lastDestroyedIndex = chipIndex;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\r\n   * one.\r\n   */\r\n  protected _updateFocusForDestroyedChips() {\r\n    let chipsArray = this.chips;\r\n\r\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0) {\r\n      // Check whether the destroyed chip was the last item\r\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\r\n      this._keyManager.setActiveItem(newFocusIndex);\r\n      let focusChip = this._keyManager.activeItem;\r\n      // Focus the chip\r\n      if (focusChip) {\r\n        focusChip.focus();\r\n      }\r\n    }\r\n\r\n    // Reset our destroyed index\r\n    this._lastDestroyedIndex = null;\r\n  }\r\n\r\n  /**\r\n   * Utility to ensure all indexes are valid.\r\n   *\r\n   * @param index The index to be checked.\r\n   * @returns True if the index is valid for our list of chips.\r\n   */\r\n  private _isValidIndex(index: number): boolean {\r\n    return index >= 0 && index < this.chips.length;\r\n  }\r\n\r\n  private _isInputEmpty(element: HTMLElement): boolean {\r\n    if (element && element.nodeName.toLowerCase() === 'input') {\r\n      let input = element as HTMLInputElement;\r\n      return !input.value;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\r\n    this._clearSelection();\r\n    this.chips.forEach(chip => chip.deselect());\r\n\r\n    if (Array.isArray(value)) {\r\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\r\n      this._sortValues();\r\n    } else {\r\n      const correspondingChip = this._selectValue(value, isUserInput);\r\n\r\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\r\n      // mode, because we don't know what chip the user interacted with last.\r\n      if (correspondingChip) {\r\n        const correspondingChipIndex = this.chips.toArray().indexOf(correspondingChip);\r\n\r\n        if (isUserInput) {\r\n          this._keyManager.setActiveItem(correspondingChipIndex);\r\n        } else {\r\n          this._keyManager.updateActiveItemIndex(correspondingChipIndex);\r\n        }\r\n\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Finds and selects the chip based on its value.\r\n   * @returns Chip that has the corresponding value.\r\n   */\r\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\r\n\r\n    const correspondingChip = this.chips.find(chip => {\r\n      return chip.value != null && this._compareWith(chip.value,  value);\r\n    });\r\n\r\n    if (correspondingChip) {\r\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\r\n      this._selectionModel.select(correspondingChip);\r\n    }\r\n\r\n    return correspondingChip;\r\n  }\r\n\r\n  private _initializeSelection(): void {\r\n    // Defer setting the value in order to avoid the \"Expression\r\n    // has changed after it was checked\" errors from Angular.\r\n    Promise.resolve().then(() => {\r\n      if (this.ngControl || this._value) {\r\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\r\n        this.stateChanges.next();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Deselects every chip in the list.\r\n   * @param skip Chip that should not be deselected.\r\n   */\r\n  private _clearSelection(skip?: MatChip): void {\r\n    this._selectionModel.clear();\r\n    this.chips.forEach(chip => {\r\n      if (chip !== skip) {\r\n        chip.deselect();\r\n      }\r\n    });\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  /**\r\n   * Sorts the model values, ensuring that they keep the same\r\n   * order that they have in the panel.\r\n   */\r\n  private _sortValues(): void {\r\n    if (this._multiple) {\r\n      this._selectionModel.clear();\r\n\r\n      this.chips.forEach(chip => {\r\n        if (chip.selected) {\r\n          this._selectionModel.select(chip);\r\n        }\r\n      });\r\n      this.stateChanges.next();\r\n    }\r\n  }\r\n\r\n  /** Emits change event to set the model value. */\r\n  private _propagateChanges(fallbackValue?: any): void {\r\n    let valueToEmit: any = null;\r\n\r\n    if (Array.isArray(this.selected)) {\r\n      valueToEmit = this.selected.map(chip => chip.value);\r\n    } else {\r\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\r\n    }\r\n    this._value = valueToEmit;\r\n    this.change.emit(new MatChipListChange(this, valueToEmit));\r\n    this.valueChange.emit(valueToEmit);\r\n    this._onChange(valueToEmit);\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\r\n  _blur() {\r\n    if (!this.disabled) {\r\n      if (this._chipInput) {\r\n        // If there's a chip input, we should check whether the focus moved to chip input.\r\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\r\n        // to chip input, do nothing.\r\n        // Timeout is needed to wait for the focus() event trigger on chip input.\r\n        setTimeout(() => {\r\n          if (!this.focused) {\r\n            this._markAsTouched();\r\n          }\r\n        });\r\n      } else {\r\n        // If there's no chip input, then mark the field as touched.\r\n        this._markAsTouched();\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Mark the field as touched */\r\n  _markAsTouched() {\r\n    this._onTouched();\r\n    this._changeDetectorRef.markForCheck();\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  private _resetChips() {\r\n    this._dropSubscriptions();\r\n    this._listenToChipsFocus();\r\n    this._listenToChipsSelection();\r\n    this._listenToChipsRemoved();\r\n  }\r\n\r\n\r\n  private _dropSubscriptions() {\r\n    if (this._chipFocusSubscription) {\r\n      this._chipFocusSubscription.unsubscribe();\r\n      this._chipFocusSubscription = null;\r\n    }\r\n\r\n    if (this._chipBlurSubscription) {\r\n      this._chipBlurSubscription.unsubscribe();\r\n      this._chipBlurSubscription = null;\r\n    }\r\n\r\n    if (this._chipSelectionSubscription) {\r\n      this._chipSelectionSubscription.unsubscribe();\r\n      this._chipSelectionSubscription = null;\r\n    }\r\n  }\r\n\r\n  /** Listens to user-generated selection events on each chip. */\r\n  private _listenToChipsSelection(): void {\r\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\r\n      event.source.selected\r\n        ? this._selectionModel.select(event.source)\r\n        : this._selectionModel.deselect(event.source);\r\n\r\n      // For single selection chip list, make sure the deselected value is unselected.\r\n      if (!this.multiple) {\r\n        this.chips.forEach(chip => {\r\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\r\n            chip.deselect();\r\n          }\r\n        });\r\n      }\r\n\r\n      if (event.isUserInput) {\r\n        this._propagateChanges();\r\n      }\r\n    });\r\n  }\r\n\r\n  /** Listens to user-generated selection events on each chip. */\r\n  private _listenToChipsFocus(): void {\r\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\r\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\r\n\r\n      if (this._isValidIndex(chipIndex)) {\r\n        this._keyManager.updateActiveItemIndex(chipIndex);\r\n      }\r\n      this.stateChanges.next();\r\n    });\r\n\r\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\r\n      this._blur();\r\n      this.stateChanges.next();\r\n    });\r\n  }\r\n\r\n  private _listenToChipsRemoved(): void {\r\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\r\n      this._updateKeyManager(event.chip);\r\n    });\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {ENTER} from '@angular/cdk/keycodes';\r\nimport {Directive, ElementRef, EventEmitter, Input, Output} from '@angular/core';\r\nimport {MatChipList} from './chip-list';\r\n\r\n\r\n/** Represents an input event on a `matChipInput`. */\r\nexport interface MatChipInputEvent {\r\n  /** The native `<input>` element that the event is being fired for. */\r\n  input: HTMLInputElement;\r\n\r\n  /** The value of the input. */\r\n  value: string;\r\n}\r\n\r\n/**\r\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\r\n * May be placed inside or outside of an `<mat-chip-list>`.\r\n */\r\n@Directive({\r\n  selector: 'input[matChipInputFor]',\r\n  exportAs: 'matChipInput, matChipInputFor',\r\n  host: {\r\n    'class': 'mat-chip-input mat-input-element',\r\n    '(keydown)': '_keydown($event)',\r\n    '(blur)': '_blur()',\r\n    '(focus)': '_focus()',\r\n    '(input)': '_onInput()',\r\n  }\r\n})\r\nexport class MatChipInput {\r\n  /** Whether the control is focused. */\r\n  focused: boolean = false;\r\n  _chipList: MatChipList;\r\n\r\n  /** Register input for chip list */\r\n  @Input('matChipInputFor')\r\n  set chipList(value: MatChipList) {\r\n    if (value) {\r\n      this._chipList = value;\r\n      this._chipList.registerInput(this);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\r\n   */\r\n  @Input('matChipInputAddOnBlur')\r\n  get addOnBlur(): boolean { return this._addOnBlur; }\r\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\r\n  _addOnBlur: boolean = false;\r\n\r\n  /**\r\n   * The list of key codes that will trigger a chipEnd event.\r\n   *\r\n   * Defaults to `[ENTER]`.\r\n   */\r\n  // TODO(tinayuangao): Support Set here\r\n  @Input('matChipInputSeparatorKeyCodes') separatorKeyCodes: number[] = [ENTER];\r\n\r\n  /** Emitted when a chip is to be added. */\r\n  @Output('matChipInputTokenEnd')\r\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\r\n\r\n  /** The input's placeholder text. */\r\n  @Input() placeholder: string = '';\r\n\r\n  /** Whether the input is empty. */\r\n  get empty(): boolean { return !this._inputElement.value; }\r\n\r\n  /** The native input element to which this directive is attached. */\r\n  protected _inputElement: HTMLInputElement;\r\n\r\n  constructor(protected _elementRef: ElementRef) {\r\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\r\n  }\r\n\r\n  /** Utility method to make host definition/tests more clear. */\r\n  _keydown(event?: KeyboardEvent) {\r\n    this._emitChipEnd(event);\r\n  }\r\n\r\n  /** Checks to see if the blur should emit the (chipEnd) event. */\r\n  _blur() {\r\n    if (this.addOnBlur) {\r\n      this._emitChipEnd();\r\n    }\r\n    this.focused = false;\r\n    // Blur the chip list if it is not focused\r\n    if (!this._chipList.focused) {\r\n      this._chipList._blur();\r\n    }\r\n    this._chipList.stateChanges.next();\r\n  }\r\n\r\n  _focus() {\r\n    this.focused = true;\r\n    this._chipList.stateChanges.next();\r\n  }\r\n\r\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\r\n  _emitChipEnd(event?: KeyboardEvent) {\r\n    if (!this._inputElement.value && !!event) {\r\n      this._chipList._keydown(event);\r\n    }\r\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\r\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\r\n\r\n      if (event) {\r\n        event.preventDefault();\r\n      }\r\n    }\r\n  }\r\n\r\n  _onInput() {\r\n    // Let chip list know whenever the value changes.\r\n    this._chipList.stateChanges.next();\r\n  }\r\n\r\n  /** Focuses the input. */\r\n  focus(): void { this._inputElement.focus(); }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {ErrorStateMatcher} from '@angular/material/core';\r\nimport {MatChipList} from './chip-list';\r\nimport {MatBasicChip, MatChip, MatChipRemove} from './chip';\r\nimport {MatChipInput} from './chip-input';\r\n\r\n\r\n@NgModule({\r\n  imports: [],\r\n  exports: [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipRemove, MatBasicChip],\r\n  declarations: [MatChipList, MatChip, MatChipInput, MatChipRemove,  MatChipRemove, MatBasicChip],\r\n  providers: [ErrorStateMatcher]\r\n})\r\nexport class MatChipsModule {}\r\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","setPrototypeOf","__proto__","Array","p","hasOwnProperty","MatChipSelectionChange","source","selected","isUserInput","MatChipBase","_elementRef","_MatChipMixinBase","mixinColor","mixinDisabled","type","Directive","args","selector","host","class","MatBasicChip","MatChip","_this","_super","call","_hasFocus","_selected","_selectable","_removable","_onFocus","Subject","_onBlur","selectionChange","EventEmitter","destroyed","destroy","removed","onRemove","tslib_1.__extends","defineProperty","value","coerceBooleanProperty","emit","undefined","_value","nativeElement","textContent","selectable","toString","ngOnDestroy","chip","select","deselect","selectViaInteraction","toggleSelected","focus","next","remove","removable","_handleClick","event","disabled","preventDefault","stopPropagation","_handleKeydown","keyCode","DELETE","BACKSPACE","SPACE","_blur","inputs","exportAs","[attr.tabindex]","role","[class.mat-chip-selected]","[attr.disabled]","[attr.aria-disabled]","[attr.aria-selected]","(click)","(keydown)","(focus)","(blur)","ElementRef","Input","Output","MatChipRemove","_parentChip","MatChipListBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatChipListMixinBase","mixinErrorState","nextUniqueId","MatChipListChange","MatChipList","_changeDetectorRef","_dir","controlType","_lastDestroyedIndex","_chipSet","WeakMap","_tabOutSubscription","Subscription","EMPTY","_uid","_tabIndex","_userTabIndex","_onTouched","_onChange","_multiple","_compareWith","o1","o2","_required","_disabled","ariaOrientation","change","valueChange","valueAccessor","multiple","_selectionModel","empty","fn","_initializeSelection","writeValue","_id","stateChanges","_chipInput","placeholder","_placeholder","chips","some","focused","length","merge","apply","map","ngAfterContentInit","_keyManager","FocusKeyManager","withWrap","withVerticalOrientation","withHorizontalOrientation","tabOut","subscribe","setTimeout","_changeSubscription","changes","pipe","startWith","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","ngOnInit","SelectionModel","ngDoCheck","updateErrorState","unsubscribe","_chipRemoveSubscription","_dropSubscriptions","complete","registerInput","inputElement","setDescribedByIds","ids","_ariaDescribedby","join","_setSelectionByValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","onContainerClick","setFirstItemActive","_focusInput","_keydown","target","_isInputEmpty","setLastItemActive","classList","contains","onKeydown","_updateKeyManager","chipIndex","toArray","indexOf","_isValidIndex","setActiveItem","activeItemIndex","chipsArray","newFocusIndex","Math","min","focusChip","activeItem","index","element","nodeName","toLowerCase","_clearSelection","forEach","isArray","currentValue","_selectValue","_sortValues","correspondingChip","correspondingChipIndex","updateActiveItemIndex","find","Promise","resolve","then","skip","clear","_propagateChanges","fallbackValue","valueToEmit","markForCheck","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","isSelected","chipFocusChanges","chipBlurChanges","chipRemoveChanges","Component","template","[attr.aria-describedby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-multiselectable]","[attr.role]","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","[attr.aria-orientation]","providers","provide","MatFormFieldControl","useExisting","styles","encapsulation","ViewEncapsulation","None","preserveWhitespaces","changeDetection","ChangeDetectionStrategy","OnPush","Directionality","decorators","Optional","NgForm","FormGroupDirective","ErrorStateMatcher","NgControl","Self","propDecorators","compareWith","id","required","tabIndex","ContentChildren","MatChipInput","_addOnBlur","separatorKeyCodes","ENTER","chipEnd","_inputElement","_chipList","_emitChipEnd","addOnBlur","_focus","input","_onInput","(input)","chipList","MatChipsModule","NgModule","imports","exports","declarations"],"mappings":"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"}
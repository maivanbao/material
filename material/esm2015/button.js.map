{"version":3,"file":"button.js","sources":["../../../src/lib/button/index.ts","../../../src/lib/button/public-api.ts","../../../src/lib/button/button-module.ts","../../../src/lib/button/button.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nexport * from './button-module';\r\nexport * from './button';\r\n\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\r\nimport {A11yModule} from '@angular/cdk/a11y';\r\nimport {\r\n  MatAnchor,\r\n  MatButton,\r\n} from './button';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatRippleModule,\r\n    MatCommonModule,\r\n    A11yModule,\r\n  ],\r\n  exports: [\r\n    MatButton,\r\n    MatAnchor,\r\n    MatCommonModule,\r\n  ],\r\n  declarations: [\r\n    MatButton,\r\n    MatAnchor,\r\n  ],\r\n})\r\nexport class MatButtonModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FocusMonitor} from '@angular/cdk/a11y';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ElementRef,\r\n  OnDestroy,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {\r\n  CanColor,\r\n  CanDisable,\r\n  CanDisableRipple,\r\n  MatRipple,\r\n  mixinColor,\r\n  mixinDisabled,\r\n  mixinDisableRipple\r\n} from '@angular/material/core';\r\n\r\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\r\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\r\n\r\n/** Default color palette for flat buttons (mat-flat-button) */\r\nconst DEFAULT_FLAT_BUTTON_COLOR = 'primary';\r\n\r\n/**\r\n * List of classes to add to MatButton instances based on host attributes to\r\n * style as different variants.\r\n */\r\nconst BUTTON_HOST_ATTRIBUTES = [\r\n  'mat-button',\r\n  'mat-flat-button',\r\n  'mat-icon-button',\r\n  'mat-raised-button',\r\n  'mat-stroked-button',\r\n  'mat-mini-fab',\r\n  'mat-fab',\r\n];\r\n\r\n// Boilerplate for applying mixins to MatButton.\r\n/** @docs-private */\r\nexport class MatButtonBase {\r\n  constructor(public _elementRef: ElementRef) {}\r\n}\r\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\r\n\r\n\r\n/**\r\n * Material design button.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\r\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\r\n             button[mat-flat-button]`,\r\n  exportAs: 'matButton',\r\n  host: {\r\n    '[disabled]': 'disabled || null',\r\n  },\r\n  templateUrl: 'button.html',\r\n  styleUrls: ['button.css'],\r\n  inputs: ['disabled', 'disableRipple', 'color'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatButton extends _MatButtonMixinBase\r\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\r\n\r\n  /** Whether the button is round. */\r\n  _isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\r\n\r\n  /** Whether the button is icon button. */\r\n  _isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\r\n\r\n  /** Reference to the MatRipple instance of the button. */\r\n  @ViewChild(MatRipple) ripple: MatRipple;\r\n\r\n  constructor(elementRef: ElementRef,\r\n              private _platform: Platform,\r\n              private _focusMonitor: FocusMonitor) {\r\n    super(elementRef);\r\n\r\n    // For each of the variant selectors that is prevent in the button's host\r\n    // attributes, add the correct corresponding class.\r\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\r\n      if (this._hasHostAttributes(attr)) {\r\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\r\n      }\r\n    }\r\n\r\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\r\n\r\n    if (this._isRoundButton) {\r\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\r\n    } else if (this._hasHostAttributes('mat-flat-button')) {\r\n      this.color = DEFAULT_FLAT_BUTTON_COLOR;\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\r\n  }\r\n\r\n  /** Focuses the button. */\r\n  focus(): void {\r\n    this._getHostElement().focus();\r\n  }\r\n\r\n  _getHostElement() {\r\n    return this._elementRef.nativeElement;\r\n  }\r\n\r\n  _isRippleDisabled() {\r\n    return this.disableRipple || this.disabled;\r\n  }\r\n\r\n  /** Gets whether the button has one of the given attributes. */\r\n  _hasHostAttributes(...attributes: string[]) {\r\n    // If not on the browser, say that there are none of the attributes present.\r\n    // Since these only affect how the ripple displays (and ripples only happen on the client),\r\n    // detecting these attributes isn't necessary when not on the browser.\r\n    if (!this._platform.isBrowser) {\r\n      return false;\r\n    }\r\n\r\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\r\n  }\r\n}\r\n\r\n/**\r\n * Raised Material design button.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\r\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\r\n  exportAs: 'matButton, matAnchor',\r\n  host: {\r\n    '[attr.tabindex]': 'disabled ? -1 : 0',\r\n    '[attr.disabled]': 'disabled || null',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n    '(click)': '_haltDisabledEvents($event)',\r\n  },\r\n  inputs: ['disabled', 'disableRipple', 'color'],\r\n  templateUrl: 'button.html',\r\n  styleUrls: ['button.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatAnchor extends MatButton {\r\n  constructor(\r\n      platform: Platform,\r\n      focusMonitor: FocusMonitor,\r\n      elementRef: ElementRef) {\r\n    super(elementRef, platform, focusMonitor);\r\n  }\r\n\r\n  _haltDisabledEvents(event: Event) {\r\n    // A disabled button shouldn't apply any actions\r\n    if (this.disabled) {\r\n      event.preventDefault();\r\n      event.stopImmediatePropagation();\r\n    }\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}
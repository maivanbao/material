{"version":3,"file":"autocomplete.js","sources":["../../../src/lib/autocomplete/index.ts","../../../src/lib/autocomplete/public-api.ts","../../../src/lib/autocomplete/autocomplete-module.ts","../../../src/lib/autocomplete/autocomplete-trigger.ts","../../../src/lib/autocomplete/autocomplete.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nexport * from './autocomplete';\r\nexport * from './autocomplete-module';\r\nexport * from './autocomplete-trigger';\r\n\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {OverlayModule} from '@angular/cdk/overlay';\r\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\r\nimport {MatAutocomplete} from './autocomplete';\r\nimport {\r\n  MatAutocompleteTrigger,\r\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,\r\n} from './autocomplete-trigger';\r\n\r\n@NgModule({\r\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\r\n  exports: [MatAutocomplete, MatOptionModule, MatAutocompleteTrigger, MatCommonModule],\r\n  declarations: [MatAutocomplete, MatAutocompleteTrigger],\r\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER],\r\n})\r\nexport class MatAutocompleteModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {DOWN_ARROW, ENTER, ESCAPE, UP_ARROW, TAB} from '@angular/cdk/keycodes';\r\nimport {\r\n  ConnectedPositionStrategy,\r\n  Overlay,\r\n  OverlayRef,\r\n  OverlayConfig,\r\n  PositionStrategy,\r\n  ScrollStrategy,\r\n} from '@angular/cdk/overlay';\r\nimport {TemplatePortal} from '@angular/cdk/portal';\r\nimport {filter} from 'rxjs/operators/filter';\r\nimport {take} from 'rxjs/operators/take';\r\nimport {switchMap} from 'rxjs/operators/switchMap';\r\nimport {tap} from 'rxjs/operators/tap';\r\nimport {delay} from 'rxjs/operators/delay';\r\nimport {\r\n  ChangeDetectorRef,\r\n  Directive,\r\n  ElementRef,\r\n  forwardRef,\r\n  Host,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Optional,\r\n  ViewContainerRef,\r\n} from '@angular/core';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {\r\n  MatOption,\r\n  MatOptionSelectionChange,\r\n  _getOptionScrollPosition,\r\n  _countGroupLabelsBeforeOption,\r\n} from '@angular/material/core';\r\nimport {MatFormField} from '@angular/material/form-field';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {defer} from 'rxjs/observable/defer';\r\nimport {fromEvent} from 'rxjs/observable/fromEvent';\r\nimport {merge} from 'rxjs/observable/merge';\r\nimport {of as observableOf} from 'rxjs/observable/of';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {MatAutocomplete} from './autocomplete';\r\n\r\n\r\n/**\r\n * The following style constants are necessary to save here in order\r\n * to properly calculate the scrollTop of the panel. Because we are not\r\n * actually focusing the active item, scroll must be handled manually.\r\n */\r\n\r\n/** The height of each autocomplete option. */\r\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\r\n\r\n/** The total height of the autocomplete panel. */\r\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\r\n\r\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\r\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\r\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\r\n\r\n/** @docs-private */\r\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\r\n    () => ScrollStrategy {\r\n  return () => overlay.scrollStrategies.reposition();\r\n}\r\n\r\n/** @docs-private */\r\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER = {\r\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\r\n  deps: [Overlay],\r\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,\r\n};\r\n\r\n/**\r\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\r\n * @docs-private\r\n */\r\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\r\n  multi: true\r\n};\r\n\r\n/**\r\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\r\n */\r\nexport function getMatAutocompleteMissingPanelError(): Error {\r\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\r\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\r\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\r\n}\r\n\r\n@Directive({\r\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\r\n  host: {\r\n    'role': 'combobox',\r\n    'autocomplete': 'off',\r\n    'aria-autocomplete': 'list',\r\n    '[attr.aria-activedescendant]': 'activeOption?.id',\r\n    '[attr.aria-expanded]': 'panelOpen.toString()',\r\n    '[attr.aria-owns]': 'autocomplete?.id',\r\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\r\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\r\n    '(focusin)': '_handleFocus()',\r\n    '(blur)': '_onTouched()',\r\n    '(input)': '_handleInput($event)',\r\n    '(keydown)': '_handleKeydown($event)',\r\n  },\r\n  exportAs: 'matAutocompleteTrigger',\r\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\r\n})\r\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\r\n  private _overlayRef: OverlayRef | null;\r\n  private _portal: TemplatePortal;\r\n  private _componentDestroyed = false;\r\n\r\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\r\n  private _previousValue: string | number | null;\r\n\r\n  /** Strategy that is used to position the panel. */\r\n  private _positionStrategy: ConnectedPositionStrategy;\r\n\r\n  /** Whether or not the label state is being overridden. */\r\n  private _manuallyFloatingLabel = false;\r\n\r\n  /** The subscription for closing actions (some are bound to document). */\r\n  private _closingActionsSubscription: Subscription;\r\n\r\n  /** Stream of keyboard events that can close the panel. */\r\n  private readonly _closeKeyEventStream = new Subject<void>();\r\n\r\n  /** `View -> model callback called when value changes` */\r\n  _onChange: (value: any) => void = () => {};\r\n\r\n  /** `View -> model callback called when autocomplete has been touched` */\r\n  _onTouched = () => {};\r\n\r\n  /** The autocomplete panel to be attached to this trigger. */\r\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\r\n\r\n  constructor(private _element: ElementRef, private _overlay: Overlay,\r\n              private _viewContainerRef: ViewContainerRef,\r\n              private _zone: NgZone,\r\n              private _changeDetectorRef: ChangeDetectorRef,\r\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\r\n              @Optional() private _dir: Directionality,\r\n              @Optional() @Host() private _formField: MatFormField,\r\n              @Optional() @Inject(DOCUMENT) private _document: any) {}\r\n\r\n  ngOnDestroy() {\r\n    this._componentDestroyed = true;\r\n    this._destroyPanel();\r\n    this._closeKeyEventStream.complete();\r\n  }\r\n\r\n  /** Whether or not the autocomplete panel is open. */\r\n  get panelOpen(): boolean { return this._panelOpen && this.autocomplete.showPanel; }\r\n  private _panelOpen: boolean = false;\r\n\r\n  /** Opens the autocomplete suggestion panel. */\r\n  openPanel(): void {\r\n    this._attachOverlay();\r\n    this._floatLabel();\r\n  }\r\n\r\n  /** Closes the autocomplete suggestion panel. */\r\n  closePanel(): void {\r\n    this._resetLabel();\r\n\r\n    if (this._panelOpen) {\r\n      this.autocomplete._isOpen = this._panelOpen = false;\r\n\r\n      if (this._overlayRef && this._overlayRef.hasAttached()) {\r\n        this._overlayRef.detach();\r\n        this._closingActionsSubscription.unsubscribe();\r\n      }\r\n\r\n      // Note that in some cases this can end up being called after the component is destroyed.\r\n      // Add a check to ensure that we don't try to run change detection on a destroyed view.\r\n      if (!this._componentDestroyed) {\r\n        // We need to trigger change detection manually, because\r\n        // `fromEvent` doesn't seem to do it at the proper time.\r\n        // This ensures that the label is reset when the\r\n        // user clicks outside.\r\n        this._changeDetectorRef.detectChanges();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A stream of actions that should close the autocomplete panel, including\r\n   * when an option is selected, on blur, and when TAB is pressed.\r\n   */\r\n  get panelClosingActions(): Observable<MatOptionSelectionChange> {\r\n    return merge(\r\n      this.optionSelections,\r\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._panelOpen)),\r\n      this._closeKeyEventStream,\r\n      this._outsideClickStream,\r\n      this._overlayRef ?\r\n          this._overlayRef.detachments().pipe(filter(() => this._panelOpen)) :\r\n          observableOf()\r\n    );\r\n  }\r\n\r\n  /** Stream of autocomplete option selections. */\r\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\r\n    if (this.autocomplete && this.autocomplete.options) {\r\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\r\n    }\r\n\r\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\r\n    // Return a stream that we'll replace with the real one once everything is in place.\r\n    return this._zone.onStable\r\n        .asObservable()\r\n        .pipe(take(1), switchMap(() => this.optionSelections));\r\n  });\r\n\r\n  /** The currently active option, coerced to MatOption type. */\r\n  get activeOption(): MatOption | null {\r\n    if (this.autocomplete && this.autocomplete._keyManager) {\r\n      return this.autocomplete._keyManager.activeItem;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /** Stream of clicks outside of the autocomplete panel. */\r\n  private get _outsideClickStream(): Observable<any> {\r\n    if (!this._document) {\r\n      return observableOf(null);\r\n    }\r\n\r\n    return merge(\r\n      fromEvent(this._document, 'click'),\r\n      fromEvent(this._document, 'touchend')\r\n    )\r\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\r\n      const clickTarget = event.target as HTMLElement;\r\n      const formField = this._formField ?\r\n          this._formField._elementRef.nativeElement : null;\r\n\r\n      return this._panelOpen &&\r\n              clickTarget !== this._element.nativeElement &&\r\n              (!formField || !formField.contains(clickTarget)) &&\r\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\r\n    }));\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  writeValue(value: any): void {\r\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnChange(fn: (value: any) => {}): void {\r\n    this._onChange = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnTouched(fn: () => {}) {\r\n    this._onTouched = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  setDisabledState(isDisabled: boolean) {\r\n    this._element.nativeElement.disabled = isDisabled;\r\n  }\r\n\r\n  _handleKeydown(event: KeyboardEvent): void {\r\n    const keyCode = event.keyCode;\r\n\r\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\r\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\r\n    // the input value to the one that it had on focus, however it won't dispatch any events\r\n    // which means that the model value will be out of sync with the view.\r\n    if (keyCode === ESCAPE) {\r\n      event.preventDefault();\r\n    }\r\n\r\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\r\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\r\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\r\n      this._resetActiveItem();\r\n      this._closeKeyEventStream.next();\r\n      event.stopPropagation();\r\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\r\n      this.activeOption._selectViaInteraction();\r\n      this._resetActiveItem();\r\n      event.preventDefault();\r\n    } else {\r\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\r\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\r\n\r\n      if (this.panelOpen || keyCode === TAB) {\r\n        this.autocomplete._keyManager.onKeydown(event);\r\n      } else if (isArrowKey && this._canOpen()) {\r\n        this.openPanel();\r\n      }\r\n\r\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\r\n        this._scrollToOption();\r\n      }\r\n    }\r\n  }\r\n\r\n  _handleInput(event: KeyboardEvent): void {\r\n    let target = event.target as HTMLInputElement;\r\n    let value: number | string | null = target.value;\r\n\r\n    // Based on `NumberValueAccessor` from forms.\r\n    if (target.type === 'number') {\r\n      value = value == '' ? null : parseFloat(value);\r\n    }\r\n\r\n    // If the input has a placeholder, IE will fire the `input` event on page load,\r\n    // focus and blur, in addition to when the user actually changed the value. To\r\n    // filter out all of the extra events, we save the value on focus and between\r\n    // `input` events, and we check whether it changed.\r\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\r\n    if (this._canOpen() && this._previousValue !== value &&\r\n      document.activeElement === event.target) {\r\n      this._previousValue = value;\r\n      this._onChange(value);\r\n      this.openPanel();\r\n    }\r\n  }\r\n\r\n  _handleFocus(): void {\r\n    if (this._canOpen()) {\r\n      this._previousValue = this._element.nativeElement.value;\r\n      this._attachOverlay();\r\n      this._floatLabel(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\r\n   * This causes the value to jump when selecting an option with the mouse.\r\n   * This method manually floats the label until the panel can be closed.\r\n   * @param shouldAnimate Whether the label should be animated when it is floated.\r\n   */\r\n  private _floatLabel(shouldAnimate = false): void {\r\n    if (this._formField && this._formField.floatLabel === 'auto') {\r\n      if (shouldAnimate) {\r\n        this._formField._animateAndLockLabel();\r\n      } else {\r\n        this._formField.floatLabel = 'always';\r\n      }\r\n\r\n      this._manuallyFloatingLabel = true;\r\n    }\r\n  }\r\n\r\n  /** If the label has been manually elevated, return it to its normal state. */\r\n  private _resetLabel(): void  {\r\n    if (this._manuallyFloatingLabel) {\r\n      this._formField.floatLabel = 'auto';\r\n      this._manuallyFloatingLabel = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Given that we are not actually focusing active options, we must manually adjust scroll\r\n   * to reveal options below the fold. First, we find the offset of the option from the top\r\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\r\n   * the panel height + the option height, so the active option will be just visible at the\r\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\r\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\r\n   * not adjusted.\r\n   */\r\n  private _scrollToOption(): void {\r\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\r\n    const labelCount = _countGroupLabelsBeforeOption(index,\r\n        this.autocomplete.options, this.autocomplete.optionGroups);\r\n\r\n    const newScrollPosition = _getOptionScrollPosition(\r\n      index + labelCount,\r\n      AUTOCOMPLETE_OPTION_HEIGHT,\r\n      this.autocomplete._getScrollTop(),\r\n      AUTOCOMPLETE_PANEL_HEIGHT\r\n    );\r\n\r\n    this.autocomplete._setScrollTop(newScrollPosition);\r\n  }\r\n\r\n  /**\r\n   * This method listens to a stream of panel closing actions and resets the\r\n   * stream every time the option list changes.\r\n   */\r\n  private _subscribeToClosingActions(): Subscription {\r\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\r\n    const optionChanges = this.autocomplete.options.changes.pipe(\r\n      tap(() => this._positionStrategy.recalculateLastPosition()),\r\n      // Defer emitting to the stream until the next tick, because changing\r\n      // bindings in here will cause \"changed after checked\" errors.\r\n      delay(0)\r\n    );\r\n\r\n    // When the zone is stable initially, and when the option list changes...\r\n    return merge(firstStable, optionChanges)\r\n      .pipe(\r\n        // create a new stream of panelClosingActions, replacing any previous streams\r\n        // that were created, and flatten it so our stream only emits closing events...\r\n        switchMap(() => {\r\n          this._resetActiveItem();\r\n          this.autocomplete._setVisibility();\r\n          return this.panelClosingActions;\r\n        }),\r\n        // when the first closing event occurs...\r\n        take(1)\r\n      )\r\n      // set the value, close the panel, and complete.\r\n      .subscribe(event => this._setValueAndClose(event));\r\n  }\r\n\r\n  /** Destroys the autocomplete suggestion panel. */\r\n  private _destroyPanel(): void {\r\n    if (this._overlayRef) {\r\n      this.closePanel();\r\n      this._overlayRef.dispose();\r\n      this._overlayRef = null;\r\n    }\r\n  }\r\n\r\n  private _setTriggerValue(value: any): void {\r\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\r\n      this.autocomplete.displayWith(value) :\r\n      value;\r\n\r\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\r\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\r\n    const inputValue = toDisplay != null ? toDisplay : '';\r\n\r\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\r\n    // through change detection.\r\n    if (this._formField) {\r\n      this._formField._control.value = inputValue;\r\n    } else {\r\n      this._element.nativeElement.value = inputValue;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This method closes the panel, and if a value is specified, also sets the associated\r\n   * control to that value. It will also mark the control as dirty if this interaction\r\n   * stemmed from the user.\r\n   */\r\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\r\n    if (event && event.source) {\r\n      this._clearPreviousSelectedOption(event.source);\r\n      this._setTriggerValue(event.source.value);\r\n      this._onChange(event.source.value);\r\n      this._element.nativeElement.focus();\r\n      this.autocomplete._emitSelectEvent(event.source);\r\n    }\r\n\r\n    this.closePanel();\r\n  }\r\n\r\n  /**\r\n   * Clear any previous selected option and emit a selection change event for this option\r\n   */\r\n  private _clearPreviousSelectedOption(skip: MatOption) {\r\n    this.autocomplete.options.forEach(option => {\r\n      if (option != skip && option.selected) {\r\n        option.deselect();\r\n      }\r\n    });\r\n  }\r\n\r\n  private _attachOverlay(): void {\r\n    if (!this.autocomplete) {\r\n      throw getMatAutocompleteMissingPanelError();\r\n    }\r\n\r\n    if (!this._overlayRef) {\r\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\r\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\r\n    } else {\r\n      /** Update the panel width, in case the host width has changed */\r\n      this._overlayRef.updateSize({width: this._getHostWidth()});\r\n    }\r\n\r\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\r\n      this._overlayRef.attach(this._portal);\r\n      this._closingActionsSubscription = this._subscribeToClosingActions();\r\n    }\r\n\r\n    this.autocomplete._setVisibility();\r\n    this.autocomplete._isOpen = this._panelOpen = true;\r\n  }\r\n\r\n  private _getOverlayConfig(): OverlayConfig {\r\n    return new OverlayConfig({\r\n      positionStrategy: this._getOverlayPosition(),\r\n      scrollStrategy: this._scrollStrategy(),\r\n      width: this._getHostWidth(),\r\n      direction: this._dir ? this._dir.value : 'ltr'\r\n    });\r\n  }\r\n\r\n  private _getOverlayPosition(): PositionStrategy {\r\n    this._positionStrategy = this._overlay.position().connectedTo(\r\n        this._getConnectedElement(),\r\n        {originX: 'start', originY: 'bottom'}, {overlayX: 'start', overlayY: 'top'})\r\n        .withFallbackPosition(\r\n            {originX: 'start', originY: 'top'}, {overlayX: 'start', overlayY: 'bottom'}\r\n        );\r\n    return this._positionStrategy;\r\n  }\r\n\r\n  private _getConnectedElement(): ElementRef {\r\n    return this._formField ? this._formField._connectionContainerRef : this._element;\r\n  }\r\n\r\n  /** Returns the width of the input element, so the panel width can match it. */\r\n  private _getHostWidth(): number {\r\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\r\n  }\r\n\r\n  /**\r\n   * Resets the active item to -1 so arrow events will activate the\r\n   * correct options, or to 0 if the consumer opted into it.\r\n   */\r\n  private _resetActiveItem(): void {\r\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\r\n  }\r\n\r\n  /** Determines whether the panel can be opened. */\r\n  private _canOpen(): boolean {\r\n    const element: HTMLInputElement = this._element.nativeElement;\r\n    return !element.readOnly && !element.disabled;\r\n  }\r\n\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {\r\n  AfterContentInit,\r\n  Component,\r\n  ContentChildren,\r\n  ElementRef,\r\n  Input,\r\n  QueryList,\r\n  TemplateRef,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  ChangeDetectorRef,\r\n  ChangeDetectionStrategy,\r\n  EventEmitter,\r\n  Output,\r\n  InjectionToken,\r\n  Inject,\r\n  Optional,\r\n} from '@angular/core';\r\nimport {\r\n  MatOption,\r\n  MatOptgroup,\r\n  MAT_OPTION_PARENT_COMPONENT,\r\n  mixinDisableRipple,\r\n  CanDisableRipple,\r\n} from '@angular/material/core';\r\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\n\r\n\r\n/**\r\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\r\n * the component definition.\r\n */\r\nlet _uniqueAutocompleteIdCounter = 0;\r\n\r\n/** Event object that is emitted when an autocomplete option is selected. */\r\nexport class MatAutocompleteSelectedEvent {\r\n  constructor(\r\n    /** Reference to the autocomplete panel that emitted the event. */\r\n    public source: MatAutocomplete,\r\n    /** Option that was selected. */\r\n    public option: MatOption) { }\r\n}\r\n\r\n// Boilerplate for applying mixins to MatAutocomplete.\r\n/** @docs-private */\r\nexport class MatAutocompleteBase {}\r\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\r\n\r\n/** Default `mat-autocomplete` options that can be overridden. */\r\nexport interface MatAutocompleteDefaultOptions {\r\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\r\n  autoActiveFirstOption?: boolean;\r\n}\r\n\r\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\r\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\r\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options');\r\n\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-autocomplete',\r\n  templateUrl: 'autocomplete.html',\r\n  styleUrls: ['autocomplete.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  exportAs: 'matAutocomplete',\r\n  inputs: ['disableRipple'],\r\n  host: {\r\n    'class': 'mat-autocomplete'\r\n  },\r\n  providers: [\r\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\r\n  ]\r\n})\r\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\r\n  CanDisableRipple {\r\n\r\n  /** Manages active item in option list based on key events. */\r\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\r\n\r\n  /** Whether the autocomplete panel should be visible, depending on option length. */\r\n  showPanel: boolean = false;\r\n\r\n  /** Whether the autocomplete panel is open. */\r\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\r\n  _isOpen: boolean = false;\r\n\r\n  /** @docs-private */\r\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\r\n\r\n  /** Element for the panel containing the autocomplete options. */\r\n  @ViewChild('panel') panel: ElementRef;\r\n\r\n  /** @docs-private */\r\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\r\n\r\n  /** @docs-private */\r\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\r\n\r\n  /** Function that maps an option's control value to its display value in the trigger. */\r\n  @Input() displayWith: ((value: any) => string) | null = null;\r\n\r\n  /**\r\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\r\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\r\n   */\r\n  @Input()\r\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\r\n  set autoActiveFirstOption(value: boolean) {\r\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\r\n  }\r\n  private _autoActiveFirstOption: boolean;\r\n\r\n\r\n  /** Event that is emitted whenever an option from the list is selected. */\r\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\r\n      new EventEmitter<MatAutocompleteSelectedEvent>();\r\n\r\n  /**\r\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\r\n   * inside the overlay container to allow for easy styling.\r\n   */\r\n  @Input('class')\r\n  set classList(value: string) {\r\n    if (value && value.length) {\r\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\r\n      this._elementRef.nativeElement.className = '';\r\n    }\r\n  }\r\n  _classList: {[key: string]: boolean} = {};\r\n\r\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\r\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\r\n\r\n  constructor(\r\n    private _changeDetectorRef: ChangeDetectorRef,\r\n    private _elementRef: ElementRef,\r\n\r\n    // @deletion-target Turn into required param in 6.0.0\r\n    @Optional() @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS)\r\n        defaults?: MatAutocompleteDefaultOptions) {\r\n    super();\r\n\r\n    this._autoActiveFirstOption = defaults &&\r\n        typeof defaults.autoActiveFirstOption !== 'undefined' ?\r\n            defaults.autoActiveFirstOption :\r\n            false;\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\r\n    // Set the initial visibiity state.\r\n    this._setVisibility();\r\n  }\r\n\r\n  /**\r\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\r\n   * above or below the fold, as they are not actually being focused when active.\r\n   */\r\n  _setScrollTop(scrollTop: number): void {\r\n    if (this.panel) {\r\n      this.panel.nativeElement.scrollTop = scrollTop;\r\n    }\r\n  }\r\n\r\n  /** Returns the panel's scrollTop. */\r\n  _getScrollTop(): number {\r\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\r\n  }\r\n\r\n  /** Panel should hide itself when the option list is empty. */\r\n  _setVisibility() {\r\n    this.showPanel = !!this.options.length;\r\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\r\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\r\n    this._changeDetectorRef.markForCheck();\r\n}\r\n\r\n  /** Emits the `select` event. */\r\n  _emitSelectEvent(option: MatOption): void {\r\n    const event = new MatAutocompleteSelectedEvent(this, option);\r\n    this.optionSelected.emit(event);\r\n  }\r\n}\r\n\r\n"],"names":["observableOf"],"mappings":"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"}
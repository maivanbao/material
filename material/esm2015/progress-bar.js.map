{"version":3,"file":"progress-bar.js","sources":["../../../src/lib/progress-bar/index.ts","../../../src/lib/progress-bar/public-api.ts","../../../src/lib/progress-bar/progress-bar-module.ts","../../../src/lib/progress-bar/progress-bar.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nexport * from './progress-bar-module';\r\nexport * from './progress-bar';\r\n\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {MatCommonModule} from '@angular/material/core';\r\nimport {MatProgressBar} from './progress-bar';\r\n\r\n\r\n@NgModule({\r\n  imports: [CommonModule, MatCommonModule],\r\n  exports: [MatProgressBar, MatCommonModule],\r\n  declarations: [MatProgressBar],\r\n})\r\nexport class MatProgressBarModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {\r\n  Component,\r\n  ChangeDetectionStrategy,\r\n  ElementRef,\r\n  Input,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport {CanColor, mixinColor} from '@angular/material/core';\r\n\r\n// TODO(josephperrott): Benchpress tests.\r\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\r\n\r\n// Boilerplate for applying mixins to MatProgressBar.\r\n/** @docs-private */\r\nexport class MatProgressBarBase {\r\n  constructor(public _elementRef: ElementRef) { }\r\n}\r\n\r\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\r\n\r\n/** Counter used to generate unique IDs for progress bars. */\r\nlet progressbarId = 0;\r\n\r\n/**\r\n * `<mat-progress-bar>` component.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'mat-progress-bar',\r\n  exportAs: 'matProgressBar',\r\n  host: {\r\n    'role': 'progressbar',\r\n    'aria-valuemin': '0',\r\n    'aria-valuemax': '100',\r\n    '[attr.aria-valuenow]': 'value',\r\n    '[attr.mode]': 'mode',\r\n    'class': 'mat-progress-bar',\r\n  },\r\n  inputs: ['color'],\r\n  templateUrl: 'progress-bar.html',\r\n  styleUrls: ['progress-bar.css'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n})\r\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\r\n\r\n  constructor(public _elementRef: ElementRef) {\r\n    super(_elementRef);\r\n  }\r\n\r\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\r\n  @Input()\r\n  get value(): number { return this._value; }\r\n  set value(v: number) { this._value = clamp(v || 0); }\r\n  private _value: number = 0;\r\n\r\n  /** Buffer value of the progress bar. Defaults to zero. */\r\n  @Input()\r\n  get bufferValue(): number { return this._bufferValue; }\r\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\r\n  private _bufferValue: number = 0;\r\n\r\n  /**\r\n   * Mode of the progress bar.\r\n   *\r\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\r\n   * 'determinate'.\r\n   * Mirrored to mode attribute.\r\n   */\r\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\r\n\r\n  /** The id of the progress bar. */\r\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\r\n\r\n  /** Gets the current transform value for the progress bar's primary indicator. */\r\n  _primaryTransform() {\r\n    const scale = this.value / 100;\r\n    return {transform: `scaleX(${scale})`};\r\n  }\r\n\r\n  /**\r\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\r\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\r\n   */\r\n  _bufferTransform() {\r\n    if (this.mode === 'buffer') {\r\n      const scale = this.bufferValue / 100;\r\n      return {transform: `scaleX(${scale})`};\r\n    }\r\n  }\r\n}\r\n\r\n/** Clamps a value to be between two numbers, by default 0 and 100. */\r\nfunction clamp(v: number, min = 0, max = 100) {\r\n  return Math.max(min, Math.min(max, v));\r\n}\r\n"],"names":[],"mappings":"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"}